{
  "address": "0xdc8E3000ED0aCAC926A37ead0f0B0F675182AC3b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_logIndex",
          "type": "uint256"
        }
      ],
      "name": "AcceptedNFTCrossTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAllowTokens",
          "type": "address"
        }
      ],
      "name": "AllowTokensChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_logIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "ClaimedNFTToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_userData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "Cross",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFederation",
          "type": "address"
        }
      ],
      "name": "FederationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FixedFeeNFTChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newSideNFTTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "NewSideNFTToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newSideNFTTokenFactory",
          "type": "address"
        }
      ],
      "name": "SideTokenFactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isUpgrading",
          "type": "bool"
        }
      ],
      "name": "Upgrading",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__Pausable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__PauserRol_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_logIndex",
          "type": "uint32"
        }
      ],
      "name": "acceptTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowTokens",
      "outputs": [
        {
          "internalType": "contract IAllowTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAllowTokens",
          "type": "address"
        }
      ],
      "name": "changeAllowTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newFederation",
          "type": "address"
        }
      ],
      "name": "changeFederation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSideNFTTokenFactory",
          "type": "address"
        }
      ],
      "name": "changeSideTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct INFTBridge.NFTClaimData",
          "name": "_claimData",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct INFTBridge.NFTClaimData",
          "name": "_claimData",
          "type": "tuple"
        }
      ],
      "name": "claimFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_originalTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "createSideNFTToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFederation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFixedFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_logIndex",
          "type": "uint32"
        }
      ],
      "name": "getTransactionDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "hasBeenClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "hasCrossed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_federation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sideTokenFactory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbolPrefix",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAddressFromCrossedOriginalToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgrading",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "originalTokenAddressBySideTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveTokensTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setFixedFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isUpgrading",
          "type": "bool"
        }
      ],
      "name": "setUpgrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sideTokenAddressByOriginalTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideTokenFactory",
      "outputs": [
        {
          "internalType": "contract ISideNFTTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbolPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transactionDataHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ce41ced78a1a3525440fe542abf60ad84542502560ae4de84677589a27b70a1",
  "receipt": {
    "to": null,
    "from": "0x2b3058eAb56FB80b53f3137422189E940EeFe31b",
    "contractAddress": "0xdc8E3000ED0aCAC926A37ead0f0B0F675182AC3b",
    "transactionIndex": 0,
    "gasUsed": "3300880",
    "logsBloom": "0x
    "blockHash": "0x4b41262ec8a657b44ae7aabb7f055917d4a8a8a6a1099ed3efded4ba2491d5fa",
    "transactionHash": "0x6ce41ced78a1a3525440fe542abf60ad84542502560ae4de84677589a27b70a1",
    "logs": [],
    "blockNumber": 2170980,
    "cumulativeGasUsed": "3300880",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f57b3a626f709a0447a665aac92698b7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_logIndex\",\"type\":\"uint256\"}],\"name\":\"AcceptedNFTCrossTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAllowTokens\",\"type\":\"address\"}],\"name\":\"AllowTokensChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_logIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"ClaimedNFTToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"Cross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFederation\",\"type\":\"address\"}],\"name\":\"FederationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FixedFeeNFTChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newSideNFTTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"NewSideNFTToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSideNFTTokenFactory\",\"type\":\"address\"}],\"name\":\"SideTokenFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isUpgrading\",\"type\":\"bool\"}],\"name\":\"Upgrading\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__Pausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__PauserRol_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_logIndex\",\"type\":\"uint32\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTokens\",\"outputs\":[{\"internalType\":\"contract IAllowTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAllowTokens\",\"type\":\"address\"}],\"name\":\"changeAllowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFederation\",\"type\":\"address\"}],\"name\":\"changeFederation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSideNFTTokenFactory\",\"type\":\"address\"}],\"name\":\"changeSideTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct INFTBridge.NFTClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct INFTBridge.NFTClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"}],\"name\":\"claimFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_originalTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"createSideNFTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFederation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_logIndex\",\"type\":\"uint32\"}],\"name\":\"getTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"hasBeenClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"hasCrossed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_federation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sideTokenFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbolPrefix\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddressFromCrossedOriginalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"originalTokenAddressBySideTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveTokensTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFixedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isUpgrading\",\"type\":\"bool\"}],\"name\":\"setUpgrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sideTokenAddressByOriginalTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideTokenFactory\",\"outputs\":[{\"internalType\":\"contract ISideNFTTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactionDataHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__Pausable_init(address)\":{\"details\":\"Initializes the contract in unpaused state. Assigns the Pauser role to the deployer.\"},\"initialize(address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Called by a pauser to pause, triggers stopped state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim((address,address,uint256,address,bytes32,bytes32,uint32))\":{\"notice\":\"Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"receiveTokensTo(address,address,uint256)\":{\"notice\":\"ERC-20 tokens approve and transferFrom pattern See https://eips.ethereum.org/EIPS/eip-20#transferfrom\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nftbridge/NFTBridge.sol\":\"NFTBridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IAllowTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\ninterface IAllowTokens {\\r\\n\\r\\n    struct Limits {\\r\\n        uint256 min;\\r\\n        uint256 max;\\r\\n        uint256 daily;\\r\\n        uint256 mediumAmount;\\r\\n        uint256 largeAmount;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        bool allowed;\\r\\n        uint256 typeId;\\r\\n        uint256 spentToday;\\r\\n        uint256 lastDay;\\r\\n    }\\r\\n\\r\\n    struct TypeInfo {\\r\\n        string description;\\r\\n        Limits limits;\\r\\n    }\\r\\n\\r\\n    struct TokensAndType {\\r\\n        address token;\\r\\n        uint256 typeId;\\r\\n    }\\r\\n\\r\\n    function version() external pure returns (string memory);\\r\\n\\r\\n    function getInfoAndLimits(address token) external view returns (TokenInfo memory info, Limits memory limit);\\r\\n\\r\\n    function calcMaxWithdraw(address token) external view returns (uint256 maxWithdraw);\\r\\n\\r\\n    function getTypesLimits() external view returns(Limits[] memory limits);\\r\\n\\r\\n    function getTypeDescriptionsLength() external view returns(uint256);\\r\\n\\r\\n    function getTypeDescriptions() external view returns(string[] memory descriptions);\\r\\n\\r\\n    function setToken(address token, uint256 typeId) external;\\r\\n\\r\\n    function getConfirmations() external view returns (uint256 smallAmount, uint256 mediumAmount, uint256 largeAmount);\\r\\n\\r\\n    function isTokenAllowed(address token) external view returns (bool);\\r\\n\\r\\n    function updateTokenTransfer(address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0xe565b0887688d1625e70316993d66adecc65890012d190a6e450ea7cb7d981b1\",\"license\":\"MIT\"},\"contracts/interface/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\ninterface IWrapped {\\r\\n    function balanceOf(address) external returns(uint);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint wad) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function approve(address guy, uint wad) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint wad) external returns (bool);\\r\\n\\r\\n    function transferFrom(address src, address dst, uint wad)\\r\\n        external\\r\\n        returns (bool);\\r\\n}\",\"keccak256\":\"0xb79b74797d9b4102d4ba69d452ed04bae742e34240c3aa72f654de525b29a5c7\",\"license\":\"MIT\"},\"contracts/lib/LibEIP712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n// https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\r\\nlibrary LibEIP712 {\\r\\n\\r\\n    // Hash of the EIP712 Domain Separator Schema\\r\\n    // keccak256(abi.encodePacked(\\r\\n    //     \\\"EIP712Domain(\\\",\\r\\n    //     \\\"string name,\\\",\\r\\n    //     \\\"string version,\\\",\\r\\n    //     \\\"uint256 chainId,\\\",\\r\\n    //     \\\"address verifyingContract\\\",\\r\\n    //     \\\")\\\"\\r\\n    // ))\\r\\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\r\\n\\r\\n    /// @dev Calculates a EIP712 domain separator.\\r\\n    /// @param name The EIP712 domain name.\\r\\n    /// @param version The EIP712 domain version.\\r\\n    /// @param verifyingContract The EIP712 verifying contract.\\r\\n    /// @return result EIP712 domain separator.\\r\\n    function hashEIP712Domain(\\r\\n        string memory name,\\r\\n        string memory version,\\r\\n        uint256 chainId,\\r\\n        address verifyingContract\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\\r\\n\\r\\n        // Assembly for more efficient computing:\\r\\n        // keccak256(abi.encodePacked(\\r\\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\r\\n        //     keccak256(bytes(name)),\\r\\n        //     keccak256(bytes(version)),\\r\\n        //     chainId,\\r\\n        //     uint256(verifyingContract)\\r\\n        // ))\\r\\n\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            // Calculate hashes of dynamic data\\r\\n            let nameHash := keccak256(add(name, 32), mload(name))\\r\\n            let versionHash := keccak256(add(version, 32), mload(version))\\r\\n\\r\\n            // Load free memory pointer\\r\\n            let memPtr := mload(64)\\r\\n\\r\\n            // Store params in memory\\r\\n            mstore(memPtr, schemaHash)\\r\\n            mstore(add(memPtr, 32), nameHash)\\r\\n            mstore(add(memPtr, 64), versionHash)\\r\\n            mstore(add(memPtr, 96), chainId)\\r\\n            mstore(add(memPtr, 128), verifyingContract)\\r\\n\\r\\n            // Compute hash\\r\\n            result := keccak256(memPtr, 160)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\r\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\r\\n    ///                         with getDomainHash().\\r\\n    /// @param hashStruct The EIP712 hash struct.\\r\\n    /// @return result EIP712 hash applied to the given EIP712 Domain.\\r\\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        // Assembly for more efficient computing:\\r\\n        // keccak256(abi.encodePacked(\\r\\n        //     EIP191_HEADER,\\r\\n        //     EIP712_DOMAIN_HASH,\\r\\n        //     hashStruct\\r\\n        // ));\\r\\n\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            // Load free memory pointer\\r\\n            let memPtr := mload(64)\\r\\n\\r\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\r\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\r\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\r\\n\\r\\n            // Compute hash\\r\\n            result := keccak256(memPtr, 66)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfcfcf60905df9a2644e372c9e76b8cc7a5034c5c4d6d9f44b1ffb56244551237\",\"license\":\"MIT\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nlibrary LibUtils {\\r\\n\\r\\n    function decimalsToGranularity(uint8 decimals) internal pure returns (uint256) {\\r\\n        require(decimals <= 18, \\\"LibUtils: Decimals not <= 18\\\");\\r\\n        return uint256(10)**(18-decimals);\\r\\n    }\\r\\n\\r\\n    function getDecimals(address tokenToUse) internal view returns (uint8) {\\r\\n        //support decimals as uint256 or uint8\\r\\n        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n        require(success, \\\"LibUtils: No decimals\\\");\\r\\n        // uint<M>: enc(X) is the big-endian encoding of X,\\r\\n        //padded on the higher-order (left) side with zero-bytes such that the length is 32 bytes.\\r\\n        return uint8(abi.decode(data, (uint256)));\\r\\n    }\\r\\n\\r\\n    function getGranularity(address tokenToUse) internal view returns (uint256) {\\r\\n        //support granularity if ERC777\\r\\n        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature(\\\"granularity()\\\"));\\r\\n        require(success, \\\"LibUtils: No granularity\\\");\\r\\n\\r\\n        return abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            addr := mload(add(bys,20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9e289497bfdbde6ef762efab3d91e581cc83116929b69851e64da33a8d790196\",\"license\":\"MIT\"},\"contracts/nftbridge/INFTBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface INFTBridge {\\r\\n  struct NFTClaimData {\\r\\n    address payable to;\\r\\n    address from;\\r\\n    uint256 tokenId;\\r\\n    address tokenAddress;\\r\\n    bytes32 blockHash;\\r\\n    bytes32 transactionHash;\\r\\n    uint32 logIndex;\\r\\n  }\\r\\n\\r\\n  function version() external pure returns (string memory);\\r\\n\\r\\n  function getFixedFee() external view returns (uint256);\\r\\n\\r\\n  function receiveTokensTo(\\r\\n    address tokenAddress,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external payable;\\r\\n\\r\\n  /**\\r\\n    * Accepts the transaction from the other chain that was voted and sent by the Federation contract\\r\\n    */\\r\\n  function acceptTransfer(\\r\\n    address _originalTokenAddress,\\r\\n    address payable _from,\\r\\n    address payable _to,\\r\\n    uint256 _tokenId,\\r\\n    bytes32 _blockHash,\\r\\n    bytes32 _transactionHash,\\r\\n    uint32 _logIndex\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n    * Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data\\r\\n    */\\r\\n  function claim(NFTClaimData calldata _claimData) external;\\r\\n\\r\\n  function claimFallback(NFTClaimData calldata _claimData) external;\\r\\n\\r\\n  function getTransactionDataHash(\\r\\n    address _to,\\r\\n    address _from,\\r\\n    uint256 _tokenId,\\r\\n    address _tokenAddress,\\r\\n    bytes32 _blockHash,\\r\\n    bytes32 _transactionHash,\\r\\n    uint32 _logIndex\\r\\n  ) external returns (bytes32);\\r\\n\\r\\n  event Cross(\\r\\n    address indexed _originalTokenAddress,\\r\\n    address indexed _from,\\r\\n    address indexed _to,\\r\\n    address _tokenCreator,\\r\\n    bytes _userData,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _tokenId,\\r\\n    string _tokenURI\\r\\n  );\\r\\n  event NewSideNFTToken(\\r\\n    address indexed _newSideNFTTokenAddress,\\r\\n    address indexed _originalTokenAddress,\\r\\n    string _newSymbol\\r\\n  );\\r\\n  event AcceptedNFTCrossTransfer(\\r\\n    bytes32 indexed _transactionHash,\\r\\n    address indexed _originalTokenAddress,\\r\\n    address indexed _to,\\r\\n    address _from,\\r\\n    uint256 _tokenId,\\r\\n    bytes32 _blockHash,\\r\\n    uint256 _logIndex\\r\\n  );\\r\\n  event FixedFeeNFTChanged(uint256 _amount);\\r\\n  event ClaimedNFTToken(\\r\\n    bytes32 indexed _transactionHash,\\r\\n    address indexed _originalTokenAddress,\\r\\n    address indexed _to,\\r\\n    address _sender,\\r\\n    uint256 _tokenId,\\r\\n    bytes32 _blockHash,\\r\\n    uint256 _logIndex,\\r\\n    address _receiver\\r\\n  );\\r\\n}\\r\\n\",\"keccak256\":\"0x2ae628c2bf573e402f83c817bb3bcf80a9f38aa82e328141f4cd9da1deadc88d\",\"license\":\"MIT\"},\"contracts/nftbridge/ISideNFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface ISideNFTToken {\\r\\n  function mint(address account, uint256 tokenId) external;\\r\\n}\",\"keccak256\":\"0xcedb55e825518cb74679fa8a249cc36f5621d3787075cfaf483729e44cd605d3\",\"license\":\"MIT\"},\"contracts/nftbridge/ISideNFTTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface ISideNFTTokenFactory {\\r\\n\\r\\n    function createSideNFTToken(string calldata name, string calldata symbol, string calldata baseURI,\\r\\n        string calldata contractURI) external returns(address);\\r\\n\\r\\n    event SideNFTTokenCreated(address indexed sideTokenAddress, string symbol, string baseURI, string contractURI);\\r\\n}\",\"keccak256\":\"0x94993f1c48d9cc1e806d04fc5468566c5314f992705729024c4f9bcdd1eeb99f\",\"license\":\"MIT\"},\"contracts/nftbridge/NFTBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n// Import base Initializable contract\\r\\nimport \\\"../zeppelin/upgradable/Initializable.sol\\\";\\r\\n// Import interface and library from OpenZeppelin contracts\\r\\nimport \\\"../zeppelin/upgradable/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../zeppelin/upgradable/lifecycle/UpgradablePausable.sol\\\";\\r\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableOwnable.sol\\\";\\r\\n\\r\\nimport \\\"../zeppelin/introspection/IERC1820Registry.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC721/IERC721Metadata.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC721/IERC721Enumerable.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"../zeppelin/token/ERC721/ERC721Burnable.sol\\\";\\r\\nimport \\\"../zeppelin/utils/Address.sol\\\";\\r\\nimport \\\"../zeppelin/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"../lib/LibEIP712.sol\\\";\\r\\nimport \\\"../lib/LibUtils.sol\\\";\\r\\n\\r\\nimport \\\"./INFTBridge.sol\\\";\\r\\nimport \\\"./ISideNFTToken.sol\\\";\\r\\nimport \\\"./ISideNFTTokenFactory.sol\\\";\\r\\nimport \\\"../interface/IAllowTokens.sol\\\";\\r\\nimport \\\"../interface/IWrapped.sol\\\";\\r\\n\\r\\n// solhint-disable-next-line max-states-count\\r\\ncontract NFTBridge is\\r\\n  Initializable,\\r\\n  INFTBridge,\\r\\n  UpgradablePausable,\\r\\n  UpgradableOwnable,\\r\\n  ReentrancyGuard,\\r\\n  IERC721Receiver {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n  using Address for address;\\r\\n\\r\\n  address internal constant NULL_ADDRESS = address(0);\\r\\n  bytes32 internal constant NULL_HASH = bytes32(0);\\r\\n  IERC1820Registry internal constant ERC1820 =\\r\\n      IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\r\\n\\r\\n  address payable internal federation;\\r\\n  uint256 internal fixedFee;\\r\\n  string public symbolPrefix;\\r\\n\\r\\n  mapping(address => address) public sideTokenAddressByOriginalTokenAddress;\\r\\n  mapping(address => address) public originalTokenAddressBySideTokenAddress;\\r\\n  mapping(address => bool) public isAddressFromCrossedOriginalToken; // address => returns true if it's an original token address crossed previously (whether it comes from main or side chain)\\r\\n  mapping(bytes32 => bool) public claimed; // transactionDataHash => true // previously named processed\\r\\n  IAllowTokens public allowTokens;\\r\\n  ISideNFTTokenFactory public sideTokenFactory;\\r\\n  bool public isUpgrading;\\r\\n  mapping(bytes32 => bytes32) public transactionDataHashes; // transactionHash => transactionDataHash\\r\\n\\r\\n  event AllowTokensChanged(address _newAllowTokens);\\r\\n  event FederationChanged(address _newFederation);\\r\\n  event SideTokenFactoryChanged(address _newSideNFTTokenFactory);\\r\\n  event Upgrading(bool _isUpgrading);\\r\\n\\r\\n  function initialize(\\r\\n    address _manager,\\r\\n    address payable _federation,\\r\\n    address _allowTokens,\\r\\n    address _sideTokenFactory,\\r\\n    string memory _symbolPrefix\\r\\n  ) public initializer {\\r\\n    UpgradableOwnable.initialize(_manager);\\r\\n    UpgradablePausable.__Pausable_init(_manager);\\r\\n    symbolPrefix = _symbolPrefix;\\r\\n    allowTokens = IAllowTokens(_allowTokens);\\r\\n    sideTokenFactory = ISideNFTTokenFactory(_sideTokenFactory);\\r\\n    federation = _federation;\\r\\n    ERC1820.setInterfaceImplementer(\\r\\n      address(this),\\r\\n      0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b,\\r\\n      address(this)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function version() external pure override returns (string memory) {\\r\\n    return \\\"v1\\\";\\r\\n  }\\r\\n\\r\\n  modifier whenNotUpgrading() {\\r\\n    require(!isUpgrading, \\\"Bridge: Upgrading\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function acceptTransfer(\\r\\n    address _tokenAddress,\\r\\n    address payable _from,\\r\\n    address payable _to,\\r\\n    uint256 _tokenId,\\r\\n    bytes32 _blockHash,\\r\\n    bytes32 _transactionHash,\\r\\n    uint32 _logIndex\\r\\n  ) external whenNotPaused nonReentrant override {\\r\\n    require(_msgSender() == federation, \\\"NFTBridge: Not Federation\\\");\\r\\n    require(\\r\\n      isAddressFromCrossedOriginalToken[_tokenAddress] ||\\r\\n          sideTokenAddressByOriginalTokenAddress[_tokenAddress] != NULL_ADDRESS,\\r\\n      \\\"NFTBridge: Unknown token\\\"\\r\\n    );\\r\\n    require(_to != NULL_ADDRESS, \\\"NFTBridge: Null To\\\");\\r\\n    require(_from != NULL_ADDRESS, \\\"NFTBridge: Null From\\\");\\r\\n    require(_blockHash != NULL_HASH, \\\"NFTBridge: Null BlockHash\\\");\\r\\n    require(_transactionHash != NULL_HASH, \\\"NFTBridge: Null TxHash\\\");\\r\\n    require(\\r\\n      transactionDataHashes[_transactionHash] == bytes32(0),\\r\\n      \\\"NFTBridge: Already accepted\\\"\\r\\n    );\\r\\n\\r\\n    bytes32 _transactionDataHash = getTransactionDataHash(\\r\\n      _to,\\r\\n      _from,\\r\\n      _tokenId,\\r\\n      _tokenAddress,\\r\\n      _blockHash,\\r\\n      _transactionHash,\\r\\n      _logIndex\\r\\n    );\\r\\n    // Do not remove, claimed will also have transactions previously processed using older bridge versions\\r\\n    require(!claimed[_transactionDataHash], \\\"NFTBridge: Already claimed\\\");\\r\\n\\r\\n    transactionDataHashes[_transactionHash] = _transactionDataHash;\\r\\n//    tokenAddressByTransactionHash[_transactionHash] = _tokenAddress;\\r\\n//    senderAddresses[_transactionHash] = _from;\\r\\n\\r\\n    emit AcceptedNFTCrossTransfer(\\r\\n      _transactionHash,\\r\\n      _tokenAddress,\\r\\n      _to,\\r\\n      _from,\\r\\n      _tokenId,\\r\\n      _blockHash,\\r\\n      _logIndex\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function createSideNFTToken(\\r\\n    address _originalTokenAddress,\\r\\n    string calldata _originalTokenSymbol,\\r\\n    string calldata _originalTokenName,\\r\\n    string calldata _baseURI,\\r\\n    string calldata _contractURI\\r\\n  ) external onlyOwner {\\r\\n    require(_originalTokenAddress != NULL_ADDRESS, \\\"NFTBridge: Null original token address\\\");\\r\\n    address sideTokenAddress = sideTokenAddressByOriginalTokenAddress[_originalTokenAddress];\\r\\n    require(sideTokenAddress == NULL_ADDRESS, \\\"NFTBridge: Side token already exists\\\");\\r\\n    string memory sideTokenSymbol = string(abi.encodePacked(symbolPrefix, _originalTokenSymbol));\\r\\n\\r\\n    // Create side token\\r\\n    sideTokenAddress = sideTokenFactory.createSideNFTToken(_originalTokenName, sideTokenSymbol, _baseURI, _contractURI);\\r\\n\\r\\n    sideTokenAddressByOriginalTokenAddress[_originalTokenAddress] = sideTokenAddress;\\r\\n    originalTokenAddressBySideTokenAddress[sideTokenAddress] = _originalTokenAddress;\\r\\n    emit NewSideNFTToken(sideTokenAddress, _originalTokenAddress, sideTokenSymbol);\\r\\n  }\\r\\n\\r\\n  function claim(NFTClaimData calldata _claimData) external override {\\r\\n    _claim(_claimData, _claimData.to);\\r\\n  }\\r\\n\\r\\n  function claimFallback(NFTClaimData calldata _claimData) external override {\\r\\n    require(_msgSender() == _claimData.from, \\\"NFTBridge: invalid sender\\\");\\r\\n    _claim(_claimData, _msgSender());\\r\\n  }\\r\\n\\r\\n  function _claim(\\r\\n    NFTClaimData calldata _claimData,\\r\\n    address payable _receiver\\r\\n  ) internal {\\r\\n    address tokenAddress = _claimData.tokenAddress;\\r\\n    uint256 tokenId = _claimData.tokenId;\\r\\n\\r\\n    bytes32 transactionDataHash = getTransactionDataHash(\\r\\n      _claimData.to,\\r\\n      _claimData.from,\\r\\n      tokenId,\\r\\n      tokenAddress,\\r\\n      _claimData.blockHash,\\r\\n      _claimData.transactionHash,\\r\\n      _claimData.logIndex\\r\\n    );\\r\\n    require(\\r\\n      transactionDataHashes[_claimData.transactionHash] == transactionDataHash,\\r\\n      \\\"NFTBridge: Wrong txDataHash\\\"\\r\\n    );\\r\\n    require(!claimed[transactionDataHash], \\\"NFTBridge: Already claimed\\\");\\r\\n\\r\\n    claimed[transactionDataHash] = true;\\r\\n    bool isClaimBeingRequestedInMainChain = isAddressFromCrossedOriginalToken[tokenAddress];\\r\\n    if (isClaimBeingRequestedInMainChain) {\\r\\n      IERC721(tokenAddress).safeTransferFrom(address(this), _receiver, tokenId);\\r\\n    } else {\\r\\n      address sideTokenAddress = sideTokenAddressByOriginalTokenAddress[tokenAddress];\\r\\n      ISideNFTToken(sideTokenAddress).mint(_receiver, tokenId);\\r\\n    }\\r\\n\\r\\n    emit ClaimedNFTToken(\\r\\n      _claimData.transactionHash,\\r\\n      tokenAddress,\\r\\n      _claimData.to,\\r\\n      _claimData.from,\\r\\n      _claimData.tokenId,\\r\\n      _claimData.blockHash,\\r\\n      _claimData.logIndex,\\r\\n      _receiver\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getTokenCreator(address tokenAddress, uint256 tokenId) public view returns (address) {\\r\\n    (bool success, bytes memory data) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"creator()\\\"));\\r\\n    if (success) {\\r\\n      return abi.decode(data, (address));\\r\\n    }\\r\\n\\r\\n    return IERC721(tokenAddress).ownerOf(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * ERC-20 tokens approve and transferFrom pattern\\r\\n    * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\\r\\n    */\\r\\n  function receiveTokensTo(\\r\\n    address tokenAddress,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public payable override {\\r\\n    address tokenCreator = getTokenCreator(tokenAddress, tokenId);\\r\\n\\r\\n    address payable sender = _msgSender();\\r\\n    // Transfer the tokens on IERC721, they should be already Approved for the bridge Address to use them\\r\\n    IERC721(tokenAddress).transferFrom(sender, address(this), tokenId);\\r\\n\\r\\n    crossTokens(tokenAddress, to, tokenCreator, \\\"\\\", tokenId);\\r\\n\\r\\n    if (fixedFee > 0) {\\r\\n      require(msg.value >= fixedFee, \\\"NFTBridge: value is smaller than fixed fee\\\");\\r\\n\\r\\n      // Send the payment to the MultiSig of the Federation\\r\\n      federation.transfer(fixedFee);\\r\\n      if (msg.value > fixedFee) { // refund of unused value\\r\\n        sender.transfer(msg.value.sub(fixedFee));\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function crossTokens(\\r\\n    address tokenAddress,\\r\\n    address to,\\r\\n    address tokenCreator,\\r\\n    bytes memory userData,\\r\\n    uint256 tokenId\\r\\n  ) internal whenNotUpgrading whenNotPaused nonReentrant {\\r\\n    isAddressFromCrossedOriginalToken[tokenAddress] = true;\\r\\n\\r\\n    IERC721Enumerable enumerable = IERC721Enumerable(tokenAddress);\\r\\n    IERC721Metadata metadataIERC = IERC721Metadata(tokenAddress);\\r\\n    string memory tokenURI = metadataIERC.tokenURI(tokenId);\\r\\n\\r\\n    address originalTokenAddress = tokenAddress;\\r\\n    if (originalTokenAddressBySideTokenAddress[tokenAddress] != NULL_ADDRESS) {\\r\\n      originalTokenAddress = originalTokenAddressBySideTokenAddress[tokenAddress];\\r\\n      ERC721Burnable(tokenAddress).burn(tokenId);\\r\\n    }\\r\\n\\r\\n    emit Cross(\\r\\n      originalTokenAddress,\\r\\n      _msgSender(),\\r\\n      to,\\r\\n      tokenCreator,\\r\\n      userData,\\r\\n      enumerable.totalSupply(),\\r\\n      tokenId,\\r\\n      tokenURI\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getTransactionDataHash(\\r\\n    address _to,\\r\\n    address _from,\\r\\n    uint256 _tokenId,\\r\\n    address _tokenAddress,\\r\\n    bytes32 _blockHash,\\r\\n    bytes32 _transactionHash,\\r\\n    uint32 _logIndex\\r\\n  ) public pure override returns (bytes32) {\\r\\n    return keccak256(\\r\\n      abi.encodePacked(\\r\\n        _blockHash,\\r\\n        _transactionHash,\\r\\n        _to,\\r\\n        _from,\\r\\n        _tokenId,\\r\\n        _tokenAddress,\\r\\n        _logIndex\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function setFixedFee(uint256 amount) external onlyOwner {\\r\\n    fixedFee = amount;\\r\\n    emit FixedFeeNFTChanged(fixedFee);\\r\\n  }\\r\\n\\r\\n  function getFixedFee() external view override returns (uint256) {\\r\\n    return fixedFee;\\r\\n  }\\r\\n\\r\\n  function changeFederation(address payable newFederation) external onlyOwner {\\r\\n    require(newFederation != NULL_ADDRESS, \\\"NFTBridge: Federation is empty\\\");\\r\\n    federation = newFederation;\\r\\n    emit FederationChanged(federation);\\r\\n  }\\r\\n\\r\\n  function changeAllowTokens(address newAllowTokens) external onlyOwner {\\r\\n    require(newAllowTokens != NULL_ADDRESS, \\\"NFTBridge: AllowTokens is empty\\\");\\r\\n    allowTokens = IAllowTokens(newAllowTokens);\\r\\n    emit AllowTokensChanged(newAllowTokens);\\r\\n  }\\r\\n\\r\\n  function getFederation() external view returns (address) {\\r\\n    return federation;\\r\\n  }\\r\\n\\r\\n  function changeSideTokenFactory(address newSideNFTTokenFactory) external onlyOwner {\\r\\n    require(\\r\\n      newSideNFTTokenFactory != NULL_ADDRESS,\\r\\n      \\\"NFTBridge: empty SideTokenFactory\\\"\\r\\n    );\\r\\n    sideTokenFactory = ISideNFTTokenFactory(newSideNFTTokenFactory);\\r\\n    emit SideTokenFactoryChanged(newSideNFTTokenFactory);\\r\\n  }\\r\\n\\r\\n  function setUpgrading(bool _isUpgrading) external onlyOwner {\\r\\n    isUpgrading = _isUpgrading;\\r\\n    emit Upgrading(isUpgrading);\\r\\n  }\\r\\n\\r\\n  function hasCrossed(bytes32 transactionHash) public view returns (bool) {\\r\\n    return transactionDataHashes[transactionHash] != bytes32(0);\\r\\n  }\\r\\n\\r\\n  function hasBeenClaimed(bytes32 transactionHash) public view returns (bool) {\\r\\n    return claimed[transactionDataHashes[transactionHash]];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n    */\\r\\n  function onERC721Received(\\r\\n    address,\\r\\n    address,\\r\\n    uint256,\\r\\n    bytes memory\\r\\n  ) public virtual override returns (bytes4) {\\r\\n    return this.onERC721Received.selector;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x1d5e192990a4660c02e48e52be750cbca20966baa95cb036f0d6c7512da0eacf\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract  Context {\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xff38f9ba6027ec9133e123cb63f4c77fb89b2569cd3a1825c7f693f496c67a78\",\"license\":\"MIT\"},\"contracts/zeppelin/access/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account doesn't have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x51be0ac4cc78172ee6ee886a4779e6b8f289420541d28be81f3c427c5118c298\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it's supported.\\r\\n     */\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor () {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5415f8c63658ee08e6284e6f270b2490331aea0c375b6451c4c9ed14a805a336\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xd5da4ccf6a22475f021130a32aaad92daf6eecce9258cb7a8a5c48d109607767\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\r\\n * implementers for interfaces in this registry, as well as query support.\\r\\n *\\r\\n * Implementers may be shared by multiple accounts, and can also implement more\\r\\n * than a single interface for each account. Contracts can implement interfaces\\r\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\r\\n * contract.\\r\\n *\\r\\n * {IERC165} interfaces can also be queried via the registry.\\r\\n *\\r\\n * For an in-depth explanation and source code analysis, see the EIP text.\\r\\n */\\r\\ninterface IERC1820Registry {\\r\\n    /**\\r\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\r\\n     * account is able to set interface implementers for it.\\r\\n     *\\r\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\r\\n     * `newManager` will reset the manager to this initial state.\\r\\n     *\\r\\n     * Emits a {ManagerChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the current manager for `account`.\\r\\n     */\\r\\n    function setManager(address account, address newManager) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the manager for `account`.\\r\\n     *\\r\\n     * See {setManager}.\\r\\n     */\\r\\n    function getManager(address account) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the `implementer` contract as `account`'s implementer for\\r\\n     * `interfaceHash`.\\r\\n     *\\r\\n     * `account` being the zero address is an alias for the caller's address.\\r\\n     * The zero address can also be used in `implementer` to remove an old one.\\r\\n     *\\r\\n     * See {interfaceHash} to learn how these are created.\\r\\n     *\\r\\n     * Emits an {InterfaceImplementerSet} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the current manager for `_account`.\\r\\n     * - `_interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\r\\n     * end in 28 zeroes).\\r\\n     * - `_implementer` must implement {IERC1820Implementer} and return true when\\r\\n     * queried for support, unless `implementer` is the caller. See\\r\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\r\\n     */\\r\\n    function setInterfaceImplementer(address _account, bytes32 _interfaceHash, address _implementer) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the implementer of `_interfaceHash` for `_account`. If no such\\r\\n     * implementer is registered, returns the zero address.\\r\\n     *\\r\\n     * If `_interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\r\\n     * zeroes), `_account` will be queried for support of it.\\r\\n     *\\r\\n     * `account` being the zero address is an alias for the caller's address.\\r\\n     */\\r\\n    function getInterfaceImplementer(address _account, bytes32 _interfaceHash) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\r\\n     * corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\r\\n     */\\r\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\r\\n     *  @param account Address of the contract for which to update the cache.\\r\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\r\\n     */\\r\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\r\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\r\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\r\\n     *  {updateERC165Cache} with the contract address.\\r\\n     *  @param account Address of the contract to check.\\r\\n     *  @param interfaceId ERC165 interface to check.\\r\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\r\\n     */\\r\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\r\\n     *  @param account Address of the contract to check.\\r\\n     *  @param interfaceId ERC165 interface to check.\\r\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\r\\n     */\\r\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\r\\n\\r\\n    event ManagerChanged(address indexed account, address indexed newManager);\\r\\n}\\r\\n\",\"keccak256\":\"0x0c607a83a8f5ec2f214bc754ffb59428d90978e122108fcd91ba193d5fc78018\",\"license\":\"MIT\"},\"contracts/zeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x29ffa7ff59806a3add585615cc102b70b43049587dcc73649f77b427f35b009d\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x7531f90b8a5a04fd225fb07a30e0792068438a7c82127a22db870c1849460dfc\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../../math/SafeMath.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x393fa2aef898c565ba8c8816ac0e2d0e31865d2866e4807f39f1a8cef95f5a81\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../GSN/Context.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Metadata.sol\\\";\\r\\nimport \\\"./IERC721Enumerable.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"../../introspection/ERC165.sol\\\";\\r\\nimport \\\"../../math/SafeMath.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\r\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\r\\nimport \\\"../../utils/Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\r\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\r\\n\\r\\n    // Enumerable mapping from token ids to their owners\\r\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping (uint256 => string) private _tokenURIs;\\r\\n\\r\\n    // Base URI\\r\\n    string private _baseURI;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\r\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\r\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\r\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\r\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\r\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\r\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\r\\n     *\\r\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\r\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\r\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\r\\n     *\\r\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\r\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\r\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\r\\n     *\\r\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n\\r\\n        // register the supported interfaces to conform to ERC721 via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721);\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _holderTokens[owner].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(base, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\r\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\r\\n    * to the token ID if no specific URI is set for that token ID.\\r\\n    */\\r\\n    function baseURI() public view virtual returns (string memory) {\\r\\n        return _baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        return _holderTokens[owner].at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\r\\n        return _tokenOwners.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _tokenOwners.contains(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     d*\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        // Clear metadata (if any)\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n\\r\\n        _holderTokens[owner].remove(tokenId);\\r\\n\\r\\n        _tokenOwners.remove(tokenId);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _holderTokens[from].remove(tokenId);\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the base URI for all token IDs. It is\\r\\n     * automatically added as a prefix to the value returned in {tokenURI},\\r\\n     * or to the token ID if {tokenURI} is empty.\\r\\n     */\\r\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\r\\n        _baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        private returns (bool)\\r\\n    {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\r\\n            IERC721Receiver(to).onERC721Received.selector,\\r\\n            _msgSender(),\\r\\n            from,\\r\\n            tokenId,\\r\\n            _data\\r\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n        return (retval == _ERC721_RECEIVED);\\r\\n    }\\r\\n\\r\\n    function _approve(address to, uint256 tokenId) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\r\\n}\\r\\n\",\"keccak256\":\"0x4180eedc31f632ef146dd07583840a9688de44bdb9e7fe2425c448fd57496004\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../GSN/Context.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Burnable Token\\r\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\r\\n */\\r\\nabstract contract ERC721Burnable is Context, ERC721 {\\r\\n    /**\\r\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own `tokenId` or be an approved operator.\\r\\n     */\\r\\n    function burn(uint256 tokenId) public virtual {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x699ce4b0903e16b958d6a008703c24be7d11a7d3223e5e9ab9523a8f81687f13\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n      *\\r\\n      * Requirements:\\r\\n      *\\r\\n      * - `from` cannot be the zero address.\\r\\n      * - `to` cannot be the zero address.\\r\\n      * - `tokenId` token must exist and be owned by `from`.\\r\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n      *\\r\\n      * Emits a {Transfer} event.\\r\\n      */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd3c22060e78ce52f5cb41b3ab9b29bb5582aa4a58015e878116251cba658324c\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5539b1567797a57e7a135dcc446fdbb02b1ae2b450799274db88a47dea81e6fa\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe92ae6f0b94fce8480d16a24faa8835926cd5fc074a4d418de94aaddbdecf49d\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x515410f905897b0d658f1746064cc2a94d52a1bc625fab215dccb7fb5ead50f7\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || !initialized, \\\"Contract instance is already initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\",\"keccak256\":\"0xc1f4d917648f0e17ba6a023a168173ad6163f3120e24d1c97ae294430e42eaf3\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/access/roles/UpgradablePauserRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../../../GSN/Context.sol\\\";\\r\\nimport \\\"../../../access/Roles.sol\\\";\\r\\n\\r\\ncontract UpgradablePauserRole is Initializable, Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event PauserAdded(address indexed account);\\r\\n    event PauserRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _pausers;\\r\\n\\r\\n    function __PauserRol_init(address sender) public initializer {\\r\\n        if (!isPauser(sender)) {\\r\\n            _addPauser(sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller doesn't have the role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return _pausers.has(account);\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyPauser {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) internal {\\r\\n        _pausers.add(account);\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) internal {\\r\\n        _pausers.remove(account);\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x175465830c1ec77cab5ebdcfaeca43c79d33f3becded5332ed6136adac3f99eb\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/lifecycle/UpgradablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../../GSN/Context.sol\\\";\\r\\nimport \\\"../access/roles/UpgradablePauserRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\ncontract UpgradablePausable is Initializable, Context, UpgradablePauserRole {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\r\\n     * to the deployer.\\r\\n     */\\r\\n    function __Pausable_init(address sender) public initializer {\\r\\n        UpgradablePauserRole.__PauserRol_init(sender);\\r\\n\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to pause, triggers stopped state.\\r\\n     */\\r\\n    function pause() public onlyPauser whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause, returns to normal state.\\r\\n     */\\r\\n    function unpause() public onlyPauser whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0837df4a389f73b7210b97b1b64ba8f9cc842367b473f8fc856c4e892f212ac4\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../../GSN/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract UpgradableOwnable is Initializable, Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function initialize(address sender) public initializer {\\r\\n        _owner = sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return _msgSender() == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xea920007e371a3300245b5885f72cecc472c4780818365f0025fae65a767273d\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Helps contracts guard against reentrancy attacks.\\r\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\r\\n * @dev If you mark a function `nonReentrant`, you should also\\r\\n * mark it `external`.\\r\\n */\\r\\ncontract ReentrancyGuard is Initializable {\\r\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\r\\n    uint256 private _guardCounter;\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\r\\n        // value, which is a more expensive operation.\\r\\n        _guardCounter = 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _guardCounter += 1;\\r\\n        uint256 localCounter = _guardCounter;\\r\\n        _;\\r\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: no reentrant allowed\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x67a8148c8357409eac291fc0954ca7a2d023b0534294be95f34eba0b15d748a5\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5e6562dbec24dff773a844145d3cf3de12505b6b9f8d6ac5259f291c731c1ff\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableMap.UintToAddressMap private myMap;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\r\\n * supported.\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct MapEntry {\\r\\n        bytes32 _key;\\r\\n        bytes32 _value;\\r\\n    }\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of map keys and values\\r\\n        MapEntry[] _entries;\\r\\n\\r\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\r\\n        // because index 0 means a key is not in the map.\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\r\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\r\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\r\\n            // The entry is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            map._indexes[key] = map._entries.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            map._entries[keyIndex - 1]._value = value;\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\r\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\r\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = keyIndex - 1;\\r\\n            uint256 lastIndex = map._entries.length - 1;\\r\\n\\r\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\r\\n\\r\\n            // Move the last entry to the index where the entry to delete is\\r\\n            map._entries[toDeleteIndex] = lastEntry;\\r\\n            // Update the index for the moved entry\\r\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved entry was stored\\r\\n            map._entries.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete map._indexes[key];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._indexes[key] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._entries.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of entries inside the\\r\\n    * array, and it may change when more entries are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\r\\n\\r\\n        MapEntry storage entry = map._entries[index];\\r\\n        return (entry._key, entry._value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\r\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\r\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\r\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    // UintToAddressMap\\r\\n\\r\\n    struct UintToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\r\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\r\\n        return _remove(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (uint256(key), address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5538ae23826bfaa205dc16a24a50f18feaae576a1c46ddea7086bbbd4c13d84e\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4c3f4a13b8f0c2b911044b85d3db13396e772cb9b79f7fb16ec8d41ca5fc7321\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        uint256 index = digits - 1;\\r\\n        temp = value;\\r\\n        while (temp != 0) {\\r\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\r\\n            temp /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1313d4fbca3b365d39200fc056b6db57b957b53dabb06d6fff3566fb8caa29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f91806100206000396000f3fe6080604052600436106102515760003560e01c806382dc1ec411610139578063c4d66de8116100b6578063ea2170911161007a578063ea21709114610686578063eb16136f1461069b578063ed99f4c6146106bb578063f1409028146106d0578063f2fde38b146106f0578063fa0caa161461071057610251565b8063c4d66de8146105e6578063cc3c0f0614610606578063ce5f8bf214610626578063d220d30a14610646578063da6770371461066657610251565b8063a53d6e6e116100fd578063a53d6e6e14610567578063a9e4eff21461057c578063b79472621461059c578063b86f60d2146105b1578063c33c8c61146105c657610251565b806382dc1ec4146104db5780638456cb59146104fb5780638da5cb5b146105105780638f32d59b14610532578063916dc59d1461054757610251565b806342cdb2c6116101d2578063664761091161019657806366476109146104495780636a863191146104695780636ef8d66d14610489578063715018a61461049e5780637813bea2146104b35780638129fc1c146104c657610251565b806342cdb2c6146103bd57806346fbf68e146103dd57806354fd4d50146103fd57806359a8a8671461041f5780635c975abb1461043457610251565b80632f3cca4e116102195780632f3cca4e146103285780632fb3b3611461034857806337de81061461036857806337e76109146103885780633f4ba83a146103a857610251565b806307c8f7b0146102565780630b2292a614610278578063150b7a02146102ae5780631b68e6e6146102db5780631c7e6efb146102fb575b600080fd5b34801561026257600080fd5b506102766102713660046124d8565b610730565b005b34801561028457600080fd5b506102986102933660046124f8565b6107b9565b6040516102a59190612836565b60405180910390f35b3480156102ba57600080fd5b506102ce6102c936600461235c565b6107cb565b6040516102a5919061283f565b3480156102e757600080fd5b506102766102f636600461257a565b6107db565b34801561030757600080fd5b5061031b61031636600461216d565b610836565b6040516102a5919061282b565b34801561033457600080fd5b5061027661034336600461216d565b61084b565b34801561035457600080fd5b5061027661036336600461221b565b6108d4565b34801561037457600080fd5b506102766103833660046124f8565b610a3e565b34801561039457600080fd5b5061031b6103a33660046124f8565b610a97565b3480156103b457600080fd5b50610276610abc565b3480156103c957600080fd5b506102766103d836600461216d565b610b4f565b3480156103e957600080fd5b5061031b6103f836600461216d565b610be4565b34801561040957600080fd5b50610412610bf7565b6040516102a591906128b2565b34801561042b57600080fd5b50610412610c13565b34801561044057600080fd5b5061031b610ca1565b34801561045557600080fd5b5061027661046436600461257a565b610caa565b34801561047557600080fd5b506102766104843660046121a5565b610cbb565b34801561049557600080fd5b50610276610f0a565b3480156104aa57600080fd5b50610276610f1c565b6102766104c13660046122b4565b610f90565b3480156104d257600080fd5b506102766110eb565b3480156104e757600080fd5b506102766104f636600461216d565b611164565b34801561050757600080fd5b50610276611194565b34801561051c57600080fd5b50610525611214565b6040516102a59190612707565b34801561053e57600080fd5b5061031b611228565b34801561055357600080fd5b5061027661056236600461216d565b611253565b34801561057357600080fd5b506105256112e8565b34801561058857600080fd5b506102986105973660046122f4565b6112f7565b3480156105a857600080fd5b5061031b611339565b3480156105bd57600080fd5b50610525611349565b3480156105d257600080fd5b506102766105e13660046123d9565b611358565b3480156105f257600080fd5b5061027661060136600461216d565b61151f565b34801561061257600080fd5b5061031b6106213660046124f8565b6115ea565b34801561063257600080fd5b5061052561064136600461216d565b6115ff565b34801561065257600080fd5b506105256106613660046124ad565b61161a565b34801561067257600080fd5b5061031b6106813660046124f8565b61174d565b34801561069257600080fd5b50610525611761565b3480156106a757600080fd5b506102766106b636600461216d565b611770565b3480156106c757600080fd5b506102986117fb565b3480156106dc57600080fd5b506105256106eb36600461216d565b611801565b3480156106fc57600080fd5b5061027661070b36600461216d565b61181c565b34801561071c57600080fd5b5061027661072b36600461216d565b611849565b610738611228565b61075d5760405162461bcd60e51b815260040161075490612c16565b60405180910390fd5b603e805460ff60a01b1916600160a01b831515810291909117918290556040517f983e436223c000a441c2443b394ca5fb4669a513fe86dc1dd44494047b514ad9926107ae9260ff9104169061282b565b60405180910390a150565b603f6020526000908152604090205481565b630a85bd0160e11b949350505050565b6107eb604082016020830161216d565b6001600160a01b03166107fc6118e4565b6001600160a01b0316146108225760405162461bcd60e51b81526004016107549061296f565b6108338161082e6118e4565b6118e8565b50565b603b6020526000908152604090205460ff1681565b600054610100900460ff1680610864575060005460ff16155b6108805760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff161580156108ab576000805460ff1961ff0019909116610100171660011790555b6108b482611770565b6034805460ff1916905580156108d0576000805461ff00191690555b5050565b600054610100900460ff16806108ed575060005460ff16155b6109095760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff16158015610934576000805460ff1961ff0019909116610100171660011790555b61093d8661151f565b6109468661084b565b8151610959906038906020850190612033565b50603d80546001600160a01b038087166001600160a01b031992831617909255603e805486841690831617905560368054928816929091169190911790556040516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d906109f29030907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9082906004016127d2565b600060405180830381600087803b158015610a0c57600080fd5b505af1158015610a20573d6000803e3d6000fd5b505050508015610a36576000805461ff00191690555b505050505050565b610a46611228565b610a625760405162461bcd60e51b815260040161075490612c16565b60378190556040517f5eebc59df2662862db7d6ef529ff1a264721bd7c26550f39c89a685382668f4e906107ae908390612836565b6000818152603f60209081526040808320548352603c90915290205460ff165b919050565b610ac76103f86118e4565b610ae35760405162461bcd60e51b815260040161075490612acb565b60345460ff16610b055760405162461bcd60e51b81526004016107549061290a565b6034805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610b386118e4565b604051610b459190612707565b60405180910390a1565b610b57611228565b610b735760405162461bcd60e51b815260040161075490612c16565b6001600160a01b038116610b995760405162461bcd60e51b815260040161075490612e8f565b603e80546001600160a01b0319166001600160a01b0383161790556040517f619936bc6e3618d0b8dc69bcc70134fe9d88f9967f3a8b8304e3183692521625906107ae908390612707565b6000610bf1603383611b47565b92915050565b604080518082019091526002815261763160f01b602082015290565b6038805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c995780601f10610c6e57610100808354040283529160200191610c99565b820191906000526020600020905b815481529060010190602001808311610c7c57829003601f168201915b505050505081565b60345460ff1690565b6108338161082e602082018261216d565b60345460ff1615610cde5760405162461bcd60e51b815260040161075490612b57565b60358054600101908190556036546001600160a01b0316610cfd6118e4565b6001600160a01b031614610d235760405162461bcd60e51b815260040161075490612bdf565b6001600160a01b0388166000908152603b602052604090205460ff1680610d6357506001600160a01b038881166000908152603960205260409020541615155b610d7f5760405162461bcd60e51b815260040161075490612cfb565b6001600160a01b038616610da55760405162461bcd60e51b815260040161075490612db3565b6001600160a01b038716610dcb5760405162461bcd60e51b815260040161075490612b81565b83610de85760405162461bcd60e51b815260040161075490612e16565b82610e055760405162461bcd60e51b815260040161075490612baf565b6000838152603f602052604090205415610e315760405162461bcd60e51b815260040161075490612d32565b6000610e428789888c8989896112f7565b6000818152603c602052604090205490915060ff1615610e745760405162461bcd60e51b815260040161075490612cc4565b80603f600086815260200190815260200160002081905550866001600160a01b0316896001600160a01b0316857f68c55835fbe7c27942e2ff7632542cf70ee33ba41b292bff9cb6183e3db7e63b8b8a8a89604051610ed69493929190612758565b60405180910390a4506035548114610f005760405162461bcd60e51b8152600401610754906128c5565b5050505050505050565b610f1a610f156118e4565b611b8f565b565b610f24611228565b610f405760405162461bcd60e51b815260040161075490612c16565b60345460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360348054610100600160a81b0319169055565b6000610f9c848361161a565b90506000610fa86118e4565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd90610fdb9084903090889060040161271b565b600060405180830381600087803b158015610ff557600080fd5b505af1158015611009573d6000803e3d6000fd5b505050506110298585846040518060200160405280600081525087611bd1565b603754156110e4576037543410156110535760405162461bcd60e51b815260040161075490612d69565b6036546037546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561108f573d6000803e3d6000fd5b506037543411156110e457806001600160a01b03166108fc6110bc60375434611e5b90919063ffffffff16565b6040518115909202916000818181858888f19350505050158015610a36573d6000803e3d6000fd5b5050505050565b600054610100900460ff1680611104575060005460ff16155b6111205760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff1615801561114b576000805460ff1961ff0019909116610100171660011790555b60016035558015610833576000805461ff001916905550565b61116f6103f86118e4565b61118b5760405162461bcd60e51b815260040161075490612acb565b61083381611ea4565b61119f6103f86118e4565b6111bb5760405162461bcd60e51b815260040161075490612acb565b60345460ff16156111de5760405162461bcd60e51b815260040161075490612b57565b6034805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610b386118e4565b60345461010090046001600160a01b031690565b60345460009061010090046001600160a01b03166112446118e4565b6001600160a01b031614905090565b61125b611228565b6112775760405162461bcd60e51b815260040161075490612c16565b6001600160a01b03811661129d5760405162461bcd60e51b815260040161075490612ddf565b603d80546001600160a01b0319166001600160a01b0383161790556040517f5f2c1fe803fd576d8af05ea156011cc9cc8c025bda24c1e85772fc05a0b3f1e3906107ae908390612707565b603d546001600160a01b031681565b6000838389898989876040516020016113169796959493929190612619565b604051602081830303815290604052805190602001209050979650505050505050565b603e54600160a01b900460ff1681565b603e546001600160a01b031681565b611360611228565b61137c5760405162461bcd60e51b815260040161075490612c16565b6001600160a01b0389166113a25760405162461bcd60e51b8152600401610754906129a6565b6001600160a01b03808a166000908152603960205260409020541680156113db5760405162461bcd60e51b815260040161075490612b13565b600060388a8a6040516020016113f39392919061268e565b60408051601f1981840301815290829052603e54634423ac3360e11b83529092506001600160a01b03169063884758669061143e908b908b9086908c908c908c908c90600401612854565b602060405180830381600087803b15801561145857600080fd5b505af115801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190612189565b6001600160a01b03808d16600081815260396020908152604080832080549587166001600160a01b03199687168117909155808452603a909252918290208054909416831790935551929450917f622ea91961d2c1c42b6f59a73d152d990066165d59f27d922ce6d1f59650638c9061150a9085906128b2565b60405180910390a35050505050505050505050565b600054610100900460ff1680611538575060005460ff16155b6115545760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff1615801561157f576000805460ff1961ff0019909116610100171660011790555b60348054610100600160a81b0319166101006001600160a01b0385811682029290921792839055604051920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156108d0576000805461ff00191690555050565b603c6020526000908152604090205460ff1681565b603a602052600090815260409020546001600160a01b031681565b60408051600481526024810182526020810180516001600160e01b03166302d05d3f60e01b1790529051600091829182916001600160a01b038716916116609190612672565b600060405180830381855afa9150503d806000811461169b576040519150601f19603f3d011682016040523d82523d6000602084013e6116a0565b606091505b509150915081156116c857808060200190518101906116bf9190612189565b92505050610bf1565b6040516331a9108f60e11b81526001600160a01b03861690636352211e906116f4908790600401612836565b60206040518083038186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190612189565b95945050505050565b6000908152603f6020526040902054151590565b6036546001600160a01b031690565b600054610100900460ff1680611789575060005460ff16155b6117a55760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff161580156117d0576000805460ff1961ff0019909116610100171660011790555b6117d982610be4565b6117e6576117e682611ea4565b80156108d0576000805461ff00191690555050565b60375490565b6039602052600090815260409020546001600160a01b031681565b611824611228565b6118405760405162461bcd60e51b815260040161075490612c16565b61083381611ee6565b611851611228565b61186d5760405162461bcd60e51b815260040161075490612c16565b6001600160a01b0381166118935760405162461bcd60e51b815260040161075490612c8d565b603680546001600160a01b0319166001600160a01b0383811691909117918290556040517f4a41a4d11aaf0c0c9e4311ac1d68b2b0134556da594779a2a35b0ddf7cd1eafb926107ae921690612707565b3390565b60006118fa608084016060850161216d565b90506040830135600061193f611913602087018761216d565b611923604088016020890161216d565b848660808a013560a08b013561059760e08d0160c08e016125a9565b60a08601356000908152603f602052604090205490915081146119745760405162461bcd60e51b8152600401610754906129ec565b6000818152603c602052604090205460ff16156119a35760405162461bcd60e51b815260040161075490612cc4565b6000818152603c60209081526040808320805460ff191660011790556001600160a01b0386168352603b90915290205460ff168015611a4357604051632142170760e11b81526001600160a01b038516906342842e0e90611a0c9030908990889060040161271b565b600060405180830381600087803b158015611a2657600080fd5b505af1158015611a3a573d6000803e3d6000fd5b50505050611aba565b6001600160a01b03808516600090815260396020526040908190205490516340c10f1960e01b815291169081906340c10f1990611a86908990889060040161273f565b600060405180830381600087803b158015611aa057600080fd5b505af1158015611ab4573d6000803e3d6000fd5b50505050505b611ac7602087018761216d565b6001600160a01b0390811690851660a08801357f8738727192721a6f1909e42e987fa3faf27386067521caf12f11c5dc4013c2ac611b0b60408b0160208c0161216d565b60408b013560808c0135611b2560e08e0160c08f016125a9565b8c604051611b379594939291906127f5565b60405180910390a4505050505050565b60006001600160a01b038216611b6f5760405162461bcd60e51b815260040161075490612c4b565b506001600160a01b03166000908152602091909152604090205460ff1690565b611b9a603382611f73565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b603e54600160a01b900460ff1615611bfb5760405162461bcd60e51b815260040161075490612a23565b60345460ff1615611c1e5760405162461bcd60e51b815260040161075490612b57565b603580546001908101918290556001600160a01b0387166000818152603b6020526040808220805460ff1916909417909355915163c87b56dd60e01b815288928392909163c87b56dd90611c76908890600401612836565b60006040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cca9190810190612510565b6001600160a01b03808b166000908152603a60205260409020549192508a911615611d6257506001600160a01b03808a166000818152603a602052604090819020549051630852cd8d60e31b81529216916342966c6890611d2f908990600401612836565b600060405180830381600087803b158015611d4957600080fd5b505af1158015611d5d573d6000803e3d6000fd5b505050505b886001600160a01b0316611d746118e4565b6001600160a01b0316826001600160a01b03167f8586062302f52eda0114687cd36998f16298ea820e0a6f8878bbbfefebc09e9f8b8b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611de357600080fd5b505afa158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b9190612591565b8c89604051611e2e959493929190612784565b60405180910390a4505050506035548114610a365760405162461bcd60e51b8152600401610754906128c5565b6000611e9d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fbb565b9392505050565b611eaf603382611fe7565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6001600160a01b038116611f0c5760405162461bcd60e51b815260040161075490612e4d565b6034546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b611f7d8282611b47565b611f995760405162461bcd60e51b815260040161075490612a4e565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b60008184841115611fdf5760405162461bcd60e51b815260040161075491906128b2565b505050900390565b611ff18282611b47565b1561200e5760405162461bcd60e51b815260040161075490612938565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261206957600085556120af565b82601f1061208257805160ff19168380011785556120af565b828001600101855582156120af579182015b828111156120af578251825591602001919060010190612094565b506120bb9291506120bf565b5090565b5b808211156120bb57600081556001016120c0565b60006120e76120e284612ef4565b612ed0565b90508281528383830111156120fb57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112612123578182fd5b50813567ffffffffffffffff81111561213a578182fd5b60208301915083602082850101111561215257600080fd5b9250929050565b803563ffffffff81168114610ab757600080fd5b60006020828403121561217e578081fd5b8135611e9d81612f46565b60006020828403121561219a578081fd5b8151611e9d81612f46565b600080600080600080600060e0888a0312156121bf578283fd5b87356121ca81612f46565b965060208801356121da81612f46565b955060408801356121ea81612f46565b9450606088013593506080880135925060a0880135915061220d60c08901612159565b905092959891949750929550565b600080600080600060a08688031215612232578081fd5b853561223d81612f46565b9450602086013561224d81612f46565b9350604086013561225d81612f46565b9250606086013561226d81612f46565b9150608086013567ffffffffffffffff811115612288578182fd5b8601601f81018813612298578182fd5b6122a7888235602084016120d4565b9150509295509295909350565b6000806000606084860312156122c8578283fd5b83356122d381612f46565b925060208401356122e381612f46565b929592945050506040919091013590565b600080600080600080600060e0888a03121561230e578081fd5b873561231981612f46565b9650602088013561232981612f46565b955060408801359450606088013561234081612f46565b93506080880135925060a0880135915061220d60c08901612159565b60008060008060808587031215612371578182fd5b843561237c81612f46565b9350602085013561238c81612f46565b925060408501359150606085013567ffffffffffffffff8111156123ae578182fd5b8501601f810187136123be578182fd5b6123cd878235602084016120d4565b91505092959194509250565b600080600080600080600080600060a08a8c0312156123f6578283fd5b893561240181612f46565b985060208a013567ffffffffffffffff8082111561241d578485fd5b6124298d838e01612112565b909a50985060408c0135915080821115612441578485fd5b61244d8d838e01612112565b909850965060608c0135915080821115612465578485fd5b6124718d838e01612112565b909650945060808c0135915080821115612489578384fd5b506124968c828d01612112565b915080935050809150509295985092959850929598565b600080604083850312156124bf578182fd5b82356124ca81612f46565b946020939093013593505050565b6000602082840312156124e9578081fd5b81358015158114611e9d578182fd5b600060208284031215612509578081fd5b5035919050565b600060208284031215612521578081fd5b815167ffffffffffffffff811115612537578182fd5b8201601f81018413612547578182fd5b80516125556120e282612ef4565b818152856020838501011115612569578384fd5b611744826020830160208601612f16565b600060e0828403121561258b578081fd5b50919050565b6000602082840312156125a2578081fd5b5051919050565b6000602082840312156125ba578081fd5b611e9d82612159565b600081518084526125db816020860160208601612f16565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b9687526020870195909552606093841b6bffffffffffffffffffffffff19908116604088015292841b83166054870152606886019190915290911b16608883015260e01b6001600160e01b031916609c82015260a00190565b60008251612684818460208701612f16565b9190910192915050565b60008085546001808216600081146126ad57600181146126c4576126f3565b60ff198316865260028304607f16860193506126f3565b600283048986526020808720875b838110156126eb5781548a8201529085019082016126d2565b505050860193505b505050838582379092019182525092915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526020840192909252604083015263ffffffff16606082015260800190565b6001600160a01b038616815260a0602082018190526000906127a8908301876125c3565b85604084015284606084015282810360808401526127c681856125c3565b98975050505050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b0395861681526020810194909452604084019290925263ffffffff166060830152909116608082015260a00190565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b60006080825261286860808301898b6125ef565b828103602084015261287a81896125c3565b9050828103604084015261288f8187896125ef565b905082810360608401526128a48185876125ef565b9a9950505050505050505050565b600060208252611e9d60208301846125c3565b60208082526025908201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6040820152641b1bddd95960da1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601f908201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604082015260600190565b60208082526019908201527f4e46544272696467653a20696e76616c69642073656e64657200000000000000604082015260600190565b60208082526026908201527f4e46544272696467653a204e756c6c206f726967696e616c20746f6b656e206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f4e46544272696467653a2057726f6e6720747844617461486173680000000000604082015260600190565b6020808252601190820152704272696467653a20557067726164696e6760781b604082015260600190565b6020808252818101527f526f6c65733a206163636f756e7420646f65736e2774206861766520726f6c65604082015260600190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60208082526028908201527f506175736572526f6c653a2063616c6c657220646f65736e277420686176652060408201526774686520726f6c6560c01b606082015260800190565b60208082526024908201527f4e46544272696467653a205369646520746f6b656e20616c72656164792065786040820152636973747360e01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601490820152734e46544272696467653a204e756c6c2046726f6d60601b604082015260600190565b60208082526016908201527509c8ca884e4d2c8ceca74409cead8d840a8f090c2e6d60531b604082015260600190565b60208082526019908201527f4e46544272696467653a204e6f742046656465726174696f6e00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4e46544272696467653a2046656465726174696f6e20697320656d7074790000604082015260600190565b6020808252601a908201527f4e46544272696467653a20416c726561647920636c61696d6564000000000000604082015260600190565b60208082526018908201527f4e46544272696467653a20556e6b6e6f776e20746f6b656e0000000000000000604082015260600190565b6020808252601b908201527f4e46544272696467653a20416c72656164792061636365707465640000000000604082015260600190565b6020808252602a908201527f4e46544272696467653a2076616c756520697320736d616c6c6572207468616e6040820152692066697865642066656560b01b606082015260800190565b6020808252601290820152714e46544272696467653a204e756c6c20546f60701b604082015260600190565b6020808252601f908201527f4e46544272696467653a20416c6c6f77546f6b656e7320697320656d70747900604082015260600190565b60208082526019908201527f4e46544272696467653a204e756c6c20426c6f636b4861736800000000000000604082015260600190565b60208082526022908201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f4e46544272696467653a20656d7074792053696465546f6b656e466163746f726040820152607960f81b606082015260800190565b60405181810167ffffffffffffffff81118282101715612eec57fe5b604052919050565b600067ffffffffffffffff821115612f0857fe5b50601f01601f191660200190565b60005b83811015612f31578181015183820152602001612f19565b83811115612f40576000848401525b50505050565b6001600160a01b038116811461083357600080fdfea2646970667358221220c2db86366b65f97c4730018c60c95ed2c68e7f2ccd8332c152047ef6d532db2764736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c806382dc1ec411610139578063c4d66de8116100b6578063ea2170911161007a578063ea21709114610686578063eb16136f1461069b578063ed99f4c6146106bb578063f1409028146106d0578063f2fde38b146106f0578063fa0caa161461071057610251565b8063c4d66de8146105e6578063cc3c0f0614610606578063ce5f8bf214610626578063d220d30a14610646578063da6770371461066657610251565b8063a53d6e6e116100fd578063a53d6e6e14610567578063a9e4eff21461057c578063b79472621461059c578063b86f60d2146105b1578063c33c8c61146105c657610251565b806382dc1ec4146104db5780638456cb59146104fb5780638da5cb5b146105105780638f32d59b14610532578063916dc59d1461054757610251565b806342cdb2c6116101d2578063664761091161019657806366476109146104495780636a863191146104695780636ef8d66d14610489578063715018a61461049e5780637813bea2146104b35780638129fc1c146104c657610251565b806342cdb2c6146103bd57806346fbf68e146103dd57806354fd4d50146103fd57806359a8a8671461041f5780635c975abb1461043457610251565b80632f3cca4e116102195780632f3cca4e146103285780632fb3b3611461034857806337de81061461036857806337e76109146103885780633f4ba83a146103a857610251565b806307c8f7b0146102565780630b2292a614610278578063150b7a02146102ae5780631b68e6e6146102db5780631c7e6efb146102fb575b600080fd5b34801561026257600080fd5b506102766102713660046124d8565b610730565b005b34801561028457600080fd5b506102986102933660046124f8565b6107b9565b6040516102a59190612836565b60405180910390f35b3480156102ba57600080fd5b506102ce6102c936600461235c565b6107cb565b6040516102a5919061283f565b3480156102e757600080fd5b506102766102f636600461257a565b6107db565b34801561030757600080fd5b5061031b61031636600461216d565b610836565b6040516102a5919061282b565b34801561033457600080fd5b5061027661034336600461216d565b61084b565b34801561035457600080fd5b5061027661036336600461221b565b6108d4565b34801561037457600080fd5b506102766103833660046124f8565b610a3e565b34801561039457600080fd5b5061031b6103a33660046124f8565b610a97565b3480156103b457600080fd5b50610276610abc565b3480156103c957600080fd5b506102766103d836600461216d565b610b4f565b3480156103e957600080fd5b5061031b6103f836600461216d565b610be4565b34801561040957600080fd5b50610412610bf7565b6040516102a591906128b2565b34801561042b57600080fd5b50610412610c13565b34801561044057600080fd5b5061031b610ca1565b34801561045557600080fd5b5061027661046436600461257a565b610caa565b34801561047557600080fd5b506102766104843660046121a5565b610cbb565b34801561049557600080fd5b50610276610f0a565b3480156104aa57600080fd5b50610276610f1c565b6102766104c13660046122b4565b610f90565b3480156104d257600080fd5b506102766110eb565b3480156104e757600080fd5b506102766104f636600461216d565b611164565b34801561050757600080fd5b50610276611194565b34801561051c57600080fd5b50610525611214565b6040516102a59190612707565b34801561053e57600080fd5b5061031b611228565b34801561055357600080fd5b5061027661056236600461216d565b611253565b34801561057357600080fd5b506105256112e8565b34801561058857600080fd5b506102986105973660046122f4565b6112f7565b3480156105a857600080fd5b5061031b611339565b3480156105bd57600080fd5b50610525611349565b3480156105d257600080fd5b506102766105e13660046123d9565b611358565b3480156105f257600080fd5b5061027661060136600461216d565b61151f565b34801561061257600080fd5b5061031b6106213660046124f8565b6115ea565b34801561063257600080fd5b5061052561064136600461216d565b6115ff565b34801561065257600080fd5b506105256106613660046124ad565b61161a565b34801561067257600080fd5b5061031b6106813660046124f8565b61174d565b34801561069257600080fd5b50610525611761565b3480156106a757600080fd5b506102766106b636600461216d565b611770565b3480156106c757600080fd5b506102986117fb565b3480156106dc57600080fd5b506105256106eb36600461216d565b611801565b3480156106fc57600080fd5b5061027661070b36600461216d565b61181c565b34801561071c57600080fd5b5061027661072b36600461216d565b611849565b610738611228565b61075d5760405162461bcd60e51b815260040161075490612c16565b60405180910390fd5b603e805460ff60a01b1916600160a01b831515810291909117918290556040517f983e436223c000a441c2443b394ca5fb4669a513fe86dc1dd44494047b514ad9926107ae9260ff9104169061282b565b60405180910390a150565b603f6020526000908152604090205481565b630a85bd0160e11b949350505050565b6107eb604082016020830161216d565b6001600160a01b03166107fc6118e4565b6001600160a01b0316146108225760405162461bcd60e51b81526004016107549061296f565b6108338161082e6118e4565b6118e8565b50565b603b6020526000908152604090205460ff1681565b600054610100900460ff1680610864575060005460ff16155b6108805760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff161580156108ab576000805460ff1961ff0019909116610100171660011790555b6108b482611770565b6034805460ff1916905580156108d0576000805461ff00191690555b5050565b600054610100900460ff16806108ed575060005460ff16155b6109095760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff16158015610934576000805460ff1961ff0019909116610100171660011790555b61093d8661151f565b6109468661084b565b8151610959906038906020850190612033565b50603d80546001600160a01b038087166001600160a01b031992831617909255603e805486841690831617905560368054928816929091169190911790556040516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d906109f29030907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9082906004016127d2565b600060405180830381600087803b158015610a0c57600080fd5b505af1158015610a20573d6000803e3d6000fd5b505050508015610a36576000805461ff00191690555b505050505050565b610a46611228565b610a625760405162461bcd60e51b815260040161075490612c16565b60378190556040517f5eebc59df2662862db7d6ef529ff1a264721bd7c26550f39c89a685382668f4e906107ae908390612836565b6000818152603f60209081526040808320548352603c90915290205460ff165b919050565b610ac76103f86118e4565b610ae35760405162461bcd60e51b815260040161075490612acb565b60345460ff16610b055760405162461bcd60e51b81526004016107549061290a565b6034805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610b386118e4565b604051610b459190612707565b60405180910390a1565b610b57611228565b610b735760405162461bcd60e51b815260040161075490612c16565b6001600160a01b038116610b995760405162461bcd60e51b815260040161075490612e8f565b603e80546001600160a01b0319166001600160a01b0383161790556040517f619936bc6e3618d0b8dc69bcc70134fe9d88f9967f3a8b8304e3183692521625906107ae908390612707565b6000610bf1603383611b47565b92915050565b604080518082019091526002815261763160f01b602082015290565b6038805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c995780601f10610c6e57610100808354040283529160200191610c99565b820191906000526020600020905b815481529060010190602001808311610c7c57829003601f168201915b505050505081565b60345460ff1690565b6108338161082e602082018261216d565b60345460ff1615610cde5760405162461bcd60e51b815260040161075490612b57565b60358054600101908190556036546001600160a01b0316610cfd6118e4565b6001600160a01b031614610d235760405162461bcd60e51b815260040161075490612bdf565b6001600160a01b0388166000908152603b602052604090205460ff1680610d6357506001600160a01b038881166000908152603960205260409020541615155b610d7f5760405162461bcd60e51b815260040161075490612cfb565b6001600160a01b038616610da55760405162461bcd60e51b815260040161075490612db3565b6001600160a01b038716610dcb5760405162461bcd60e51b815260040161075490612b81565b83610de85760405162461bcd60e51b815260040161075490612e16565b82610e055760405162461bcd60e51b815260040161075490612baf565b6000838152603f602052604090205415610e315760405162461bcd60e51b815260040161075490612d32565b6000610e428789888c8989896112f7565b6000818152603c602052604090205490915060ff1615610e745760405162461bcd60e51b815260040161075490612cc4565b80603f600086815260200190815260200160002081905550866001600160a01b0316896001600160a01b0316857f68c55835fbe7c27942e2ff7632542cf70ee33ba41b292bff9cb6183e3db7e63b8b8a8a89604051610ed69493929190612758565b60405180910390a4506035548114610f005760405162461bcd60e51b8152600401610754906128c5565b5050505050505050565b610f1a610f156118e4565b611b8f565b565b610f24611228565b610f405760405162461bcd60e51b815260040161075490612c16565b60345460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360348054610100600160a81b0319169055565b6000610f9c848361161a565b90506000610fa86118e4565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd90610fdb9084903090889060040161271b565b600060405180830381600087803b158015610ff557600080fd5b505af1158015611009573d6000803e3d6000fd5b505050506110298585846040518060200160405280600081525087611bd1565b603754156110e4576037543410156110535760405162461bcd60e51b815260040161075490612d69565b6036546037546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561108f573d6000803e3d6000fd5b506037543411156110e457806001600160a01b03166108fc6110bc60375434611e5b90919063ffffffff16565b6040518115909202916000818181858888f19350505050158015610a36573d6000803e3d6000fd5b5050505050565b600054610100900460ff1680611104575060005460ff16155b6111205760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff1615801561114b576000805460ff1961ff0019909116610100171660011790555b60016035558015610833576000805461ff001916905550565b61116f6103f86118e4565b61118b5760405162461bcd60e51b815260040161075490612acb565b61083381611ea4565b61119f6103f86118e4565b6111bb5760405162461bcd60e51b815260040161075490612acb565b60345460ff16156111de5760405162461bcd60e51b815260040161075490612b57565b6034805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610b386118e4565b60345461010090046001600160a01b031690565b60345460009061010090046001600160a01b03166112446118e4565b6001600160a01b031614905090565b61125b611228565b6112775760405162461bcd60e51b815260040161075490612c16565b6001600160a01b03811661129d5760405162461bcd60e51b815260040161075490612ddf565b603d80546001600160a01b0319166001600160a01b0383161790556040517f5f2c1fe803fd576d8af05ea156011cc9cc8c025bda24c1e85772fc05a0b3f1e3906107ae908390612707565b603d546001600160a01b031681565b6000838389898989876040516020016113169796959493929190612619565b604051602081830303815290604052805190602001209050979650505050505050565b603e54600160a01b900460ff1681565b603e546001600160a01b031681565b611360611228565b61137c5760405162461bcd60e51b815260040161075490612c16565b6001600160a01b0389166113a25760405162461bcd60e51b8152600401610754906129a6565b6001600160a01b03808a166000908152603960205260409020541680156113db5760405162461bcd60e51b815260040161075490612b13565b600060388a8a6040516020016113f39392919061268e565b60408051601f1981840301815290829052603e54634423ac3360e11b83529092506001600160a01b03169063884758669061143e908b908b9086908c908c908c908c90600401612854565b602060405180830381600087803b15801561145857600080fd5b505af115801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190612189565b6001600160a01b03808d16600081815260396020908152604080832080549587166001600160a01b03199687168117909155808452603a909252918290208054909416831790935551929450917f622ea91961d2c1c42b6f59a73d152d990066165d59f27d922ce6d1f59650638c9061150a9085906128b2565b60405180910390a35050505050505050505050565b600054610100900460ff1680611538575060005460ff16155b6115545760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff1615801561157f576000805460ff1961ff0019909116610100171660011790555b60348054610100600160a81b0319166101006001600160a01b0385811682029290921792839055604051920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156108d0576000805461ff00191690555050565b603c6020526000908152604090205460ff1681565b603a602052600090815260409020546001600160a01b031681565b60408051600481526024810182526020810180516001600160e01b03166302d05d3f60e01b1790529051600091829182916001600160a01b038716916116609190612672565b600060405180830381855afa9150503d806000811461169b576040519150601f19603f3d011682016040523d82523d6000602084013e6116a0565b606091505b509150915081156116c857808060200190518101906116bf9190612189565b92505050610bf1565b6040516331a9108f60e11b81526001600160a01b03861690636352211e906116f4908790600401612836565b60206040518083038186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190612189565b95945050505050565b6000908152603f6020526040902054151590565b6036546001600160a01b031690565b600054610100900460ff1680611789575060005460ff16155b6117a55760405162461bcd60e51b815260040161075490612a83565b600054610100900460ff161580156117d0576000805460ff1961ff0019909116610100171660011790555b6117d982610be4565b6117e6576117e682611ea4565b80156108d0576000805461ff00191690555050565b60375490565b6039602052600090815260409020546001600160a01b031681565b611824611228565b6118405760405162461bcd60e51b815260040161075490612c16565b61083381611ee6565b611851611228565b61186d5760405162461bcd60e51b815260040161075490612c16565b6001600160a01b0381166118935760405162461bcd60e51b815260040161075490612c8d565b603680546001600160a01b0319166001600160a01b0383811691909117918290556040517f4a41a4d11aaf0c0c9e4311ac1d68b2b0134556da594779a2a35b0ddf7cd1eafb926107ae921690612707565b3390565b60006118fa608084016060850161216d565b90506040830135600061193f611913602087018761216d565b611923604088016020890161216d565b848660808a013560a08b013561059760e08d0160c08e016125a9565b60a08601356000908152603f602052604090205490915081146119745760405162461bcd60e51b8152600401610754906129ec565b6000818152603c602052604090205460ff16156119a35760405162461bcd60e51b815260040161075490612cc4565b6000818152603c60209081526040808320805460ff191660011790556001600160a01b0386168352603b90915290205460ff168015611a4357604051632142170760e11b81526001600160a01b038516906342842e0e90611a0c9030908990889060040161271b565b600060405180830381600087803b158015611a2657600080fd5b505af1158015611a3a573d6000803e3d6000fd5b50505050611aba565b6001600160a01b03808516600090815260396020526040908190205490516340c10f1960e01b815291169081906340c10f1990611a86908990889060040161273f565b600060405180830381600087803b158015611aa057600080fd5b505af1158015611ab4573d6000803e3d6000fd5b50505050505b611ac7602087018761216d565b6001600160a01b0390811690851660a08801357f8738727192721a6f1909e42e987fa3faf27386067521caf12f11c5dc4013c2ac611b0b60408b0160208c0161216d565b60408b013560808c0135611b2560e08e0160c08f016125a9565b8c604051611b379594939291906127f5565b60405180910390a4505050505050565b60006001600160a01b038216611b6f5760405162461bcd60e51b815260040161075490612c4b565b506001600160a01b03166000908152602091909152604090205460ff1690565b611b9a603382611f73565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b603e54600160a01b900460ff1615611bfb5760405162461bcd60e51b815260040161075490612a23565b60345460ff1615611c1e5760405162461bcd60e51b815260040161075490612b57565b603580546001908101918290556001600160a01b0387166000818152603b6020526040808220805460ff1916909417909355915163c87b56dd60e01b815288928392909163c87b56dd90611c76908890600401612836565b60006040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cca9190810190612510565b6001600160a01b03808b166000908152603a60205260409020549192508a911615611d6257506001600160a01b03808a166000818152603a602052604090819020549051630852cd8d60e31b81529216916342966c6890611d2f908990600401612836565b600060405180830381600087803b158015611d4957600080fd5b505af1158015611d5d573d6000803e3d6000fd5b505050505b886001600160a01b0316611d746118e4565b6001600160a01b0316826001600160a01b03167f8586062302f52eda0114687cd36998f16298ea820e0a6f8878bbbfefebc09e9f8b8b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611de357600080fd5b505afa158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b9190612591565b8c89604051611e2e959493929190612784565b60405180910390a4505050506035548114610a365760405162461bcd60e51b8152600401610754906128c5565b6000611e9d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fbb565b9392505050565b611eaf603382611fe7565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6001600160a01b038116611f0c5760405162461bcd60e51b815260040161075490612e4d565b6034546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b611f7d8282611b47565b611f995760405162461bcd60e51b815260040161075490612a4e565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b60008184841115611fdf5760405162461bcd60e51b815260040161075491906128b2565b505050900390565b611ff18282611b47565b1561200e5760405162461bcd60e51b815260040161075490612938565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261206957600085556120af565b82601f1061208257805160ff19168380011785556120af565b828001600101855582156120af579182015b828111156120af578251825591602001919060010190612094565b506120bb9291506120bf565b5090565b5b808211156120bb57600081556001016120c0565b60006120e76120e284612ef4565b612ed0565b90508281528383830111156120fb57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112612123578182fd5b50813567ffffffffffffffff81111561213a578182fd5b60208301915083602082850101111561215257600080fd5b9250929050565b803563ffffffff81168114610ab757600080fd5b60006020828403121561217e578081fd5b8135611e9d81612f46565b60006020828403121561219a578081fd5b8151611e9d81612f46565b600080600080600080600060e0888a0312156121bf578283fd5b87356121ca81612f46565b965060208801356121da81612f46565b955060408801356121ea81612f46565b9450606088013593506080880135925060a0880135915061220d60c08901612159565b905092959891949750929550565b600080600080600060a08688031215612232578081fd5b853561223d81612f46565b9450602086013561224d81612f46565b9350604086013561225d81612f46565b9250606086013561226d81612f46565b9150608086013567ffffffffffffffff811115612288578182fd5b8601601f81018813612298578182fd5b6122a7888235602084016120d4565b9150509295509295909350565b6000806000606084860312156122c8578283fd5b83356122d381612f46565b925060208401356122e381612f46565b929592945050506040919091013590565b600080600080600080600060e0888a03121561230e578081fd5b873561231981612f46565b9650602088013561232981612f46565b955060408801359450606088013561234081612f46565b93506080880135925060a0880135915061220d60c08901612159565b60008060008060808587031215612371578182fd5b843561237c81612f46565b9350602085013561238c81612f46565b925060408501359150606085013567ffffffffffffffff8111156123ae578182fd5b8501601f810187136123be578182fd5b6123cd878235602084016120d4565b91505092959194509250565b600080600080600080600080600060a08a8c0312156123f6578283fd5b893561240181612f46565b985060208a013567ffffffffffffffff8082111561241d578485fd5b6124298d838e01612112565b909a50985060408c0135915080821115612441578485fd5b61244d8d838e01612112565b909850965060608c0135915080821115612465578485fd5b6124718d838e01612112565b909650945060808c0135915080821115612489578384fd5b506124968c828d01612112565b915080935050809150509295985092959850929598565b600080604083850312156124bf578182fd5b82356124ca81612f46565b946020939093013593505050565b6000602082840312156124e9578081fd5b81358015158114611e9d578182fd5b600060208284031215612509578081fd5b5035919050565b600060208284031215612521578081fd5b815167ffffffffffffffff811115612537578182fd5b8201601f81018413612547578182fd5b80516125556120e282612ef4565b818152856020838501011115612569578384fd5b611744826020830160208601612f16565b600060e0828403121561258b578081fd5b50919050565b6000602082840312156125a2578081fd5b5051919050565b6000602082840312156125ba578081fd5b611e9d82612159565b600081518084526125db816020860160208601612f16565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b9687526020870195909552606093841b6bffffffffffffffffffffffff19908116604088015292841b83166054870152606886019190915290911b16608883015260e01b6001600160e01b031916609c82015260a00190565b60008251612684818460208701612f16565b9190910192915050565b60008085546001808216600081146126ad57600181146126c4576126f3565b60ff198316865260028304607f16860193506126f3565b600283048986526020808720875b838110156126eb5781548a8201529085019082016126d2565b505050860193505b505050838582379092019182525092915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526020840192909252604083015263ffffffff16606082015260800190565b6001600160a01b038616815260a0602082018190526000906127a8908301876125c3565b85604084015284606084015282810360808401526127c681856125c3565b98975050505050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b0395861681526020810194909452604084019290925263ffffffff166060830152909116608082015260a00190565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b60006080825261286860808301898b6125ef565b828103602084015261287a81896125c3565b9050828103604084015261288f8187896125ef565b905082810360608401526128a48185876125ef565b9a9950505050505050505050565b600060208252611e9d60208301846125c3565b60208082526025908201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6040820152641b1bddd95960da1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601f908201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604082015260600190565b60208082526019908201527f4e46544272696467653a20696e76616c69642073656e64657200000000000000604082015260600190565b60208082526026908201527f4e46544272696467653a204e756c6c206f726967696e616c20746f6b656e206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f4e46544272696467653a2057726f6e6720747844617461486173680000000000604082015260600190565b6020808252601190820152704272696467653a20557067726164696e6760781b604082015260600190565b6020808252818101527f526f6c65733a206163636f756e7420646f65736e2774206861766520726f6c65604082015260600190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60208082526028908201527f506175736572526f6c653a2063616c6c657220646f65736e277420686176652060408201526774686520726f6c6560c01b606082015260800190565b60208082526024908201527f4e46544272696467653a205369646520746f6b656e20616c72656164792065786040820152636973747360e01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601490820152734e46544272696467653a204e756c6c2046726f6d60601b604082015260600190565b60208082526016908201527509c8ca884e4d2c8ceca74409cead8d840a8f090c2e6d60531b604082015260600190565b60208082526019908201527f4e46544272696467653a204e6f742046656465726174696f6e00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4e46544272696467653a2046656465726174696f6e20697320656d7074790000604082015260600190565b6020808252601a908201527f4e46544272696467653a20416c726561647920636c61696d6564000000000000604082015260600190565b60208082526018908201527f4e46544272696467653a20556e6b6e6f776e20746f6b656e0000000000000000604082015260600190565b6020808252601b908201527f4e46544272696467653a20416c72656164792061636365707465640000000000604082015260600190565b6020808252602a908201527f4e46544272696467653a2076616c756520697320736d616c6c6572207468616e6040820152692066697865642066656560b01b606082015260800190565b6020808252601290820152714e46544272696467653a204e756c6c20546f60701b604082015260600190565b6020808252601f908201527f4e46544272696467653a20416c6c6f77546f6b656e7320697320656d70747900604082015260600190565b60208082526019908201527f4e46544272696467653a204e756c6c20426c6f636b4861736800000000000000604082015260600190565b60208082526022908201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f4e46544272696467653a20656d7074792053696465546f6b656e466163746f726040820152607960f81b606082015260800190565b60405181810167ffffffffffffffff81118282101715612eec57fe5b604052919050565b600067ffffffffffffffff821115612f0857fe5b50601f01601f191660200190565b60005b83811015612f31578181015183820152602001612f19565b83811115612f40576000848401525b50505050565b6001600160a01b038116811461083357600080fdfea2646970667358221220c2db86366b65f97c4730018c60c95ed2c68e7f2ccd8332c152047ef6d532db2764736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__Pausable_init(address)": {
        "details": "Initializes the contract in unpaused state. Assigns the Pauser role to the deployer."
      },
      "initialize(address)": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Called by a pauser to pause, triggers stopped state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim((address,address,uint256,address,bytes32,bytes32,uint32))": {
        "notice": "Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "receiveTokensTo(address,address,uint256)": {
        "notice": "ERC-20 tokens approve and transferFrom pattern See https://eips.ethereum.org/EIPS/eip-20#transferfrom"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15789,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15792,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15832,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15856,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_pausers",
        "offset": 0,
        "slot": "51",
        "type": "t_struct(Role)10133_storage"
      },
      {
        "astId": 15978,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 16076,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_owner",
        "offset": 1,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 16790,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_guardCounter",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 8062,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "federation",
        "offset": 0,
        "slot": "54",
        "type": "t_address_payable"
      },
      {
        "astId": 8064,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "fixedFee",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 8066,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "symbolPrefix",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 8070,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "sideTokenAddressByOriginalTokenAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8074,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "originalTokenAddressBySideTokenAddress",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8078,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "isAddressFromCrossedOriginalToken",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8082,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "claimed",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8084,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "allowTokens",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(IAllowTokens)7210"
      },
      {
        "astId": 8086,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "sideTokenFactory",
        "offset": 0,
        "slot": "62",
        "type": "t_contract(ISideNFTTokenFactory)7998"
      },
      {
        "astId": 8088,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "isUpgrading",
        "offset": 20,
        "slot": "62",
        "type": "t_bool"
      },
      {
        "astId": 8092,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "transactionDataHashes",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAllowTokens)7210": {
        "encoding": "inplace",
        "label": "contract IAllowTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISideNFTTokenFactory)7998": {
        "encoding": "inplace",
        "label": "contract ISideNFTTokenFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)10133_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 10132,
            "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}