{
  "address": "0x5aeD6D560C3e6dDf0aB318360421B04937F76973",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_logIndex",
          "type": "uint256"
        }
      ],
      "name": "AcceptedNFTCrossTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAllowTokens",
          "type": "address"
        }
      ],
      "name": "AllowTokensChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_logIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "ClaimedNFTToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_userData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "Cross",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFederation",
          "type": "address"
        }
      ],
      "name": "FederationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FixedFeeNFTChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newSideNFTTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "NewSideNFTToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newSideNFTTokenFactory",
          "type": "address"
        }
      ],
      "name": "SideTokenFactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isUpgrading",
          "type": "bool"
        }
      ],
      "name": "Upgrading",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__Pausable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__PauserRol_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_logIndex",
          "type": "uint32"
        }
      ],
      "name": "acceptTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowTokens",
      "outputs": [
        {
          "internalType": "contract IAllowTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAllowTokens",
          "type": "address"
        }
      ],
      "name": "changeAllowTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newFederation",
          "type": "address"
        }
      ],
      "name": "changeFederation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSideNFTTokenFactory",
          "type": "address"
        }
      ],
      "name": "changeSideTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct INFTBridge.NFTClaimData",
          "name": "_claimData",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct INFTBridge.NFTClaimData",
          "name": "_claimData",
          "type": "tuple"
        }
      ],
      "name": "claimFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_originalTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "createSideNFTToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFederation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFixedFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_logIndex",
          "type": "uint32"
        }
      ],
      "name": "getTransactionDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "hasBeenClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "hasCrossed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_federation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sideTokenFactory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbolPrefix",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAddressFromCrossedOriginalToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgrading",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "originalTokenAddressBySideTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "receiveTokensTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setFixedFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isUpgrading",
          "type": "bool"
        }
      ],
      "name": "setUpgrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sideTokenAddressByOriginalTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideTokenFactory",
      "outputs": [
        {
          "internalType": "contract ISideNFTTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbolPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transactionDataHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x211e676046df07bb8fcb6ddbfd47a3c9cdf345ef32c88e773047a89937296971",
  "receipt": {
    "to": null,
    "from": "0x5C531e99426aba2c912BA1De6ef9557596d86E11",
    "contractAddress": "0x5aeD6D560C3e6dDf0aB318360421B04937F76973",
    "transactionIndex": 0,
    "gasUsed": "2735924",
    "logsBloom": "0x
    "blockHash": "0x6945bed115e3b0c40a9cc856a11cd55556d463ad1b2f9348836616e575680d9d",
    "transactionHash": "0x211e676046df07bb8fcb6ddbfd47a3c9cdf345ef32c88e773047a89937296971",
    "logs": [],
    "blockNumber": 25,
    "cumulativeGasUsed": "2735924",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "01422ba079bc0637013104a677f85dbe",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_logIndex\",\"type\":\"uint256\"}],\"name\":\"AcceptedNFTCrossTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAllowTokens\",\"type\":\"address\"}],\"name\":\"AllowTokensChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_logIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"ClaimedNFTToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"Cross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFederation\",\"type\":\"address\"}],\"name\":\"FederationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FixedFeeNFTChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newSideNFTTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"NewSideNFTToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSideNFTTokenFactory\",\"type\":\"address\"}],\"name\":\"SideTokenFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isUpgrading\",\"type\":\"bool\"}],\"name\":\"Upgrading\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__Pausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__PauserRol_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_logIndex\",\"type\":\"uint32\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTokens\",\"outputs\":[{\"internalType\":\"contract IAllowTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAllowTokens\",\"type\":\"address\"}],\"name\":\"changeAllowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFederation\",\"type\":\"address\"}],\"name\":\"changeFederation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSideNFTTokenFactory\",\"type\":\"address\"}],\"name\":\"changeSideTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct INFTBridge.NFTClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct INFTBridge.NFTClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"}],\"name\":\"claimFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_originalTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"createSideNFTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFederation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_logIndex\",\"type\":\"uint32\"}],\"name\":\"getTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"hasBeenClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"hasCrossed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_federation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sideTokenFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbolPrefix\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddressFromCrossedOriginalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"originalTokenAddressBySideTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"receiveTokensTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFixedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isUpgrading\",\"type\":\"bool\"}],\"name\":\"setUpgrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sideTokenAddressByOriginalTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideTokenFactory\",\"outputs\":[{\"internalType\":\"contract ISideNFTTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactionDataHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__Pausable_init(address)\":{\"details\":\"Initializes the contract in unpaused state. Assigns the Pauser role to the deployer.\"},\"initialize(address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Called by a pauser to pause, triggers stopped state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim((address,address,uint256,address,bytes32,bytes32,uint32))\":{\"notice\":\"Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"receiveTokensTo(address,address,uint256)\":{\"notice\":\"ERC-20 tokens approve and transferFrom pattern See https://eips.ethereum.org/EIPS/eip-20#transferfrom\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nftbridge/NFTBridge.sol\":\"NFTBridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IAllowTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\ninterface IAllowTokens {\\n\\n    struct Limits {\\n        uint256 min;\\n        uint256 max;\\n        uint256 daily;\\n        uint256 mediumAmount;\\n        uint256 largeAmount;\\n    }\\n\\n    struct TokenInfo {\\n        bool allowed;\\n        uint256 typeId;\\n        uint256 spentToday;\\n        uint256 lastDay;\\n    }\\n\\n    struct TypeInfo {\\n        string description;\\n        Limits limits;\\n    }\\n\\n    struct TokensAndType {\\n        address token;\\n        uint256 typeId;\\n    }\\n\\n    function version() external pure returns (string memory);\\n\\n    function getInfoAndLimits(address token) external view returns (TokenInfo memory info, Limits memory limit);\\n\\n    function calcMaxWithdraw(address token) external view returns (uint256 maxWithdraw);\\n\\n    function getTypesLimits() external view returns(Limits[] memory limits);\\n\\n    function getTypeDescriptionsLength() external view returns(uint256);\\n\\n    function getTypeDescriptions() external view returns(string[] memory descriptions);\\n\\n    function setToken(address token, uint256 typeId) external;\\n\\n    function getConfirmations() external view returns (uint256 smallAmount, uint256 mediumAmount, uint256 largeAmount);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function updateTokenTransfer(address token, uint256 amount) external;\\n}\",\"keccak256\":\"0x5a2aaa285c400917cd72fafe61ce409f200c3fc13d984843bccfb97563489a61\",\"license\":\"MIT\"},\"contracts/interface/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\ninterface IWrapped {\\n    function balanceOf(address) external returns(uint);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad)\\n        external\\n        returns (bool);\\n}\",\"keccak256\":\"0x2d8a99b6a030e37f01dba86db80e3bd29d1d01e592e399c8635df3fb636ec0d1\",\"license\":\"MIT\"},\"contracts/lib/LibEIP712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n// https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\nlibrary LibEIP712 {\\n\\n    // Hash of the EIP712 Domain Separator Schema\\n    // keccak256(abi.encodePacked(\\n    //     \\\"EIP712Domain(\\\",\\n    //     \\\"string name,\\\",\\n    //     \\\"string version,\\\",\\n    //     \\\"uint256 chainId,\\\",\\n    //     \\\"address verifyingContract\\\",\\n    //     \\\")\\\"\\n    // ))\\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev Calculates a EIP712 domain separator.\\n    /// @param name The EIP712 domain name.\\n    /// @param version The EIP712 domain version.\\n    /// @param verifyingContract The EIP712 verifying contract.\\n    /// @return result EIP712 domain separator.\\n    function hashEIP712Domain(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n        //     keccak256(bytes(name)),\\n        //     keccak256(bytes(version)),\\n        //     chainId,\\n        //     uint256(verifyingContract)\\n        // ))\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // Calculate hashes of dynamic data\\n            let nameHash := keccak256(add(name, 32), mload(name))\\n            let versionHash := keccak256(add(version, 32), mload(version))\\n\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // Store params in memory\\n            mstore(memPtr, schemaHash)\\n            mstore(add(memPtr, 32), nameHash)\\n            mstore(add(memPtr, 64), versionHash)\\n            mstore(add(memPtr, 96), chainId)\\n            mstore(add(memPtr, 128), verifyingContract)\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 160)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\n    ///                         with getDomainHash().\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return result EIP712 hash applied to the given EIP712 Domain.\\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x6116e22c413fc65e87bf7db958d5c1f301b493494813f76dce512f8254c3b012\",\"license\":\"MIT\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nlibrary LibUtils {\\n\\n    function decimalsToGranularity(uint8 decimals) internal pure returns (uint256) {\\n        require(decimals <= 18, \\\"LibUtils: Decimals not <= 18\\\");\\n        return uint256(10)**(18-decimals);\\n    }\\n\\n    function getDecimals(address tokenToUse) internal view returns (uint8) {\\n        //support decimals as uint256 or uint8\\n        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        require(success, \\\"LibUtils: No decimals\\\");\\n        // uint<M>: enc(X) is the big-endian encoding of X,\\n        //padded on the higher-order (left) side with zero-bytes such that the length is 32 bytes.\\n        return uint8(abi.decode(data, (uint256)));\\n    }\\n\\n    function getGranularity(address tokenToUse) internal view returns (uint256) {\\n        //support granularity if ERC777\\n        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature(\\\"granularity()\\\"));\\n        require(success, \\\"LibUtils: No granularity\\\");\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            addr := mload(add(bys,20))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc888bccaec06ac8103257667388d83bac9f2fe24cfc445676003088a5a339897\",\"license\":\"MIT\"},\"contracts/nftbridge/INFTBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface INFTBridge {\\n  struct NFTClaimData {\\n    address payable to;\\n    address from;\\n    uint256 tokenId;\\n    address tokenAddress;\\n    bytes32 blockHash;\\n    bytes32 transactionHash;\\n    uint32 logIndex;\\n  }\\n\\n  function version() external pure returns (string memory);\\n\\n  function getFixedFee() external view returns (uint256);\\n\\n  function receiveTokensTo(\\n    address tokenAddress,\\n    address to,\\n    uint256 tokenId\\n  ) external payable;\\n\\n  /**\\n    * Accepts the transaction from the other chain that was voted and sent by the Federation contract\\n    */\\n  function acceptTransfer(\\n    address _originalTokenAddress,\\n    address payable _from,\\n    address payable _to,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    bytes32 _transactionHash,\\n    uint32 _logIndex\\n  ) external;\\n\\n  /**\\n    * Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data\\n    */\\n  function claim(NFTClaimData calldata _claimData) external;\\n\\n  function claimFallback(NFTClaimData calldata _claimData) external;\\n\\n  function getTransactionDataHash(\\n    address _to,\\n    address _from,\\n    uint256 _tokenId,\\n    address _tokenAddress,\\n    bytes32 _blockHash,\\n    bytes32 _transactionHash,\\n    uint32 _logIndex\\n  ) external returns (bytes32);\\n\\n  event Cross(\\n    address indexed _originalTokenAddress,\\n    address indexed _from,\\n    address indexed _to,\\n    address _tokenCreator,\\n    bytes _userData,\\n    uint256 _totalSupply,\\n    uint256 _tokenId,\\n    string _tokenURI\\n  );\\n  event NewSideNFTToken(\\n    address indexed _newSideNFTTokenAddress,\\n    address indexed _originalTokenAddress,\\n    string _newSymbol\\n  );\\n  event AcceptedNFTCrossTransfer(\\n    bytes32 indexed _transactionHash,\\n    address indexed _originalTokenAddress,\\n    address indexed _to,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    uint256 _logIndex\\n  );\\n  event FixedFeeNFTChanged(uint256 _amount);\\n  event ClaimedNFTToken(\\n    bytes32 indexed _transactionHash,\\n    address indexed _originalTokenAddress,\\n    address indexed _to,\\n    address _sender,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    uint256 _logIndex,\\n    address _receiver\\n  );\\n}\\n\",\"keccak256\":\"0xafe9d2b0182d14ba3d45e7af447107caa09c03706698c7bc3363a9dab2593904\",\"license\":\"MIT\"},\"contracts/nftbridge/ISideNFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ninterface ISideNFTToken {\\n    function mint(address account, uint256 tokenId) external;\\n}\",\"keccak256\":\"0x485e0d37a1d1d93a159310e4b18873fc5f303bb80ad614537351cddffbf98615\",\"license\":\"MIT\"},\"contracts/nftbridge/ISideNFTTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ninterface ISideNFTTokenFactory {\\n\\n    function createSideNFTToken(string calldata name, string calldata symbol, string calldata baseURI,\\n        string calldata contractURI) external returns(address);\\n\\n    event SideNFTTokenCreated(address indexed sideTokenAddress, string symbol, string baseURI, string contractURI);\\n}\",\"keccak256\":\"0xb1a92ab88a49fd95f52346688ddb5e63d436014d9e32e2fbe426491a18bf217b\",\"license\":\"MIT\"},\"contracts/nftbridge/NFTBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n// Import base Initializable contract\\nimport \\\"../zeppelin/upgradable/Initializable.sol\\\";\\n// Import interface and library from OpenZeppelin contracts\\nimport \\\"../zeppelin/upgradable/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../zeppelin/upgradable/lifecycle/UpgradablePausable.sol\\\";\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableOwnable.sol\\\";\\n\\nimport \\\"../zeppelin/introspection/IERC1820Registry.sol\\\";\\nimport \\\"../zeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../zeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../zeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"../zeppelin/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"../zeppelin/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"../zeppelin/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../zeppelin/token/ERC721/ERC721Burnable.sol\\\";\\nimport \\\"../zeppelin/utils/Address.sol\\\";\\nimport \\\"../zeppelin/math/SafeMath.sol\\\";\\n\\nimport \\\"../lib/LibEIP712.sol\\\";\\nimport \\\"../lib/LibUtils.sol\\\";\\n\\nimport \\\"./INFTBridge.sol\\\";\\nimport \\\"./ISideNFTToken.sol\\\";\\nimport \\\"./ISideNFTTokenFactory.sol\\\";\\nimport \\\"../interface/IAllowTokens.sol\\\";\\nimport \\\"../interface/IWrapped.sol\\\";\\n\\n// solhint-disable-next-line max-states-count\\ncontract NFTBridge is\\n  Initializable,\\n  INFTBridge,\\n  UpgradablePausable,\\n  UpgradableOwnable,\\n  ReentrancyGuard,\\n  IERC721Receiver {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n\\n  address internal constant NULL_ADDRESS = address(0);\\n  bytes32 internal constant NULL_HASH = bytes32(0);\\n  IERC1820Registry internal constant ERC1820 =\\n      IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  address payable internal federation;\\n  uint256 internal fixedFee;\\n  string public symbolPrefix;\\n  uint256 internal _deprecatedLastDay;\\n  uint256 internal _deprecatedSpentToday;\\n\\n  mapping(address => address) public sideTokenAddressByOriginalTokenAddress;\\n  mapping(address => address) public originalTokenAddressBySideTokenAddress;\\n  mapping(address => bool) public isAddressFromCrossedOriginalToken; // address => returns true if it's an original token address crossed previously (whether it comes from main or side chain)\\n  mapping(bytes32 => bool) public claimed; // transactionDataHash => true // previously named processed\\n  IAllowTokens public allowTokens;\\n  ISideNFTTokenFactory public sideTokenFactory;\\n  bool public isUpgrading;\\n  mapping(bytes32 => bytes32) public transactionDataHashes; // transactionHash => transactionDataHash\\n\\n  bytes32 public domainSeparator;\\n  // keccak256(\\\"Claim(address to,uint256 amount,bytes32 transactionHash,address relayer,uint256 fee,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant CLAIM_TYPEHASH =\\n      0xf18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd80433;\\n  mapping(address => uint256) public nonces;\\n\\n  event AllowTokensChanged(address _newAllowTokens);\\n  event FederationChanged(address _newFederation);\\n  event SideTokenFactoryChanged(address _newSideNFTTokenFactory);\\n  event Upgrading(bool _isUpgrading);\\n\\n  function initialize(\\n    address _manager,\\n    address payable _federation,\\n    address _allowTokens,\\n    address _sideTokenFactory,\\n    string memory _symbolPrefix\\n  ) public initializer {\\n    UpgradableOwnable.initialize(_manager);\\n    UpgradablePausable.__Pausable_init(_manager);\\n    symbolPrefix = _symbolPrefix;\\n    allowTokens = IAllowTokens(_allowTokens);\\n    sideTokenFactory = ISideNFTTokenFactory(_sideTokenFactory);\\n    federation = _federation;\\n    ERC1820.setInterfaceImplementer(\\n      address(this),\\n      0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b,\\n      address(this)\\n    );\\n    initDomainSeparator();\\n  }\\n\\n  function version() external pure override returns (string memory) {\\n    return \\\"v1\\\";\\n  }\\n\\n  function initDomainSeparator() public {\\n    uint256 chainId;\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n    domainSeparator = LibEIP712.hashEIP712Domain(\\n      \\\"RSK Token Bridge\\\",\\n      \\\"1\\\",\\n      chainId,\\n      address(this)\\n    );\\n  }\\n\\n  modifier whenNotUpgrading() {\\n    require(!isUpgrading, \\\"Bridge: Upgrading\\\");\\n    _;\\n  }\\n\\n  function acceptTransfer(\\n    address _tokenAddress,\\n    address payable _from,\\n    address payable _to,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    bytes32 _transactionHash,\\n    uint32 _logIndex\\n  ) external override whenNotPaused nonReentrant {\\n    require(_msgSender() == federation, \\\"NFTBridge: Not Federation\\\");\\n    require(\\n      isAddressFromCrossedOriginalToken[_tokenAddress] ||\\n          sideTokenAddressByOriginalTokenAddress[_tokenAddress] != NULL_ADDRESS,\\n      \\\"NFTBridge: Unknown token\\\"\\n    );\\n    require(_to != NULL_ADDRESS, \\\"NFTBridge: Null To\\\");\\n    require(_from != NULL_ADDRESS, \\\"NFTBridge: Null From\\\");\\n    require(_blockHash != NULL_HASH, \\\"NFTBridge: Null BlockHash\\\");\\n    require(_transactionHash != NULL_HASH, \\\"NFTBridge: Null TxHash\\\");\\n    require(\\n      transactionDataHashes[_transactionHash] == bytes32(0),\\n      \\\"NFTBridge: Already accepted\\\"\\n    );\\n\\n    bytes32 _transactionDataHash = getTransactionDataHash(\\n      _to,\\n      _from,\\n      _tokenId,\\n      _tokenAddress,\\n      _blockHash,\\n      _transactionHash,\\n      _logIndex\\n    );\\n    // Do not remove, claimed will also have transactions previously processed using older bridge versions\\n    require(!claimed[_transactionDataHash], \\\"NFTBridge: Already claimed\\\");\\n\\n    transactionDataHashes[_transactionHash] = _transactionDataHash;\\n//    tokenAddressByTransactionHash[_transactionHash] = _tokenAddress;\\n//    senderAddresses[_transactionHash] = _from;\\n\\n    emit AcceptedNFTCrossTransfer(\\n      _transactionHash,\\n      _tokenAddress,\\n      _to,\\n      _from,\\n      _tokenId,\\n      _blockHash,\\n      _logIndex\\n    );\\n  }\\n\\n  function createSideNFTToken(\\n    address _originalTokenAddress,\\n    string calldata _originalTokenSymbol,\\n    string calldata _originalTokenName,\\n    string calldata _baseURI,\\n    string calldata _contractURI\\n  ) external onlyOwner {\\n    require(_originalTokenAddress != NULL_ADDRESS, \\\"NFTBridge: Null original token address\\\");\\n    address sideTokenAddress = sideTokenAddressByOriginalTokenAddress[_originalTokenAddress];\\n    require(sideTokenAddress == NULL_ADDRESS, \\\"NFTBridge: Side token already exists\\\");\\n    string memory sideTokenSymbol = string(abi.encodePacked(symbolPrefix, _originalTokenSymbol));\\n\\n    // Create side token\\n    sideTokenAddress = sideTokenFactory.createSideNFTToken(_originalTokenName, sideTokenSymbol, _baseURI, _contractURI);\\n\\n    sideTokenAddressByOriginalTokenAddress[_originalTokenAddress] = sideTokenAddress;\\n    originalTokenAddressBySideTokenAddress[sideTokenAddress] = _originalTokenAddress;\\n    emit NewSideNFTToken(sideTokenAddress, _originalTokenAddress, sideTokenSymbol);\\n  }\\n\\n  function claim(NFTClaimData calldata _claimData) external override {\\n    _claim(_claimData, _claimData.to);\\n  }\\n\\n  function claimFallback(NFTClaimData calldata _claimData) external override {\\n    require(_msgSender() == _claimData.from, \\\"NFTBridge: invalid sender\\\");\\n    _claim(_claimData, _msgSender());\\n  }\\n\\n  function getDigest(\\n    NFTClaimData memory _claimData,\\n    address payable _relayer,\\n    uint256 _fee,\\n    uint256 _deadline\\n  ) internal returns (bytes32) {\\n    return LibEIP712.hashEIP712Message(\\n      domainSeparator,\\n      keccak256(\\n        abi.encode(\\n          CLAIM_TYPEHASH,\\n          _claimData.to,\\n          _claimData.tokenId,\\n          _claimData.transactionHash,\\n          _relayer,\\n          _fee,\\n          nonces[_claimData.to]++,\\n          _deadline\\n        )\\n      )\\n    );\\n  }\\n\\n  function _claim(\\n    NFTClaimData calldata _claimData,\\n    address payable _receiver\\n  ) internal {\\n    address tokenAddress = _claimData.tokenAddress;\\n    uint256 tokenId = _claimData.tokenId;\\n\\n    bytes32 transactionDataHash = getTransactionDataHash(\\n      _claimData.to,\\n      _claimData.from,\\n      tokenId,\\n      tokenAddress,\\n      _claimData.blockHash,\\n      _claimData.transactionHash,\\n      _claimData.logIndex\\n    );\\n    require(\\n      transactionDataHashes[_claimData.transactionHash] == transactionDataHash,\\n      \\\"NFTBridge: Wrong txDataHash\\\"\\n    );\\n    require(!claimed[transactionDataHash], \\\"NFTBridge: Already claimed\\\");\\n\\n    claimed[transactionDataHash] = true;\\n    bool isClaimBeingRequestedInMainChain = isAddressFromCrossedOriginalToken[tokenAddress];\\n    if (isClaimBeingRequestedInMainChain) {\\n      IERC721(tokenAddress).safeTransferFrom(address(this), _receiver, tokenId);\\n    } else {\\n      address sideTokenAddress = sideTokenAddressByOriginalTokenAddress[tokenAddress];\\n      ISideNFTToken(sideTokenAddress).mint(_receiver, tokenId);\\n    }\\n\\n    emit ClaimedNFTToken(\\n      _claimData.transactionHash,\\n      tokenAddress,\\n      _claimData.to,\\n      _claimData.from,\\n      _claimData.tokenId,\\n      _claimData.blockHash,\\n      _claimData.logIndex,\\n      _receiver\\n    );\\n  }\\n\\n  function getTokenCreator(address tokenAddress, uint256 tokenId) public view returns (address) {\\n    (bool success, bytes memory data) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"creator()\\\"));\\n    if (success) {\\n      return abi.decode(data, (address));\\n    }\\n\\n    return IERC721(tokenAddress).ownerOf(tokenId);\\n  }\\n\\n  /**\\n    * ERC-20 tokens approve and transferFrom pattern\\n    * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\\n    */\\n  function receiveTokensTo(\\n    address tokenAddress,\\n    address to,\\n    uint256 tokenId\\n  ) public payable override {\\n    address tokenCreator = getTokenCreator(tokenAddress, tokenId);\\n\\n    address payable sender = _msgSender();\\n    // Transfer the tokens on IERC721, they should be already Approved for the bridge Address to use them\\n    IERC721(tokenAddress).transferFrom(sender, address(this), tokenId);\\n\\n    crossTokens(tokenAddress, to, tokenCreator, \\\"\\\", tokenId);\\n\\n    if (fixedFee > 0) {\\n      require(msg.value >= fixedFee, \\\"NFTBridge: value is smaller than fixed fee\\\");\\n\\n      // Send the payment to the MultiSig of the Federation\\n      federation.transfer(fixedFee);\\n      if (msg.value > fixedFee) { // refund of unused value\\n        sender.transfer(msg.value - fixedFee);\\n      }\\n    }\\n  }\\n\\n  function crossTokens(\\n    address tokenAddress,\\n    address to,\\n    address tokenCreator,\\n    bytes memory userData,\\n    uint256 tokenId\\n  ) internal whenNotUpgrading whenNotPaused nonReentrant {\\n    isAddressFromCrossedOriginalToken[tokenAddress] = true;\\n\\n    IERC721Enumerable enumerable = IERC721Enumerable(tokenAddress);\\n    IERC721Metadata metadataIERC = IERC721Metadata(tokenAddress);\\n    string memory tokenURI = metadataIERC.tokenURI(tokenId);\\n\\n    address originalTokenAddress = tokenAddress;\\n    if (originalTokenAddressBySideTokenAddress[tokenAddress] != NULL_ADDRESS) {\\n      originalTokenAddress = originalTokenAddressBySideTokenAddress[tokenAddress];\\n      ERC721Burnable(tokenAddress).burn(tokenId);\\n    }\\n\\n    emit Cross(\\n      originalTokenAddress,\\n      _msgSender(),\\n      to,\\n      tokenCreator,\\n      userData,\\n      enumerable.totalSupply(),\\n      tokenId,\\n      tokenURI\\n    );\\n  }\\n\\n  function getTransactionDataHash(\\n    address _to,\\n    address _from,\\n    uint256 _tokenId,\\n    address _tokenAddress,\\n    bytes32 _blockHash,\\n    bytes32 _transactionHash,\\n    uint32 _logIndex\\n  ) public pure override returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(\\n        _blockHash,\\n        _transactionHash,\\n        _to,\\n        _from,\\n        _tokenId,\\n        _tokenAddress,\\n        _logIndex\\n      )\\n    );\\n  }\\n\\n  function setFixedFee(uint256 amount) external onlyOwner {\\n    fixedFee = amount;\\n    emit FixedFeeNFTChanged(fixedFee);\\n  }\\n\\n  function getFixedFee() external view override returns (uint256) {\\n    return fixedFee;\\n  }\\n\\n  function changeFederation(address payable newFederation) external onlyOwner {\\n    require(newFederation != NULL_ADDRESS, \\\"NFTBridge: Federation is empty\\\");\\n    federation = newFederation;\\n    emit FederationChanged(federation);\\n  }\\n\\n  function changeAllowTokens(address newAllowTokens) external onlyOwner {\\n    require(newAllowTokens != NULL_ADDRESS, \\\"NFTBridge: AllowTokens is empty\\\");\\n    allowTokens = IAllowTokens(newAllowTokens);\\n    emit AllowTokensChanged(newAllowTokens);\\n  }\\n\\n  function getFederation() external view returns (address) {\\n    return federation;\\n  }\\n\\n  function changeSideTokenFactory(address newSideNFTTokenFactory) external onlyOwner {\\n    require(\\n      newSideNFTTokenFactory != NULL_ADDRESS,\\n      \\\"NFTBridge: empty SideTokenFactory\\\"\\n    );\\n    sideTokenFactory = ISideNFTTokenFactory(newSideNFTTokenFactory);\\n    emit SideTokenFactoryChanged(newSideNFTTokenFactory);\\n  }\\n\\n  function setUpgrading(bool _isUpgrading) external onlyOwner {\\n    isUpgrading = _isUpgrading;\\n    emit Upgrading(isUpgrading);\\n  }\\n\\n  function hasCrossed(bytes32 transactionHash) public view returns (bool) {\\n    return transactionDataHashes[transactionHash] != bytes32(0);\\n  }\\n\\n  function hasBeenClaimed(bytes32 transactionHash) public view returns (bool) {\\n    return claimed[transactionDataHashes[transactionHash]];\\n  }\\n\\n  /**\\n    * Always returns `IERC721Receiver.onERC721Received.selector`.\\n    */\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes memory\\n  ) public virtual override returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x17401fde6adbbe54bddc0541bd7d443ba752f9a21d7ca1f80f1b22fdc9f70dd8\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xbc43be9319c563253600d0a1d7106572c9bfc1fbb623d133a1edfb7e60c845c4\",\"license\":\"MIT\"},\"contracts/zeppelin/access/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account doesn't have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0xfa806d08d8b499296b170e1cf6a8870bfb25fd4dbf67bca2e6b327f8fe5c2d1e\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x234cdf2c3efd5f0dc17d32fe65d33c21674ca17de1e945eb60ac1076d7152d96\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as `account`'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `_account`.\\n     * - `_interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `_implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address _account, bytes32 _interfaceHash, address _implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `_interfaceHash` for `_account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `_interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `_account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address _account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x1b44f619ae588fd201e93b126b80576e1244ef468e8b4e54e62fbad6a805cc87\",\"license\":\"MIT\"},\"contracts/zeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x09ca2716452528a6e69ac9f83f874292a1e547630473f3133038314a2f16029e\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x1bc9527655c4be58541c2fb90c0a05952938961c289f505c70160f87e08aef33\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc22dd16f0cffdfddf9caa4643752b4b4e7fb41390f4a3ccb11b4eec501920980\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0xc097fe06cc7bbb7554dd9742e31354af83dad44e6371f40c3f0c0cd5ffd5078d\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x770787ba19afb0cabcd6787bebba006165509fa6a1b6f4342be5b334e60ed79a\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || !initialized, \\\"Contract instance is already initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x3eeeb5ea6bf7d3458bb36acebd4268b406e6a1525e009d4d8a90626c277a37d1\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/access/roles/UpgradablePauserRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../Initializable.sol\\\";\\n\\nimport \\\"../../../GSN/Context.sol\\\";\\nimport \\\"../../../access/Roles.sol\\\";\\n\\ncontract UpgradablePauserRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    function __PauserRol_init(address sender) public initializer {\\n        if (!isPauser(sender)) {\\n            _addPauser(sender);\\n        }\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller doesn't have the role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x8944b1fc00760a83b652c14b9891d7e0a43b860fb13725480359e10979a23e15\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/lifecycle/UpgradablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../access/roles/UpgradablePauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract UpgradablePausable is Initializable, Context, UpgradablePauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    function __Pausable_init(address sender) public initializer {\\n        UpgradablePauserRole.__PauserRol_init(sender);\\n\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x97aa1a11fb3dc9d9e1478f846196f98296e46cc05202c986f6c60a3417951520\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradableOwnable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2e0e58f4a3991801550e6a52512a3c1bbcaa5cb824120c177cb6ec1b4fa0ce97\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard is Initializable {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    function initialize() public initializer {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: no reentrant allowed\\\");\\n    }\\n}\",\"keccak256\":\"0x55fdfe1504f54e18aaf3da306bfb46498d1baf54e371d14a3ace8a5adf25bbe1\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc67d0428addcf1cbef937166a7b8f28d4e1d6ecf0eaaff683501d25e8593dc28\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x2114555153edb5f273008b3d34205f511db9af06b88f752e4c280dd612c4c549\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x08e38e034333372aea8cb1b8846085b7fbab42c6b77a0af464d2c6827827c4f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613088806100206000396000f3fe60806040526004361061027d5760003560e01c806382dc1ec41161014f578063cc3c0f06116100c1578063eb16136f1161007a578063eb16136f14610711578063ed99f4c614610731578063f140902814610746578063f2fde38b14610766578063f698da2514610786578063fa0caa161461079b5761027d565b8063cc3c0f0614610667578063ce5f8bf214610687578063d12e825d146106a7578063d220d30a146106bc578063da677037146106dc578063ea217091146106fc5761027d565b8063a53d6e6e11610113578063a53d6e6e146105c8578063a9e4eff2146105dd578063b7947262146105fd578063b86f60d214610612578063c33c8c6114610627578063c4d66de8146106475761027d565b806382dc1ec41461053c5780638456cb591461055c5780638da5cb5b146105715780638f32d59b14610593578063916dc59d146105a85761027d565b806346fbf68e116101f35780636b0509b1116101ac5780636b0509b1146104b55780636ef8d66d146104ca578063715018a6146104df5780637813bea2146104f45780637ecebe00146105075780638129fc1c146105275761027d565b806346fbf68e1461040957806354fd4d501461042957806359a8a8671461044b5780635c975abb1461046057806366476109146104755780636a863191146104955761027d565b80632f3cca4e116102455780632f3cca4e146103545780632fb3b3611461037457806337de81061461039457806337e76109146103b45780633f4ba83a146103d457806342cdb2c6146103e95761027d565b806307c8f7b0146102825780630b2292a6146102a4578063150b7a02146102da5780631b68e6e6146103075780631c7e6efb14610327575b600080fd5b34801561028e57600080fd5b506102a261029d3660046125cf565b6107bb565b005b3480156102b057600080fd5b506102c46102bf3660046125ef565b610842565b6040516102d1919061292d565b60405180910390f35b3480156102e657600080fd5b506102fa6102f5366004612453565b610854565b6040516102d19190612936565b34801561031357600080fd5b506102a2610322366004612671565b610864565b34801561033357600080fd5b5061034761034236600461225d565b6108bf565b6040516102d19190612922565b34801561036057600080fd5b506102a261036f36600461225d565b6108d4565b34801561038057600080fd5b506102a261038f366004612312565b61095d565b3480156103a057600080fd5b506102a26103af3660046125ef565b610acd565b3480156103c057600080fd5b506103476103cf3660046125ef565b610b26565b3480156103e057600080fd5b506102a2610b4b565b3480156103f557600080fd5b506102a261040436600461225d565b610bde565b34801561041557600080fd5b5061034761042436600461225d565b610c71565b34801561043557600080fd5b5061043e610c84565b6040516102d191906129a9565b34801561045757600080fd5b5061043e610ca0565b34801561046c57600080fd5b50610347610d2e565b34801561048157600080fd5b506102a2610490366004612671565b610d37565b3480156104a157600080fd5b506102a26104b036600461229c565b610d48565b3480156104c157600080fd5b506102c4610f97565b3480156104d657600080fd5b506102a2610fbb565b3480156104eb57600080fd5b506102a2610fcd565b6102a26105023660046123ab565b611041565b34801561051357600080fd5b506102c461052236600461225d565b61118b565b34801561053357600080fd5b506102a261119d565b34801561054857600080fd5b506102a261055736600461225d565b611216565b34801561056857600080fd5b506102a2611246565b34801561057d57600080fd5b506105866112c6565b6040516102d191906127fe565b34801561059f57600080fd5b506103476112da565b3480156105b457600080fd5b506102a26105c336600461225d565b611305565b3480156105d457600080fd5b5061058661139a565b3480156105e957600080fd5b506102c46105f83660046123eb565b6113a9565b34801561060957600080fd5b506103476113eb565b34801561061e57600080fd5b506105866113fb565b34801561063357600080fd5b506102a26106423660046124d0565b61140a565b34801561065357600080fd5b506102a261066236600461225d565b6115cf565b34801561067357600080fd5b506103476106823660046125ef565b61169a565b34801561069357600080fd5b506105866106a236600461225d565b6116af565b3480156106b357600080fd5b506102a26116ca565b3480156106c857600080fd5b506105866106d73660046125a4565b611722565b3480156106e857600080fd5b506103476106f73660046125ef565b611855565b34801561070857600080fd5b50610586611869565b34801561071d57600080fd5b506102a261072c36600461225d565b611878565b34801561073d57600080fd5b506102c4611903565b34801561075257600080fd5b5061058661076136600461225d565b611909565b34801561077257600080fd5b506102a261078136600461225d565b611924565b34801561079257600080fd5b506102c4611951565b3480156107a757600080fd5b506102a26107b636600461225d565b611957565b6107c36112da565b6107e85760405162461bcd60e51b81526004016107df90612d0d565b60405180910390fd5b6040805460ff60a01b1916600160a01b83151581029190911780835591517f983e436223c000a441c2443b394ca5fb4669a513fe86dc1dd44494047b514ad9926108379260ff91041690612922565b60405180910390a150565b60416020526000908152604090205481565b630a85bd0160e11b949350505050565b610874604082016020830161225d565b6001600160a01b03166108856119f2565b6001600160a01b0316146108ab5760405162461bcd60e51b81526004016107df90612a66565b6108bc816108b76119f2565b6119f6565b50565b603d6020526000908152604090205460ff1681565b600054610100900460ff16806108ed575060005460ff16155b6109095760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff16158015610934576000805460ff1961ff0019909116610100171660011790555b61093d82611878565b6034805460ff191690558015610959576000805461ff00191690555b5050565b600054610100900460ff1680610976575060005460ff16155b6109925760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff161580156109bd576000805460ff1961ff0019909116610100171660011790555b6109c6866115cf565b6109cf866108d4565b81516109e2906038906020850190612123565b50603f80546001600160a01b038087166001600160a01b031992831617909255604080548684169083161781556036805493891693909216929092179055516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90610a799030907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9082906004016128c9565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b50505050610ab36116ca565b8015610ac5576000805461ff00191690555b505050505050565b610ad56112da565b610af15760405162461bcd60e51b81526004016107df90612d0d565b60378190556040517f5eebc59df2662862db7d6ef529ff1a264721bd7c26550f39c89a685382668f4e9061083790839061292d565b6000818152604160209081526040808320548352603e90915290205460ff165b919050565b610b566104246119f2565b610b725760405162461bcd60e51b81526004016107df90612bc2565b60345460ff16610b945760405162461bcd60e51b81526004016107df90612a01565b6034805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610bc76119f2565b604051610bd491906127fe565b60405180910390a1565b610be66112da565b610c025760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b038116610c285760405162461bcd60e51b81526004016107df90612f86565b604080546001600160a01b0319166001600160a01b038316178155517f619936bc6e3618d0b8dc69bcc70134fe9d88f9967f3a8b8304e3183692521625906108379083906127fe565b6000610c7e603383611c55565b92915050565b604080518082019091526002815261763160f01b602082015290565b6038805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d265780601f10610cfb57610100808354040283529160200191610d26565b820191906000526020600020905b815481529060010190602001808311610d0957829003601f168201915b505050505081565b60345460ff1690565b6108bc816108b7602082018261225d565b60345460ff1615610d6b5760405162461bcd60e51b81526004016107df90612c4e565b60358054600101908190556036546001600160a01b0316610d8a6119f2565b6001600160a01b031614610db05760405162461bcd60e51b81526004016107df90612cd6565b6001600160a01b0388166000908152603d602052604090205460ff1680610df057506001600160a01b038881166000908152603b60205260409020541615155b610e0c5760405162461bcd60e51b81526004016107df90612df2565b6001600160a01b038616610e325760405162461bcd60e51b81526004016107df90612eaa565b6001600160a01b038716610e585760405162461bcd60e51b81526004016107df90612c78565b83610e755760405162461bcd60e51b81526004016107df90612f0d565b82610e925760405162461bcd60e51b81526004016107df90612ca6565b60008381526041602052604090205415610ebe5760405162461bcd60e51b81526004016107df90612e29565b6000610ecf8789888c8989896113a9565b6000818152603e602052604090205490915060ff1615610f015760405162461bcd60e51b81526004016107df90612dbb565b806041600086815260200190815260200160002081905550866001600160a01b0316896001600160a01b0316857f68c55835fbe7c27942e2ff7632542cf70ee33ba41b292bff9cb6183e3db7e63b8b8a8a89604051610f63949392919061284f565b60405180910390a4506035548114610f8d5760405162461bcd60e51b81526004016107df906129bc565b5050505050505050565b7ff18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd8043381565b610fcb610fc66119f2565b611c9d565b565b610fd56112da565b610ff15760405162461bcd60e51b81526004016107df90612d0d565b60345460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360348054610100600160a81b0319169055565b600061104d8483611722565b905060006110596119f2565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061108c90849030908890600401612812565b600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050506110da8585846040518060200160405280600081525087611cdf565b60375415611184576037543410156111045760405162461bcd60e51b81526004016107df90612e60565b6036546037546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611140573d6000803e3d6000fd5b50603754341115611184576037546040516001600160a01b03831691340380156108fc02916000818181858888f19350505050158015610ac5573d6000803e3d6000fd5b5050505050565b60436020526000908152604090205481565b600054610100900460ff16806111b6575060005460ff16155b6111d25760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff161580156111fd576000805460ff1961ff0019909116610100171660011790555b600160355580156108bc576000805461ff001916905550565b6112216104246119f2565b61123d5760405162461bcd60e51b81526004016107df90612bc2565b6108bc81611f69565b6112516104246119f2565b61126d5760405162461bcd60e51b81526004016107df90612bc2565b60345460ff16156112905760405162461bcd60e51b81526004016107df90612c4e565b6034805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bc76119f2565b60345461010090046001600160a01b031690565b60345460009061010090046001600160a01b03166112f66119f2565b6001600160a01b031614905090565b61130d6112da565b6113295760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b03811661134f5760405162461bcd60e51b81526004016107df90612ed6565b603f80546001600160a01b0319166001600160a01b0383161790556040517f5f2c1fe803fd576d8af05ea156011cc9cc8c025bda24c1e85772fc05a0b3f1e3906108379083906127fe565b603f546001600160a01b031681565b6000838389898989876040516020016113c89796959493929190612710565b604051602081830303815290604052805190602001209050979650505050505050565b604054600160a01b900460ff1681565b6040546001600160a01b031681565b6114126112da565b61142e5760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b0389166114545760405162461bcd60e51b81526004016107df90612a9d565b6001600160a01b03808a166000908152603b602052604090205416801561148d5760405162461bcd60e51b81526004016107df90612c0a565b600060388a8a6040516020016114a593929190612785565b60408051601f198184030181528282529054634423ac3360e11b83529092506001600160a01b0316906388475866906114ee908b908b9086908c908c908c908c9060040161294b565b602060405180830381600087803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115409190612280565b6001600160a01b03808d166000818152603b6020908152604080832080549587166001600160a01b03199687168117909155808452603c909252918290208054909416831790935551929450917f622ea91961d2c1c42b6f59a73d152d990066165d59f27d922ce6d1f59650638c906115ba9085906129a9565b60405180910390a35050505050505050505050565b600054610100900460ff16806115e8575060005460ff16155b6116045760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff1615801561162f576000805460ff1961ff0019909116610100171660011790555b60348054610100600160a81b0319166101006001600160a01b0385811682029290921792839055604051920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610959576000805461ff00191690555050565b603e6020526000908152604090205460ff1681565b603c602052600090815260409020546001600160a01b031681565b600046905061171c6040518060400160405280601081526020016f52534b20546f6b656e2042726964676560801b815250604051806040016040528060018152602001603160f81b8152508330611fab565b60425550565b60408051600481526024810182526020810180516001600160e01b03166302d05d3f60e01b1790529051600091829182916001600160a01b038716916117689190612769565b600060405180830381855afa9150503d80600081146117a3576040519150601f19603f3d011682016040523d82523d6000602084013e6117a8565b606091505b509150915081156117d057808060200190518101906117c79190612280565b92505050610c7e565b6040516331a9108f60e11b81526001600160a01b03861690636352211e906117fc90879060040161292d565b60206040518083038186803b15801561181457600080fd5b505afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c9190612280565b95945050505050565b600090815260416020526040902054151590565b6036546001600160a01b031690565b600054610100900460ff1680611891575060005460ff16155b6118ad5760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff161580156118d8576000805460ff1961ff0019909116610100171660011790555b6118e182610c71565b6118ee576118ee82611f69565b8015610959576000805461ff00191690555050565b60375490565b603b602052600090815260409020546001600160a01b031681565b61192c6112da565b6119485760405162461bcd60e51b81526004016107df90612d0d565b6108bc81612002565b60425481565b61195f6112da565b61197b5760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b0381166119a15760405162461bcd60e51b81526004016107df90612d84565b603680546001600160a01b0319166001600160a01b0383811691909117918290556040517f4a41a4d11aaf0c0c9e4311ac1d68b2b0134556da594779a2a35b0ddf7cd1eafb926108379216906127fe565b3390565b6000611a08608084016060850161225d565b905060408301356000611a4d611a21602087018761225d565b611a31604088016020890161225d565b848660808a013560a08b01356105f860e08d0160c08e016126a0565b60a08601356000908152604160205260409020549091508114611a825760405162461bcd60e51b81526004016107df90612ae3565b6000818152603e602052604090205460ff1615611ab15760405162461bcd60e51b81526004016107df90612dbb565b6000818152603e60209081526040808320805460ff191660011790556001600160a01b0386168352603d90915290205460ff168015611b5157604051632142170760e11b81526001600160a01b038516906342842e0e90611b1a90309089908890600401612812565b600060405180830381600087803b158015611b3457600080fd5b505af1158015611b48573d6000803e3d6000fd5b50505050611bc8565b6001600160a01b038085166000908152603b6020526040908190205490516340c10f1960e01b815291169081906340c10f1990611b949089908890600401612836565b600060405180830381600087803b158015611bae57600080fd5b505af1158015611bc2573d6000803e3d6000fd5b50505050505b611bd5602087018761225d565b6001600160a01b0390811690851660a08801357f8738727192721a6f1909e42e987fa3faf27386067521caf12f11c5dc4013c2ac611c1960408b0160208c0161225d565b60408b013560808c0135611c3360e08e0160c08f016126a0565b8c604051611c459594939291906128ec565b60405180910390a4505050505050565b60006001600160a01b038216611c7d5760405162461bcd60e51b81526004016107df90612d42565b506001600160a01b03166000908152602091909152604090205460ff1690565b611ca860338261208f565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b604054600160a01b900460ff1615611d095760405162461bcd60e51b81526004016107df90612b1a565b60345460ff1615611d2c5760405162461bcd60e51b81526004016107df90612c4e565b603580546001908101918290556001600160a01b0387166000818152603d6020526040808220805460ff1916909417909355915163c87b56dd60e01b815288928392909163c87b56dd90611d8490889060040161292d565b60006040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dd89190810190612607565b6001600160a01b03808b166000908152603c60205260409020549192508a911615611e7057506001600160a01b03808a166000818152603c602052604090819020549051630852cd8d60e31b81529216916342966c6890611e3d90899060040161292d565b600060405180830381600087803b158015611e5757600080fd5b505af1158015611e6b573d6000803e3d6000fd5b505050505b886001600160a01b0316611e826119f2565b6001600160a01b0316826001600160a01b03167f8586062302f52eda0114687cd36998f16298ea820e0a6f8878bbbfefebc09e9f8b8b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef157600080fd5b505afa158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190612688565b8c89604051611f3c95949392919061287b565b60405180910390a4505050506035548114610ac55760405162461bcd60e51b81526004016107df906129bc565b611f746033826120d7565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6001600160a01b0381166120285760405162461bcd60e51b81526004016107df90612f44565b6034546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6120998282611c55565b6120b55760405162461bcd60e51b81526004016107df90612b45565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6120e18282611c55565b156120fe5760405162461bcd60e51b81526004016107df90612a2f565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612159576000855561219f565b82601f1061217257805160ff191683800117855561219f565b8280016001018555821561219f579182015b8281111561219f578251825591602001919060010190612184565b506121ab9291506121af565b5090565b5b808211156121ab57600081556001016121b0565b60006121d76121d284612feb565b612fc7565b90508281528383830111156121eb57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112612213578182fd5b50813567ffffffffffffffff81111561222a578182fd5b60208301915083602082850101111561224257600080fd5b9250929050565b803563ffffffff81168114610b4657600080fd5b60006020828403121561226e578081fd5b81356122798161303d565b9392505050565b600060208284031215612291578081fd5b81516122798161303d565b600080600080600080600060e0888a0312156122b6578283fd5b87356122c18161303d565b965060208801356122d18161303d565b955060408801356122e18161303d565b9450606088013593506080880135925060a0880135915061230460c08901612249565b905092959891949750929550565b600080600080600060a08688031215612329578081fd5b85356123348161303d565b945060208601356123448161303d565b935060408601356123548161303d565b925060608601356123648161303d565b9150608086013567ffffffffffffffff81111561237f578182fd5b8601601f8101881361238f578182fd5b61239e888235602084016121c4565b9150509295509295909350565b6000806000606084860312156123bf578283fd5b83356123ca8161303d565b925060208401356123da8161303d565b929592945050506040919091013590565b600080600080600080600060e0888a031215612405578081fd5b87356124108161303d565b965060208801356124208161303d565b95506040880135945060608801356124378161303d565b93506080880135925060a0880135915061230460c08901612249565b60008060008060808587031215612468578182fd5b84356124738161303d565b935060208501356124838161303d565b925060408501359150606085013567ffffffffffffffff8111156124a5578182fd5b8501601f810187136124b5578182fd5b6124c4878235602084016121c4565b91505092959194509250565b600080600080600080600080600060a08a8c0312156124ed578283fd5b89356124f88161303d565b985060208a013567ffffffffffffffff80821115612514578485fd5b6125208d838e01612202565b909a50985060408c0135915080821115612538578485fd5b6125448d838e01612202565b909850965060608c013591508082111561255c578485fd5b6125688d838e01612202565b909650945060808c0135915080821115612580578384fd5b5061258d8c828d01612202565b915080935050809150509295985092959850929598565b600080604083850312156125b6578182fd5b82356125c18161303d565b946020939093013593505050565b6000602082840312156125e0578081fd5b81358015158114612279578182fd5b600060208284031215612600578081fd5b5035919050565b600060208284031215612618578081fd5b815167ffffffffffffffff81111561262e578182fd5b8201601f8101841361263e578182fd5b805161264c6121d282612feb565b818152856020838501011115612660578384fd5b61184c82602083016020860161300d565b600060e08284031215612682578081fd5b50919050565b600060208284031215612699578081fd5b5051919050565b6000602082840312156126b1578081fd5b61227982612249565b600081518084526126d281602086016020860161300d565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b9687526020870195909552606093841b6bffffffffffffffffffffffff19908116604088015292841b83166054870152606886019190915290911b16608883015260e01b6001600160e01b031916609c82015260a00190565b6000825161277b81846020870161300d565b9190910192915050565b60008085546001808216600081146127a457600181146127bb576127ea565b60ff198316865260028304607f16860193506127ea565b600283048986526020808720875b838110156127e25781548a8201529085019082016127c9565b505050860193505b505050838582379092019182525092915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526020840192909252604083015263ffffffff16606082015260800190565b6001600160a01b038616815260a06020820181905260009061289f908301876126ba565b85604084015284606084015282810360808401526128bd81856126ba565b98975050505050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b0395861681526020810194909452604084019290925263ffffffff166060830152909116608082015260a00190565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b60006080825261295f60808301898b6126e6565b828103602084015261297181896126ba565b905082810360408401526129868187896126e6565b9050828103606084015261299b8185876126e6565b9a9950505050505050505050565b60006020825261227960208301846126ba565b60208082526025908201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6040820152641b1bddd95960da1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601f908201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604082015260600190565b60208082526019908201527f4e46544272696467653a20696e76616c69642073656e64657200000000000000604082015260600190565b60208082526026908201527f4e46544272696467653a204e756c6c206f726967696e616c20746f6b656e206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f4e46544272696467653a2057726f6e6720747844617461486173680000000000604082015260600190565b6020808252601190820152704272696467653a20557067726164696e6760781b604082015260600190565b6020808252818101527f526f6c65733a206163636f756e7420646f65736e2774206861766520726f6c65604082015260600190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60208082526028908201527f506175736572526f6c653a2063616c6c657220646f65736e277420686176652060408201526774686520726f6c6560c01b606082015260800190565b60208082526024908201527f4e46544272696467653a205369646520746f6b656e20616c72656164792065786040820152636973747360e01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601490820152734e46544272696467653a204e756c6c2046726f6d60601b604082015260600190565b60208082526016908201527509c8ca884e4d2c8ceca74409cead8d840a8f090c2e6d60531b604082015260600190565b60208082526019908201527f4e46544272696467653a204e6f742046656465726174696f6e00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4e46544272696467653a2046656465726174696f6e20697320656d7074790000604082015260600190565b6020808252601a908201527f4e46544272696467653a20416c726561647920636c61696d6564000000000000604082015260600190565b60208082526018908201527f4e46544272696467653a20556e6b6e6f776e20746f6b656e0000000000000000604082015260600190565b6020808252601b908201527f4e46544272696467653a20416c72656164792061636365707465640000000000604082015260600190565b6020808252602a908201527f4e46544272696467653a2076616c756520697320736d616c6c6572207468616e6040820152692066697865642066656560b01b606082015260800190565b6020808252601290820152714e46544272696467653a204e756c6c20546f60701b604082015260600190565b6020808252601f908201527f4e46544272696467653a20416c6c6f77546f6b656e7320697320656d70747900604082015260600190565b60208082526019908201527f4e46544272696467653a204e756c6c20426c6f636b4861736800000000000000604082015260600190565b60208082526022908201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f4e46544272696467653a20656d7074792053696465546f6b656e466163746f726040820152607960f81b606082015260800190565b60405181810167ffffffffffffffff81118282101715612fe357fe5b604052919050565b600067ffffffffffffffff821115612fff57fe5b50601f01601f191660200190565b60005b83811015613028578181015183820152602001613010565b83811115613037576000848401525b50505050565b6001600160a01b03811681146108bc57600080fdfea26469706673582212208d5d3f03f592f54b43b45c7542edc27eb5e0e380374fc08c52e22d8d6f02f71364736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c806382dc1ec41161014f578063cc3c0f06116100c1578063eb16136f1161007a578063eb16136f14610711578063ed99f4c614610731578063f140902814610746578063f2fde38b14610766578063f698da2514610786578063fa0caa161461079b5761027d565b8063cc3c0f0614610667578063ce5f8bf214610687578063d12e825d146106a7578063d220d30a146106bc578063da677037146106dc578063ea217091146106fc5761027d565b8063a53d6e6e11610113578063a53d6e6e146105c8578063a9e4eff2146105dd578063b7947262146105fd578063b86f60d214610612578063c33c8c6114610627578063c4d66de8146106475761027d565b806382dc1ec41461053c5780638456cb591461055c5780638da5cb5b146105715780638f32d59b14610593578063916dc59d146105a85761027d565b806346fbf68e116101f35780636b0509b1116101ac5780636b0509b1146104b55780636ef8d66d146104ca578063715018a6146104df5780637813bea2146104f45780637ecebe00146105075780638129fc1c146105275761027d565b806346fbf68e1461040957806354fd4d501461042957806359a8a8671461044b5780635c975abb1461046057806366476109146104755780636a863191146104955761027d565b80632f3cca4e116102455780632f3cca4e146103545780632fb3b3611461037457806337de81061461039457806337e76109146103b45780633f4ba83a146103d457806342cdb2c6146103e95761027d565b806307c8f7b0146102825780630b2292a6146102a4578063150b7a02146102da5780631b68e6e6146103075780631c7e6efb14610327575b600080fd5b34801561028e57600080fd5b506102a261029d3660046125cf565b6107bb565b005b3480156102b057600080fd5b506102c46102bf3660046125ef565b610842565b6040516102d1919061292d565b60405180910390f35b3480156102e657600080fd5b506102fa6102f5366004612453565b610854565b6040516102d19190612936565b34801561031357600080fd5b506102a2610322366004612671565b610864565b34801561033357600080fd5b5061034761034236600461225d565b6108bf565b6040516102d19190612922565b34801561036057600080fd5b506102a261036f36600461225d565b6108d4565b34801561038057600080fd5b506102a261038f366004612312565b61095d565b3480156103a057600080fd5b506102a26103af3660046125ef565b610acd565b3480156103c057600080fd5b506103476103cf3660046125ef565b610b26565b3480156103e057600080fd5b506102a2610b4b565b3480156103f557600080fd5b506102a261040436600461225d565b610bde565b34801561041557600080fd5b5061034761042436600461225d565b610c71565b34801561043557600080fd5b5061043e610c84565b6040516102d191906129a9565b34801561045757600080fd5b5061043e610ca0565b34801561046c57600080fd5b50610347610d2e565b34801561048157600080fd5b506102a2610490366004612671565b610d37565b3480156104a157600080fd5b506102a26104b036600461229c565b610d48565b3480156104c157600080fd5b506102c4610f97565b3480156104d657600080fd5b506102a2610fbb565b3480156104eb57600080fd5b506102a2610fcd565b6102a26105023660046123ab565b611041565b34801561051357600080fd5b506102c461052236600461225d565b61118b565b34801561053357600080fd5b506102a261119d565b34801561054857600080fd5b506102a261055736600461225d565b611216565b34801561056857600080fd5b506102a2611246565b34801561057d57600080fd5b506105866112c6565b6040516102d191906127fe565b34801561059f57600080fd5b506103476112da565b3480156105b457600080fd5b506102a26105c336600461225d565b611305565b3480156105d457600080fd5b5061058661139a565b3480156105e957600080fd5b506102c46105f83660046123eb565b6113a9565b34801561060957600080fd5b506103476113eb565b34801561061e57600080fd5b506105866113fb565b34801561063357600080fd5b506102a26106423660046124d0565b61140a565b34801561065357600080fd5b506102a261066236600461225d565b6115cf565b34801561067357600080fd5b506103476106823660046125ef565b61169a565b34801561069357600080fd5b506105866106a236600461225d565b6116af565b3480156106b357600080fd5b506102a26116ca565b3480156106c857600080fd5b506105866106d73660046125a4565b611722565b3480156106e857600080fd5b506103476106f73660046125ef565b611855565b34801561070857600080fd5b50610586611869565b34801561071d57600080fd5b506102a261072c36600461225d565b611878565b34801561073d57600080fd5b506102c4611903565b34801561075257600080fd5b5061058661076136600461225d565b611909565b34801561077257600080fd5b506102a261078136600461225d565b611924565b34801561079257600080fd5b506102c4611951565b3480156107a757600080fd5b506102a26107b636600461225d565b611957565b6107c36112da565b6107e85760405162461bcd60e51b81526004016107df90612d0d565b60405180910390fd5b6040805460ff60a01b1916600160a01b83151581029190911780835591517f983e436223c000a441c2443b394ca5fb4669a513fe86dc1dd44494047b514ad9926108379260ff91041690612922565b60405180910390a150565b60416020526000908152604090205481565b630a85bd0160e11b949350505050565b610874604082016020830161225d565b6001600160a01b03166108856119f2565b6001600160a01b0316146108ab5760405162461bcd60e51b81526004016107df90612a66565b6108bc816108b76119f2565b6119f6565b50565b603d6020526000908152604090205460ff1681565b600054610100900460ff16806108ed575060005460ff16155b6109095760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff16158015610934576000805460ff1961ff0019909116610100171660011790555b61093d82611878565b6034805460ff191690558015610959576000805461ff00191690555b5050565b600054610100900460ff1680610976575060005460ff16155b6109925760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff161580156109bd576000805460ff1961ff0019909116610100171660011790555b6109c6866115cf565b6109cf866108d4565b81516109e2906038906020850190612123565b50603f80546001600160a01b038087166001600160a01b031992831617909255604080548684169083161781556036805493891693909216929092179055516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90610a799030907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9082906004016128c9565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b50505050610ab36116ca565b8015610ac5576000805461ff00191690555b505050505050565b610ad56112da565b610af15760405162461bcd60e51b81526004016107df90612d0d565b60378190556040517f5eebc59df2662862db7d6ef529ff1a264721bd7c26550f39c89a685382668f4e9061083790839061292d565b6000818152604160209081526040808320548352603e90915290205460ff165b919050565b610b566104246119f2565b610b725760405162461bcd60e51b81526004016107df90612bc2565b60345460ff16610b945760405162461bcd60e51b81526004016107df90612a01565b6034805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610bc76119f2565b604051610bd491906127fe565b60405180910390a1565b610be66112da565b610c025760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b038116610c285760405162461bcd60e51b81526004016107df90612f86565b604080546001600160a01b0319166001600160a01b038316178155517f619936bc6e3618d0b8dc69bcc70134fe9d88f9967f3a8b8304e3183692521625906108379083906127fe565b6000610c7e603383611c55565b92915050565b604080518082019091526002815261763160f01b602082015290565b6038805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d265780601f10610cfb57610100808354040283529160200191610d26565b820191906000526020600020905b815481529060010190602001808311610d0957829003601f168201915b505050505081565b60345460ff1690565b6108bc816108b7602082018261225d565b60345460ff1615610d6b5760405162461bcd60e51b81526004016107df90612c4e565b60358054600101908190556036546001600160a01b0316610d8a6119f2565b6001600160a01b031614610db05760405162461bcd60e51b81526004016107df90612cd6565b6001600160a01b0388166000908152603d602052604090205460ff1680610df057506001600160a01b038881166000908152603b60205260409020541615155b610e0c5760405162461bcd60e51b81526004016107df90612df2565b6001600160a01b038616610e325760405162461bcd60e51b81526004016107df90612eaa565b6001600160a01b038716610e585760405162461bcd60e51b81526004016107df90612c78565b83610e755760405162461bcd60e51b81526004016107df90612f0d565b82610e925760405162461bcd60e51b81526004016107df90612ca6565b60008381526041602052604090205415610ebe5760405162461bcd60e51b81526004016107df90612e29565b6000610ecf8789888c8989896113a9565b6000818152603e602052604090205490915060ff1615610f015760405162461bcd60e51b81526004016107df90612dbb565b806041600086815260200190815260200160002081905550866001600160a01b0316896001600160a01b0316857f68c55835fbe7c27942e2ff7632542cf70ee33ba41b292bff9cb6183e3db7e63b8b8a8a89604051610f63949392919061284f565b60405180910390a4506035548114610f8d5760405162461bcd60e51b81526004016107df906129bc565b5050505050505050565b7ff18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd8043381565b610fcb610fc66119f2565b611c9d565b565b610fd56112da565b610ff15760405162461bcd60e51b81526004016107df90612d0d565b60345460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360348054610100600160a81b0319169055565b600061104d8483611722565b905060006110596119f2565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061108c90849030908890600401612812565b600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050506110da8585846040518060200160405280600081525087611cdf565b60375415611184576037543410156111045760405162461bcd60e51b81526004016107df90612e60565b6036546037546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611140573d6000803e3d6000fd5b50603754341115611184576037546040516001600160a01b03831691340380156108fc02916000818181858888f19350505050158015610ac5573d6000803e3d6000fd5b5050505050565b60436020526000908152604090205481565b600054610100900460ff16806111b6575060005460ff16155b6111d25760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff161580156111fd576000805460ff1961ff0019909116610100171660011790555b600160355580156108bc576000805461ff001916905550565b6112216104246119f2565b61123d5760405162461bcd60e51b81526004016107df90612bc2565b6108bc81611f69565b6112516104246119f2565b61126d5760405162461bcd60e51b81526004016107df90612bc2565b60345460ff16156112905760405162461bcd60e51b81526004016107df90612c4e565b6034805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bc76119f2565b60345461010090046001600160a01b031690565b60345460009061010090046001600160a01b03166112f66119f2565b6001600160a01b031614905090565b61130d6112da565b6113295760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b03811661134f5760405162461bcd60e51b81526004016107df90612ed6565b603f80546001600160a01b0319166001600160a01b0383161790556040517f5f2c1fe803fd576d8af05ea156011cc9cc8c025bda24c1e85772fc05a0b3f1e3906108379083906127fe565b603f546001600160a01b031681565b6000838389898989876040516020016113c89796959493929190612710565b604051602081830303815290604052805190602001209050979650505050505050565b604054600160a01b900460ff1681565b6040546001600160a01b031681565b6114126112da565b61142e5760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b0389166114545760405162461bcd60e51b81526004016107df90612a9d565b6001600160a01b03808a166000908152603b602052604090205416801561148d5760405162461bcd60e51b81526004016107df90612c0a565b600060388a8a6040516020016114a593929190612785565b60408051601f198184030181528282529054634423ac3360e11b83529092506001600160a01b0316906388475866906114ee908b908b9086908c908c908c908c9060040161294b565b602060405180830381600087803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115409190612280565b6001600160a01b03808d166000818152603b6020908152604080832080549587166001600160a01b03199687168117909155808452603c909252918290208054909416831790935551929450917f622ea91961d2c1c42b6f59a73d152d990066165d59f27d922ce6d1f59650638c906115ba9085906129a9565b60405180910390a35050505050505050505050565b600054610100900460ff16806115e8575060005460ff16155b6116045760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff1615801561162f576000805460ff1961ff0019909116610100171660011790555b60348054610100600160a81b0319166101006001600160a01b0385811682029290921792839055604051920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610959576000805461ff00191690555050565b603e6020526000908152604090205460ff1681565b603c602052600090815260409020546001600160a01b031681565b600046905061171c6040518060400160405280601081526020016f52534b20546f6b656e2042726964676560801b815250604051806040016040528060018152602001603160f81b8152508330611fab565b60425550565b60408051600481526024810182526020810180516001600160e01b03166302d05d3f60e01b1790529051600091829182916001600160a01b038716916117689190612769565b600060405180830381855afa9150503d80600081146117a3576040519150601f19603f3d011682016040523d82523d6000602084013e6117a8565b606091505b509150915081156117d057808060200190518101906117c79190612280565b92505050610c7e565b6040516331a9108f60e11b81526001600160a01b03861690636352211e906117fc90879060040161292d565b60206040518083038186803b15801561181457600080fd5b505afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c9190612280565b95945050505050565b600090815260416020526040902054151590565b6036546001600160a01b031690565b600054610100900460ff1680611891575060005460ff16155b6118ad5760405162461bcd60e51b81526004016107df90612b7a565b600054610100900460ff161580156118d8576000805460ff1961ff0019909116610100171660011790555b6118e182610c71565b6118ee576118ee82611f69565b8015610959576000805461ff00191690555050565b60375490565b603b602052600090815260409020546001600160a01b031681565b61192c6112da565b6119485760405162461bcd60e51b81526004016107df90612d0d565b6108bc81612002565b60425481565b61195f6112da565b61197b5760405162461bcd60e51b81526004016107df90612d0d565b6001600160a01b0381166119a15760405162461bcd60e51b81526004016107df90612d84565b603680546001600160a01b0319166001600160a01b0383811691909117918290556040517f4a41a4d11aaf0c0c9e4311ac1d68b2b0134556da594779a2a35b0ddf7cd1eafb926108379216906127fe565b3390565b6000611a08608084016060850161225d565b905060408301356000611a4d611a21602087018761225d565b611a31604088016020890161225d565b848660808a013560a08b01356105f860e08d0160c08e016126a0565b60a08601356000908152604160205260409020549091508114611a825760405162461bcd60e51b81526004016107df90612ae3565b6000818152603e602052604090205460ff1615611ab15760405162461bcd60e51b81526004016107df90612dbb565b6000818152603e60209081526040808320805460ff191660011790556001600160a01b0386168352603d90915290205460ff168015611b5157604051632142170760e11b81526001600160a01b038516906342842e0e90611b1a90309089908890600401612812565b600060405180830381600087803b158015611b3457600080fd5b505af1158015611b48573d6000803e3d6000fd5b50505050611bc8565b6001600160a01b038085166000908152603b6020526040908190205490516340c10f1960e01b815291169081906340c10f1990611b949089908890600401612836565b600060405180830381600087803b158015611bae57600080fd5b505af1158015611bc2573d6000803e3d6000fd5b50505050505b611bd5602087018761225d565b6001600160a01b0390811690851660a08801357f8738727192721a6f1909e42e987fa3faf27386067521caf12f11c5dc4013c2ac611c1960408b0160208c0161225d565b60408b013560808c0135611c3360e08e0160c08f016126a0565b8c604051611c459594939291906128ec565b60405180910390a4505050505050565b60006001600160a01b038216611c7d5760405162461bcd60e51b81526004016107df90612d42565b506001600160a01b03166000908152602091909152604090205460ff1690565b611ca860338261208f565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b604054600160a01b900460ff1615611d095760405162461bcd60e51b81526004016107df90612b1a565b60345460ff1615611d2c5760405162461bcd60e51b81526004016107df90612c4e565b603580546001908101918290556001600160a01b0387166000818152603d6020526040808220805460ff1916909417909355915163c87b56dd60e01b815288928392909163c87b56dd90611d8490889060040161292d565b60006040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dd89190810190612607565b6001600160a01b03808b166000908152603c60205260409020549192508a911615611e7057506001600160a01b03808a166000818152603c602052604090819020549051630852cd8d60e31b81529216916342966c6890611e3d90899060040161292d565b600060405180830381600087803b158015611e5757600080fd5b505af1158015611e6b573d6000803e3d6000fd5b505050505b886001600160a01b0316611e826119f2565b6001600160a01b0316826001600160a01b03167f8586062302f52eda0114687cd36998f16298ea820e0a6f8878bbbfefebc09e9f8b8b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef157600080fd5b505afa158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190612688565b8c89604051611f3c95949392919061287b565b60405180910390a4505050506035548114610ac55760405162461bcd60e51b81526004016107df906129bc565b611f746033826120d7565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6001600160a01b0381166120285760405162461bcd60e51b81526004016107df90612f44565b6034546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6120998282611c55565b6120b55760405162461bcd60e51b81526004016107df90612b45565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6120e18282611c55565b156120fe5760405162461bcd60e51b81526004016107df90612a2f565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612159576000855561219f565b82601f1061217257805160ff191683800117855561219f565b8280016001018555821561219f579182015b8281111561219f578251825591602001919060010190612184565b506121ab9291506121af565b5090565b5b808211156121ab57600081556001016121b0565b60006121d76121d284612feb565b612fc7565b90508281528383830111156121eb57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112612213578182fd5b50813567ffffffffffffffff81111561222a578182fd5b60208301915083602082850101111561224257600080fd5b9250929050565b803563ffffffff81168114610b4657600080fd5b60006020828403121561226e578081fd5b81356122798161303d565b9392505050565b600060208284031215612291578081fd5b81516122798161303d565b600080600080600080600060e0888a0312156122b6578283fd5b87356122c18161303d565b965060208801356122d18161303d565b955060408801356122e18161303d565b9450606088013593506080880135925060a0880135915061230460c08901612249565b905092959891949750929550565b600080600080600060a08688031215612329578081fd5b85356123348161303d565b945060208601356123448161303d565b935060408601356123548161303d565b925060608601356123648161303d565b9150608086013567ffffffffffffffff81111561237f578182fd5b8601601f8101881361238f578182fd5b61239e888235602084016121c4565b9150509295509295909350565b6000806000606084860312156123bf578283fd5b83356123ca8161303d565b925060208401356123da8161303d565b929592945050506040919091013590565b600080600080600080600060e0888a031215612405578081fd5b87356124108161303d565b965060208801356124208161303d565b95506040880135945060608801356124378161303d565b93506080880135925060a0880135915061230460c08901612249565b60008060008060808587031215612468578182fd5b84356124738161303d565b935060208501356124838161303d565b925060408501359150606085013567ffffffffffffffff8111156124a5578182fd5b8501601f810187136124b5578182fd5b6124c4878235602084016121c4565b91505092959194509250565b600080600080600080600080600060a08a8c0312156124ed578283fd5b89356124f88161303d565b985060208a013567ffffffffffffffff80821115612514578485fd5b6125208d838e01612202565b909a50985060408c0135915080821115612538578485fd5b6125448d838e01612202565b909850965060608c013591508082111561255c578485fd5b6125688d838e01612202565b909650945060808c0135915080821115612580578384fd5b5061258d8c828d01612202565b915080935050809150509295985092959850929598565b600080604083850312156125b6578182fd5b82356125c18161303d565b946020939093013593505050565b6000602082840312156125e0578081fd5b81358015158114612279578182fd5b600060208284031215612600578081fd5b5035919050565b600060208284031215612618578081fd5b815167ffffffffffffffff81111561262e578182fd5b8201601f8101841361263e578182fd5b805161264c6121d282612feb565b818152856020838501011115612660578384fd5b61184c82602083016020860161300d565b600060e08284031215612682578081fd5b50919050565b600060208284031215612699578081fd5b5051919050565b6000602082840312156126b1578081fd5b61227982612249565b600081518084526126d281602086016020860161300d565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b9687526020870195909552606093841b6bffffffffffffffffffffffff19908116604088015292841b83166054870152606886019190915290911b16608883015260e01b6001600160e01b031916609c82015260a00190565b6000825161277b81846020870161300d565b9190910192915050565b60008085546001808216600081146127a457600181146127bb576127ea565b60ff198316865260028304607f16860193506127ea565b600283048986526020808720875b838110156127e25781548a8201529085019082016127c9565b505050860193505b505050838582379092019182525092915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526020840192909252604083015263ffffffff16606082015260800190565b6001600160a01b038616815260a06020820181905260009061289f908301876126ba565b85604084015284606084015282810360808401526128bd81856126ba565b98975050505050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b0395861681526020810194909452604084019290925263ffffffff166060830152909116608082015260a00190565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b60006080825261295f60808301898b6126e6565b828103602084015261297181896126ba565b905082810360408401526129868187896126e6565b9050828103606084015261299b8185876126e6565b9a9950505050505050505050565b60006020825261227960208301846126ba565b60208082526025908201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6040820152641b1bddd95960da1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601f908201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604082015260600190565b60208082526019908201527f4e46544272696467653a20696e76616c69642073656e64657200000000000000604082015260600190565b60208082526026908201527f4e46544272696467653a204e756c6c206f726967696e616c20746f6b656e206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f4e46544272696467653a2057726f6e6720747844617461486173680000000000604082015260600190565b6020808252601190820152704272696467653a20557067726164696e6760781b604082015260600190565b6020808252818101527f526f6c65733a206163636f756e7420646f65736e2774206861766520726f6c65604082015260600190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60208082526028908201527f506175736572526f6c653a2063616c6c657220646f65736e277420686176652060408201526774686520726f6c6560c01b606082015260800190565b60208082526024908201527f4e46544272696467653a205369646520746f6b656e20616c72656164792065786040820152636973747360e01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601490820152734e46544272696467653a204e756c6c2046726f6d60601b604082015260600190565b60208082526016908201527509c8ca884e4d2c8ceca74409cead8d840a8f090c2e6d60531b604082015260600190565b60208082526019908201527f4e46544272696467653a204e6f742046656465726174696f6e00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4e46544272696467653a2046656465726174696f6e20697320656d7074790000604082015260600190565b6020808252601a908201527f4e46544272696467653a20416c726561647920636c61696d6564000000000000604082015260600190565b60208082526018908201527f4e46544272696467653a20556e6b6e6f776e20746f6b656e0000000000000000604082015260600190565b6020808252601b908201527f4e46544272696467653a20416c72656164792061636365707465640000000000604082015260600190565b6020808252602a908201527f4e46544272696467653a2076616c756520697320736d616c6c6572207468616e6040820152692066697865642066656560b01b606082015260800190565b6020808252601290820152714e46544272696467653a204e756c6c20546f60701b604082015260600190565b6020808252601f908201527f4e46544272696467653a20416c6c6f77546f6b656e7320697320656d70747900604082015260600190565b60208082526019908201527f4e46544272696467653a204e756c6c20426c6f636b4861736800000000000000604082015260600190565b60208082526022908201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f4e46544272696467653a20656d7074792053696465546f6b656e466163746f726040820152607960f81b606082015260800190565b60405181810167ffffffffffffffff81118282101715612fe357fe5b604052919050565b600067ffffffffffffffff821115612fff57fe5b50601f01601f191660200190565b60005b83811015613028578181015183820152602001613010565b83811115613037576000848401525b50505050565b6001600160a01b03811681146108bc57600080fdfea26469706673582212208d5d3f03f592f54b43b45c7542edc27eb5e0e380374fc08c52e22d8d6f02f71364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__Pausable_init(address)": {
        "details": "Initializes the contract in unpaused state. Assigns the Pauser role to the deployer."
      },
      "initialize(address)": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Called by a pauser to pause, triggers stopped state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim((address,address,uint256,address,bytes32,bytes32,uint32))": {
        "notice": "Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "receiveTokensTo(address,address,uint256)": {
        "notice": "ERC-20 tokens approve and transferFrom pattern See https://eips.ethereum.org/EIPS/eip-20#transferfrom"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16061,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16064,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16104,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16128,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_pausers",
        "offset": 0,
        "slot": "51",
        "type": "t_struct(Role)10405_storage"
      },
      {
        "astId": 16250,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 16348,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_owner",
        "offset": 1,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 17062,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_guardCounter",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 8074,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "federation",
        "offset": 0,
        "slot": "54",
        "type": "t_address_payable"
      },
      {
        "astId": 8076,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "fixedFee",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 8078,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "symbolPrefix",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 8080,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_deprecatedLastDay",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 8082,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "_deprecatedSpentToday",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 8086,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "sideTokenAddressByOriginalTokenAddress",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8090,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "originalTokenAddressBySideTokenAddress",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8094,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "isAddressFromCrossedOriginalToken",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8098,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "claimed",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8100,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "allowTokens",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(IAllowTokens)7210"
      },
      {
        "astId": 8102,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "sideTokenFactory",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(ISideNFTTokenFactory)8010"
      },
      {
        "astId": 8104,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "isUpgrading",
        "offset": 20,
        "slot": "64",
        "type": "t_bool"
      },
      {
        "astId": 8108,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "transactionDataHashes",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 8110,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "66",
        "type": "t_bytes32"
      },
      {
        "astId": 8117,
        "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
        "label": "nonces",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAllowTokens)7210": {
        "encoding": "inplace",
        "label": "contract IAllowTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISideNFTTokenFactory)8010": {
        "encoding": "inplace",
        "label": "contract ISideNFTTokenFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)10405_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 10404,
            "contract": "contracts/nftbridge/NFTBridge.sol:NFTBridge",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}