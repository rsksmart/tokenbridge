{
  "address": "0xB9b8d1e30F0EBEC0C8F4CF0B1717566d84FC4080",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x10a2e24b269aff23062542408e7948b6d6efd82e21e4e0e3c15cc4a6e97bc560",
  "receipt": {
    "to": null,
    "from": "0x2b3058eAb56FB80b53f3137422189E940EeFe31b",
    "contractAddress": "0xB9b8d1e30F0EBEC0C8F4CF0B1717566d84FC4080",
    "transactionIndex": 0,
    "gasUsed": "752421",
    "logsBloom": "0x
    "blockHash": "0xde0760fb1d40bbfaf5f171b0cc0da9cba2f74cb5772f593a36f5de3e2825a24e",
    "transactionHash": "0x10a2e24b269aff23062542408e7948b6d6efd82e21e4e0e3c15cc4a6e97bc560",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9269456,
        "transactionHash": "0x10a2e24b269aff23062542408e7948b6d6efd82e21e4e0e3c15cc4a6e97bc560",
        "address": "0xB9b8d1e30F0EBEC0C8F4CF0B1717566d84FC4080",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000004994d7ff4938c5953a6c8411ad30083c9097348"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xde0760fb1d40bbfaf5f171b0cc0da9cba2f74cb5772f593a36f5de3e2825a24e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9269456,
        "transactionHash": "0x10a2e24b269aff23062542408e7948b6d6efd82e21e4e0e3c15cc4a6e97bc560",
        "address": "0xB9b8d1e30F0EBEC0C8F4CF0B1717566d84FC4080",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8",
          "0x00000000000000000000000004994d7ff4938c5953a6c8411ad30083c9097348"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xde0760fb1d40bbfaf5f171b0cc0da9cba2f74cb5772f593a36f5de3e2825a24e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9269456,
        "transactionHash": "0x10a2e24b269aff23062542408e7948b6d6efd82e21e4e0e3c15cc4a6e97bc560",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x000000000000000000000000b9b8d1e30f0ebec0c8f4cf0b1717566d84fc4080",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x000000000000000000000000b9b8d1e30f0ebec0c8f4cf0b1717566d84fc4080"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xde0760fb1d40bbfaf5f171b0cc0da9cba2f74cb5772f593a36f5de3e2825a24e"
      }
    ],
    "blockNumber": 9269456,
    "cumulativeGasUsed": "752421",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xebD27fD00Eb737D91c1a66B750a45361D234Eb74",
    "0x0b32Ea549AB1F9F7390442B5E9438b58A105cB5f",
    "0x2fb3b36100000000000000000000000004994d7ff4938c5953a6c8411ad30083c9097348000000000000000000000000bc383764cebc13b66c04e1abeb36804a0caaa5c600000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e62df026fb687e4917daa88a777366b7e550d2000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000016500000000000000000000000000000000000000000000000000000000000000"
  ],
  "solcInputHash": "f57b3a626f709a0447a665aac92698b7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that is upgradeable by an admin. To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing], which can potentially be used in an attack, this contract uses the https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two things that go hand in hand: 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if that call matches one of the admin functions exposed by the proxy itself. 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the implementation. If the admin tries to call a function on the implementation it will fail with an error that says \\\"admin cannot fallback to proxy target\\\". These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to call a function from the proxy implementation. Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way, you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\"},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zeppelin/upgradable/proxy/TransparentUpgradeableProxy.sol\":\"TransparentUpgradeableProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/zeppelin/upgradable/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\r\\n     * and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view virtual returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal virtual {\\r\\n        _beforeFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback () external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n     * is empty.\\r\\n     */\\r\\n    receive () external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n     *\\r\\n     * If overriden should call `super._beforeFallback()`.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual {\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6374180266624d2291abb230bdf0d364858fa164844f5d2d83ad5325852390c9\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/proxy/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./UpgradeableProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\r\\n *\\r\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\r\\n * clashing], which can potentially be used in an attack, this contract uses the\\r\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\r\\n * things that go hand in hand:\\r\\n *\\r\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\r\\n * that call matches one of the admin functions exposed by the proxy itself.\\r\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\r\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\r\\n * \\\"admin cannot fallback to proxy target\\\".\\r\\n *\\r\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\r\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\r\\n * to sudden errors when trying to call a function from the proxy implementation.\\r\\n *\\r\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\r\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\r\\n */\\r\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\r\\n    /**\\r\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\r\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\r\\n     */\\r\\n    constructor(address _logic, address admin_, bytes memory _data) payable UpgradeableProxy(_logic, _data) {\\r\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\r\\n        _setAdmin(admin_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\r\\n     */\\r\\n    modifier ifAdmin() {\\r\\n        if (msg.sender == _admin()) {\\r\\n            _;\\r\\n        } else {\\r\\n            _fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\r\\n     */\\r\\n    function admin() external ifAdmin returns (address admin_) {\\r\\n        admin_ = _admin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\r\\n     */\\r\\n    function implementation() external ifAdmin returns (address implementation_) {\\r\\n        implementation_ = _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\r\\n     */\\r\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\r\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\r\\n        emit AdminChanged(_admin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\r\\n        _upgradeTo(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\r\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\r\\n     * proxied contract.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\r\\n        _upgradeTo(newImplementation);\\r\\n        Address.functionDelegateCall(newImplementation, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _admin() internal view virtual returns (address adm) {\\r\\n        bytes32 slot = _ADMIN_SLOT;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            adm := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        bytes32 slot = _ADMIN_SLOT;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, newAdmin)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual override {\\r\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\r\\n        super._beforeFallback();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7496c2c54dd8e648d6999687cf759521e6ab229d0d8ddb4db62f3b51dbe68811\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/proxy/UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\r\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\r\\n * implementation behind the proxy.\\r\\n *\\r\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\r\\n * {TransparentUpgradeableProxy}.\\r\\n */\\r\\ncontract UpgradeableProxy is Proxy {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    constructor(address _logic, bytes memory _data) payable {\\r\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\r\\n        _setImplementation(_logic);\\r\\n        if(_data.length > 0) {\\r\\n            Address.functionDelegateCall(_logic, _data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address impl) {\\r\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            impl := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the proxy to a new implementation.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal virtual {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\r\\n\\r\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, newImplementation)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4d3fcb8487e53abb8658817c4b90038b24d81d0a32d989f03b54d4cfab929f62\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5e6562dbec24dff773a844145d3cf3de12505b6b9f8d6ac5259f291c731c1ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405162000c9f38038062000c9f83398101604081905262000026916200022e565b8281620000338262000071565b8051156200005457620000528282620000d360201b620002ca1760201c565b505b506200005d9050565b620000688262000102565b5050506200041d565b62000087816200012660201b620002f61760201c565b620000af5760405162461bcd60e51b8152600401620000a69062000347565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6060620000fb838360405180606001604052806027815260200162000c786027913962000130565b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b803b15155b919050565b60606200013d8462000126565b6200015c5760405162461bcd60e51b8152600401620000a690620003a4565b600080856001600160a01b031685604051620001799190620002f4565b600060405180830381855af49150503d8060008114620001b6576040519150601f19603f3d011682016040523d82523d6000602084013e620001bb565b606091505b509092509050620001ce828286620001d8565b9695505050505050565b60608315620001e9575081620000fb565b825115620001fa5782518084602001fd5b8160405162461bcd60e51b8152600401620000a6919062000312565b80516001600160a01b03811681146200012b57600080fd5b60008060006060848603121562000243578283fd5b6200024e8462000216565b92506200025e6020850162000216565b60408501519092506001600160401b03808211156200027b578283fd5b818601915086601f8301126200028f578283fd5b8151818111156200029c57fe5b604051601f8201601f191681016020018381118282101715620002bb57fe5b604052818152838201602001891015620002d3578485fd5b620002e6826020830160208701620003ea565b809450505050509250925092565b6000825162000308818460208701620003ea565b9190910192915050565b600060208252825180602084015262000333816040850160208701620003ea565b601f01601f19169190910160400192915050565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160408201527f74696f6e206973206e6f74206120636f6e747261637400000000000000000000606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60005b8381101562000407578181015183820152602001620003ed565b8381111562000417576000848401525b50505050565b61084b806200042d6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c3578063f851a440146100e35761005d565b3661005d5761005b6100f8565b005b61005b6100f8565b34801561007157600080fd5b5061005b610080366004610548565b610112565b61005b610093366004610562565b61014c565b3480156100a457600080fd5b506100ad6101c9565b6040516100ba91906105fc565b60405180910390f35b3480156100cf57600080fd5b5061005b6100de366004610548565b610206565b3480156100ef57600080fd5b506100ad61029f565b610100610300565b61011061010b610341565b610366565b565b61011a61038a565b6001600160a01b0316336001600160a01b031614156101415761013c816103af565b610149565b6101496100f8565b50565b61015461038a565b6001600160a01b0316336001600160a01b031614156101bc57610176836103af565b6101b68383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102ca92505050565b506101c4565b6101c46100f8565b505050565b60006101d361038a565b6001600160a01b0316336001600160a01b031614156101fb576101f4610341565b9050610203565b6102036100f8565b90565b61020e61038a565b6001600160a01b0316336001600160a01b03161415610141576001600160a01b0381166102565760405162461bcd60e51b815260040161024d9061065d565b60405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61027f61038a565b8260405161028e929190610610565b60405180910390a161013c816103ef565b60006102a961038a565b6001600160a01b0316336001600160a01b031614156101fb576101f461038a565b60606102ef83836040518060600160405280602781526020016107ef60279139610413565b9392505050565b803b15155b919050565b61030861038a565b6001600160a01b0316336001600160a01b031614156103395760405162461bcd60e51b815260040161024d90610756565b610110610110565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610385573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6103b8816104af565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b606061041e846102f6565b61043a5760405162461bcd60e51b815260040161024d90610710565b600080856001600160a01b03168560405161045591906105e0565b600060405180830381855af49150503d8060008114610490576040519150601f19603f3d011682016040523d82523d6000602084013e610495565b606091505b50915091506104a58282866104f8565b9695505050505050565b6104b8816102f6565b6104d45760405162461bcd60e51b815260040161024d906106ba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b606083156105075750816102ef565b8251156105175782518084602001fd5b8160405162461bcd60e51b815260040161024d919061062a565b80356001600160a01b03811681146102fb57600080fd5b600060208284031215610559578081fd5b6102ef82610531565b600080600060408486031215610576578182fd5b61057f84610531565b9250602084013567ffffffffffffffff8082111561059b578384fd5b818601915086601f8301126105ae578384fd5b8135818111156105bc578485fd5b8760208285010111156105cd578485fd5b6020830194508093505050509250925092565b600082516105f28184602087016107be565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006020825282518060208401526106498160408501602087016107be565b601f01601f19169190910160400192915050565b6020808252603a908201527f5472616e73706172656e745570677261646561626c6550726f78793a206e657760408201527f2061646d696e20697320746865207a65726f2061646472657373000000000000606082015260800190565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e74616040820152751d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd60521b606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60208082526042908201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60408201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606082015261195d60f21b608082015260a00190565b60005b838110156107d95781810151838201526020016107c1565b838111156107e8576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209ba77a19de177ea34b608207423a21765cca1077e9d39a414a7175e09fb147e464736f6c63430007060033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c3578063f851a440146100e35761005d565b3661005d5761005b6100f8565b005b61005b6100f8565b34801561007157600080fd5b5061005b610080366004610548565b610112565b61005b610093366004610562565b61014c565b3480156100a457600080fd5b506100ad6101c9565b6040516100ba91906105fc565b60405180910390f35b3480156100cf57600080fd5b5061005b6100de366004610548565b610206565b3480156100ef57600080fd5b506100ad61029f565b610100610300565b61011061010b610341565b610366565b565b61011a61038a565b6001600160a01b0316336001600160a01b031614156101415761013c816103af565b610149565b6101496100f8565b50565b61015461038a565b6001600160a01b0316336001600160a01b031614156101bc57610176836103af565b6101b68383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102ca92505050565b506101c4565b6101c46100f8565b505050565b60006101d361038a565b6001600160a01b0316336001600160a01b031614156101fb576101f4610341565b9050610203565b6102036100f8565b90565b61020e61038a565b6001600160a01b0316336001600160a01b03161415610141576001600160a01b0381166102565760405162461bcd60e51b815260040161024d9061065d565b60405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61027f61038a565b8260405161028e929190610610565b60405180910390a161013c816103ef565b60006102a961038a565b6001600160a01b0316336001600160a01b031614156101fb576101f461038a565b60606102ef83836040518060600160405280602781526020016107ef60279139610413565b9392505050565b803b15155b919050565b61030861038a565b6001600160a01b0316336001600160a01b031614156103395760405162461bcd60e51b815260040161024d90610756565b610110610110565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610385573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6103b8816104af565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b606061041e846102f6565b61043a5760405162461bcd60e51b815260040161024d90610710565b600080856001600160a01b03168560405161045591906105e0565b600060405180830381855af49150503d8060008114610490576040519150601f19603f3d011682016040523d82523d6000602084013e610495565b606091505b50915091506104a58282866104f8565b9695505050505050565b6104b8816102f6565b6104d45760405162461bcd60e51b815260040161024d906106ba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b606083156105075750816102ef565b8251156105175782518084602001fd5b8160405162461bcd60e51b815260040161024d919061062a565b80356001600160a01b03811681146102fb57600080fd5b600060208284031215610559578081fd5b6102ef82610531565b600080600060408486031215610576578182fd5b61057f84610531565b9250602084013567ffffffffffffffff8082111561059b578384fd5b818601915086601f8301126105ae578384fd5b8135818111156105bc578485fd5b8760208285010111156105cd578485fd5b6020830194508093505050509250925092565b600082516105f28184602087016107be565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006020825282518060208401526106498160408501602087016107be565b601f01601f19169190910160400192915050565b6020808252603a908201527f5472616e73706172656e745570677261646561626c6550726f78793a206e657760408201527f2061646d696e20697320746865207a65726f2061646472657373000000000000606082015260800190565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e74616040820152751d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd60521b606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60208082526042908201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60408201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606082015261195d60f21b608082015260a00190565b60005b838110156107d95781810151838201526020016107c1565b838111156107e8576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209ba77a19de177ea34b608207423a21765cca1077e9d39a414a7175e09fb147e464736f6c63430007060033",
  "devdoc": {
    "details": "This contract implements a proxy that is upgradeable by an admin. To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing], which can potentially be used in an attack, this contract uses the https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two things that go hand in hand: 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if that call matches one of the admin functions exposed by the proxy itself. 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the implementation. If the admin tries to call a function on the implementation it will fail with an error that says \"admin cannot fallback to proxy target\". These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to call a function from the proxy implementation. Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way, you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      }
    },
    "kind": "dev",
    "methods": {
      "admin()": {
        "details": "Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"
      },
      "changeAdmin(address)": {
        "details": "Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."
      },
      "constructor": {
        "details": "Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}."
      },
      "implementation()": {
        "details": "Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."
      }
    },
    "stateVariables": {
      "_ADMIN_SLOT": {
        "details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}