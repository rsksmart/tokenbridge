{
  "address": "0x8C83D4293570A27253E5E0B322E62A9e6216Ae75",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_logIndex",
          "type": "uint256"
        }
      ],
      "name": "AcceptedCrossTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAllowTokens",
          "type": "address"
        }
      ],
      "name": "AllowTokensChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_logIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_reciever",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_userData",
          "type": "bytes"
        }
      ],
      "name": "Cross",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFederation",
          "type": "address"
        }
      ],
      "name": "FederationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeePercentageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newSideTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_granularity",
          "type": "uint256"
        }
      ],
      "name": "NewSideToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newSideTokenFactory",
          "type": "address"
        }
      ],
      "name": "SideTokenFactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isUpgrading",
          "type": "bool"
        }
      ],
      "name": "Upgrading",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wrappedCurrency",
          "type": "address"
        }
      ],
      "name": "WrappedCurrencyChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__Pausable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__PauserRol_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_logIndex",
          "type": "uint32"
        }
      ],
      "name": "acceptTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowTokens",
      "outputs": [
        {
          "internalType": "contract IAllowTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAllowTokens",
          "type": "address"
        }
      ],
      "name": "changeAllowTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFederation",
          "type": "address"
        }
      ],
      "name": "changeFederation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSideTokenFactory",
          "type": "address"
        }
      ],
      "name": "changeSideTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct IBridge.ClaimData",
          "name": "_claimData",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct IBridge.ClaimData",
          "name": "_claimData",
          "type": "tuple"
        }
      ],
      "name": "claimFallback",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "logIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct IBridge.ClaimData",
          "name": "_claimData",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "claimGasless",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_originalTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_originalTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenName",
          "type": "string"
        }
      ],
      "name": "createSideToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentageDivider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFederation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_logIndex",
          "type": "uint32"
        }
      ],
      "name": "getTransactionDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "hasBeenClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "hasCrossed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_federation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sideTokenFactory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbolPrefix",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgrading",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "knownTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mappedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "originalTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "originalTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenToUse",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveTokensTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "senderAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isUpgrading",
          "type": "bool"
        }
      ],
      "name": "setUpgrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedCurrency",
          "type": "address"
        }
      ],
      "name": "setWrappedCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideTokenFactory",
      "outputs": [
        {
          "internalType": "contract ISideTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbolPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transactionsDataHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedCurrency",
      "outputs": [
        {
          "internalType": "contract IWrapped",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3594c5a36d75a68bbe47442413cf5b7ad0d9b6d9f5b32ab66ae0f45ccb19bbc5",
  "receipt": {
    "to": null,
    "from": "0xEAC27e59F8a71613137E9C5D475D05c7D4d198e8",
    "contractAddress": "0x8C83D4293570A27253E5E0B322E62A9e6216Ae75",
    "transactionIndex": 7,
    "gasUsed": "3729007",
    "logsBloom": "0x
    "blockHash": "0x8921ff611729e062611917ec9a8822cd5254375c74e764d1506218b0efb4a97d",
    "transactionHash": "0x3594c5a36d75a68bbe47442413cf5b7ad0d9b6d9f5b32ab66ae0f45ccb19bbc5",
    "logs": [],
    "blockNumber": 13138221,
    "cumulativeGasUsed": "5112617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f52509726bfa47814717ee9bb8fccc02",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_logIndex\",\"type\":\"uint256\"}],\"name\":\"AcceptedCrossTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAllowTokens\",\"type\":\"address\"}],\"name\":\"AllowTokensChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_logIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"Cross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFederation\",\"type\":\"address\"}],\"name\":\"FederationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newSideTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_granularity\",\"type\":\"uint256\"}],\"name\":\"NewSideToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSideTokenFactory\",\"type\":\"address\"}],\"name\":\"SideTokenFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isUpgrading\",\"type\":\"bool\"}],\"name\":\"Upgrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wrappedCurrency\",\"type\":\"address\"}],\"name\":\"WrappedCurrencyChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__Pausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__PauserRol_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_logIndex\",\"type\":\"uint32\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTokens\",\"outputs\":[{\"internalType\":\"contract IAllowTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAllowTokens\",\"type\":\"address\"}],\"name\":\"changeAllowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFederation\",\"type\":\"address\"}],\"name\":\"changeFederation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSideTokenFactory\",\"type\":\"address\"}],\"name\":\"changeSideTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct IBridge.ClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct IBridge.ClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"}],\"name\":\"claimFallback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct IBridge.ClaimData\",\"name\":\"_claimData\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"claimGasless\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_originalTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_originalTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenName\",\"type\":\"string\"}],\"name\":\"createSideToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentageDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFederation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_logIndex\",\"type\":\"uint32\"}],\"name\":\"getTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"hasBeenClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"hasCrossed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_federation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sideTokenFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbolPrefix\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"knownTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mappedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"originalTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"originalTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToUse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveTokensTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"senderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isUpgrading\",\"type\":\"bool\"}],\"name\":\"setUpgrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedCurrency\",\"type\":\"address\"}],\"name\":\"setWrappedCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideTokenFactory\",\"outputs\":[{\"internalType\":\"contract ISideTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactionsDataHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedCurrency\",\"outputs\":[{\"internalType\":\"contract IWrapped\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__Pausable_init(address)\":{\"details\":\"Initializes the contract in unpaused state. Assigns the Pauser role to the deployer.\"},\"initialize(address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Called by a pauser to pause, triggers stopped state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptTransfer(address,address,address,uint256,bytes32,bytes32,uint32)\":{\"notice\":\"Accepts the transaction from the other chain that was voted and sent by the Federation contract\"},\"claim((address,uint256,bytes32,bytes32,uint32))\":{\"notice\":\"Claims the crossed transaction using the hash, this sends the funds to the address indicated in\"},\"depositTo(address)\":{\"notice\":\"Use network currency and cross it.\"},\"receiveTokensTo(address,address,uint256)\":{\"notice\":\"ERC-20 tokens approve and transferFrom pattern See https://eips.ethereum.org/EIPS/eip-20#transferfrom\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction See https://eips.ethereum.org/EIPS/eip-777#motivation for details\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n// Import base Initializable contract\\nimport \\\"../zeppelin/upgradable/Initializable.sol\\\";\\n// Import interface and library from OpenZeppelin contracts\\nimport \\\"../zeppelin/upgradable/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../zeppelin/upgradable/lifecycle/UpgradablePausable.sol\\\";\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableOwnable.sol\\\";\\n\\nimport \\\"../zeppelin/introspection/IERC1820Registry.sol\\\";\\nimport \\\"../zeppelin/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"../zeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../zeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../zeppelin/utils/Address.sol\\\";\\nimport \\\"../zeppelin/math/SafeMath.sol\\\";\\nimport \\\"../zeppelin/token/ERC777/IERC777.sol\\\";\\n\\nimport \\\"../lib/LibEIP712.sol\\\";\\nimport \\\"../lib/LibUtils.sol\\\";\\n\\nimport \\\"../interface/IBridge.sol\\\";\\nimport \\\"../interface/ISideToken.sol\\\";\\nimport \\\"../interface/ISideTokenFactory.sol\\\";\\nimport \\\"../interface/IAllowTokens.sol\\\";\\nimport \\\"../interface/IWrapped.sol\\\";\\n\\n// solhint-disable-next-line max-states-count\\ncontract Bridge is Initializable, IBridge, IERC777Recipient, UpgradablePausable, UpgradableOwnable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address constant internal NULL_ADDRESS = address(0);\\n    bytes32 constant internal NULL_HASH = bytes32(0);\\n    IERC1820Registry constant internal ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    address internal federation;\\n    uint256 internal feePercentage;\\n    string public symbolPrefix;\\n    // replaces uint256 internal _depprecatedLastDay;\\n    bytes32 public domainSeparator;\\n    uint256 internal _deprecatedSpentToday;\\n\\n    mapping (address => address) public mappedTokens; // OriginalToken => SideToken\\n    mapping (address => address) public originalTokens; // SideToken => OriginalToken\\n    mapping (address => bool) public knownTokens; // OriginalToken => true\\n    mapping (bytes32 => bool) public claimed; // transactionDataHash => true // previously named processed\\n    IAllowTokens public allowTokens;\\n    ISideTokenFactory public sideTokenFactory;\\n    //Bridge_v1 variables\\n    bool public isUpgrading;\\n    // Percentage with up to 2 decimals\\n    uint256 constant public feePercentageDivider = 10000; // solhint-disable-line const-name-snakecase\\n    //Bridge_v3 variables\\n    bytes32 constant internal _erc777Interface = keccak256(\\\"ERC777Token\\\"); // solhint-disable-line const-name-snakecase\\n    IWrapped public wrappedCurrency;\\n    mapping (bytes32 => bytes32) public transactionsDataHashes; // transactionHash => transactionDataHash\\n    mapping (bytes32 => address) public originalTokenAddresses; // transactionHash => originalTokenAddress\\n    mapping (bytes32 => address) public senderAddresses; // transactionHash => senderAddress\\n\\n    // keccak256(\\\"Claim(address to,uint256 amount,bytes32 transactionHash,address relayer,uint256 fee,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant CLAIM_TYPEHASH = 0xf18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd80433;\\n    mapping(address => uint) public nonces;\\n\\n    event AllowTokensChanged(address _newAllowTokens);\\n    event FederationChanged(address _newFederation);\\n    event SideTokenFactoryChanged(address _newSideTokenFactory);\\n    event Upgrading(bool _isUpgrading);\\n    event WrappedCurrencyChanged(address _wrappedCurrency);\\n\\n    function initialize(\\n        address _manager,\\n        address _federation,\\n        address _allowTokens,\\n        address _sideTokenFactory,\\n        string memory _symbolPrefix\\n    ) public initializer {\\n        UpgradableOwnable.initialize(_manager);\\n        UpgradablePausable.__Pausable_init(_manager);\\n        symbolPrefix = _symbolPrefix;\\n        allowTokens = IAllowTokens(_allowTokens);\\n        sideTokenFactory = ISideTokenFactory(_sideTokenFactory);\\n        federation = _federation;\\n        //keccak256(\\\"ERC777TokensRecipient\\\")\\n        ERC1820.setInterfaceImplementer(address(this), 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b, address(this));\\n        initDomainSeparator();\\n    }\\n\\n    receive() external payable {\\n        // The fallback function is needed to use WRBTC\\n        assert(_msgSender() == address(wrappedCurrency));\\n    }\\n\\n    function version() override external pure returns (string memory) {\\n        return \\\"v3\\\";\\n    }\\n\\n    function initDomainSeparator() public {\\n        uint chainId;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        domainSeparator = LibEIP712.hashEIP712Domain(\\n            \\\"RSK Token Bridge\\\",\\n            \\\"1\\\",\\n            chainId,\\n            address(this)\\n        );\\n    }\\n\\n    modifier whenNotUpgrading() {\\n        require(!isUpgrading, \\\"Bridge: Upgrading\\\");\\n        _;\\n    }\\n\\n    function acceptTransfer(\\n        address _originalTokenAddress,\\n        address payable _from,\\n        address payable _to,\\n        uint256 _amount,\\n        bytes32 _blockHash,\\n        bytes32 _transactionHash,\\n        uint32 _logIndex\\n    ) external whenNotPaused nonReentrant override {\\n        require(_msgSender() == federation, \\\"Bridge: Not Federation\\\");\\n        require(knownTokens[_originalTokenAddress] ||\\n            mappedTokens[_originalTokenAddress] != NULL_ADDRESS,\\n            \\\"Bridge: Unknown token\\\"\\n        );\\n        require(_to != NULL_ADDRESS, \\\"Bridge: Null To\\\");\\n        require(_amount > 0, \\\"Bridge: Amount 0\\\");\\n        require(_blockHash != NULL_HASH, \\\"Bridge: Null BlockHash\\\");\\n        require(_transactionHash != NULL_HASH, \\\"Bridge: Null TxHash\\\");\\n        require(transactionsDataHashes[_transactionHash] == bytes32(0), \\\"Bridge: Already accepted\\\");\\n\\n        bytes32 _transactionDataHash = getTransactionDataHash(\\n            _to,\\n            _amount,\\n            _blockHash,\\n            _transactionHash,\\n            _logIndex\\n        );\\n        // Do not remove, claimed also has the previously processed using the older bridge version\\n        // https://github.com/rsksmart/tokenbridge/blob/TOKENBRIDGE-1.2.0/bridge/contracts/Bridge.sol#L41\\n        require(!claimed[_transactionDataHash], \\\"Bridge: Already claimed\\\");\\n\\n        transactionsDataHashes[_transactionHash] = _transactionDataHash;\\n        originalTokenAddresses[_transactionHash] = _originalTokenAddress;\\n        senderAddresses[_transactionHash] = _from;\\n\\n        emit AcceptedCrossTransfer(\\n            _transactionHash,\\n            _originalTokenAddress,\\n            _to,\\n            _from,\\n            _amount,\\n            _blockHash,\\n            _logIndex\\n        );\\n    }\\n\\n\\n    function createSideToken(\\n        uint256 _typeId,\\n        address _originalTokenAddress,\\n        uint8 _originalTokenDecimals,\\n        string calldata _originalTokenSymbol,\\n        string calldata _originalTokenName\\n    ) external onlyOwner {\\n        require(_originalTokenAddress != NULL_ADDRESS, \\\"Bridge: Null token\\\");\\n        address sideToken = mappedTokens[_originalTokenAddress];\\n        require(sideToken == NULL_ADDRESS, \\\"Bridge: Already exists\\\");\\n        uint256 granularity = LibUtils.decimalsToGranularity(_originalTokenDecimals);\\n        string memory newSymbol = string(abi.encodePacked(symbolPrefix, _originalTokenSymbol));\\n\\n        // Create side token\\n        sideToken = sideTokenFactory.createSideToken(_originalTokenName, newSymbol, granularity);\\n\\n        mappedTokens[_originalTokenAddress] = sideToken;\\n        originalTokens[sideToken] = _originalTokenAddress;\\n        allowTokens.setToken(sideToken, _typeId);\\n\\n        emit NewSideToken(sideToken, _originalTokenAddress, newSymbol, granularity);\\n    }\\n\\n    function claim(ClaimData calldata _claimData)\\n    external override returns (uint256 receivedAmount) {\\n\\n        receivedAmount = _claim(\\n            _claimData,\\n            _claimData.to,\\n            payable(address(0)),\\n            0\\n        );\\n        return receivedAmount;\\n    }\\n\\n    function claimFallback(ClaimData calldata _claimData)\\n    external override returns (uint256 receivedAmount) {\\n        require(_msgSender() == senderAddresses[_claimData.transactionHash],\\\"Bridge: invalid sender\\\");\\n        receivedAmount = _claim(\\n            _claimData,\\n            _msgSender(),\\n            payable(address(0)),\\n            0\\n        );\\n        return receivedAmount;\\n    }\\n\\n    function getDigest(\\n        ClaimData memory _claimData,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _deadline\\n    ) internal returns (bytes32) {\\n        return LibEIP712.hashEIP712Message(\\n            domainSeparator,\\n            keccak256(\\n                abi.encode(\\n                    CLAIM_TYPEHASH,\\n                    _claimData.to,\\n                    _claimData.amount,\\n                    _claimData.transactionHash,\\n                    _relayer,\\n                    _fee,\\n                    nonces[_claimData.to]++,\\n                    _deadline\\n                )\\n            )\\n        );\\n    }\\n\\n    // Inspired by https://github.com/dapphub/ds-dach/blob/master/src/dach.sol\\n    function claimGasless(\\n        ClaimData calldata _claimData,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override returns (uint256 receivedAmount) {\\n        require(_deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\"); // solhint-disable-line not-rely-on-time\\n\\n        bytes32 digest = getDigest(_claimData, _relayer, _fee, _deadline);\\n        address recoveredAddress = ecrecover(digest, _v, _r, _s);\\n        require(_claimData.to != address(0) && recoveredAddress == _claimData.to, \\\"Bridge: INVALID_SIGNATURE\\\");\\n\\n        receivedAmount = _claim(\\n            _claimData,\\n            _claimData.to,\\n            _relayer,\\n            _fee\\n        );\\n        return receivedAmount;\\n    }\\n\\n    function _claim(\\n        ClaimData calldata _claimData,\\n        address payable _reciever,\\n        address payable _relayer,\\n        uint256 _fee\\n    ) internal nonReentrant returns (uint256 receivedAmount) {\\n        address originalTokenAddress = originalTokenAddresses[_claimData.transactionHash];\\n        require(originalTokenAddress != NULL_ADDRESS, \\\"Bridge: Tx not crossed\\\");\\n\\n        bytes32 transactionDataHash = getTransactionDataHash(\\n            _claimData.to,\\n            _claimData.amount,\\n            _claimData.blockHash,\\n            _claimData.transactionHash,\\n            _claimData.logIndex\\n        );\\n        require(transactionsDataHashes[_claimData.transactionHash] == transactionDataHash, \\\"Bridge: Wrong transactionDataHash\\\");\\n        require(!claimed[transactionDataHash], \\\"Bridge: Already claimed\\\");\\n\\n        claimed[transactionDataHash] = true;\\n        if (knownTokens[originalTokenAddress]) {\\n            receivedAmount =_claimCrossBackToToken(\\n                originalTokenAddress,\\n                _reciever,\\n                _claimData.amount,\\n                _relayer,\\n                _fee\\n            );\\n        } else {\\n            receivedAmount =_claimCrossToSideToken(\\n                originalTokenAddress,\\n                _reciever,\\n                _claimData.amount,\\n                _relayer,\\n                _fee\\n            );\\n        }\\n        emit Claimed(\\n            _claimData.transactionHash,\\n            originalTokenAddress,\\n            _claimData.to,\\n            senderAddresses[_claimData.transactionHash],\\n            _claimData.amount,\\n            _claimData.blockHash,\\n            _claimData.logIndex,\\n            _reciever,\\n            _relayer,\\n            _fee\\n        );\\n        return receivedAmount;\\n    }\\n\\n    function _claimCrossToSideToken(\\n        address _originalTokenAddress,\\n        address payable _receiver,\\n        uint256 _amount,\\n        address payable _relayer,\\n        uint256 _fee\\n    ) internal returns (uint256 receivedAmount) {\\n        address sideToken = mappedTokens[_originalTokenAddress];\\n        uint256 granularity = IERC777(sideToken).granularity();\\n        uint256 formattedAmount = _amount.mul(granularity);\\n        require(_fee <= formattedAmount, \\\"Bridge: fee too high\\\");\\n        receivedAmount = formattedAmount - _fee;\\n        ISideToken(sideToken).mint(_receiver, receivedAmount, \\\"\\\", \\\"\\\");\\n        if(_fee > 0) {\\n            ISideToken(sideToken).mint(_relayer, _fee, \\\"\\\", \\\"relayer fee\\\");\\n        }\\n        return receivedAmount;\\n    }\\n\\n    function _claimCrossBackToToken(\\n        address _originalTokenAddress,\\n        address payable _receiver,\\n        uint256 _amount,\\n        address payable _relayer,\\n        uint256 _fee\\n    ) internal returns (uint256 receivedAmount) {\\n        uint256 decimals = LibUtils.getDecimals(_originalTokenAddress);\\n        //As side tokens are ERC777 they will always have 18 decimals\\n        uint256 formattedAmount = _amount.div(uint256(10) ** (18 - decimals));\\n        require(_fee <= formattedAmount, \\\"Bridge: fee too high\\\");\\n        receivedAmount = formattedAmount - _fee;\\n        if(address(wrappedCurrency) == _originalTokenAddress) {\\n            wrappedCurrency.withdraw(formattedAmount);\\n            (bool success, ) = _receiver.call{value:receivedAmount, gas:23000}(\\\"\\\");\\n            require(success, \\\"Bridge: transfer fail\\\");\\n            if(_fee > 0) {\\n                (success, ) = _relayer.call{value:_fee, gas:23000}(\\\"\\\");\\n                require(success, \\\"Bridge: transfer fee fail\\\");\\n            }\\n        } else {\\n            IERC20(_originalTokenAddress).safeTransfer(_receiver, receivedAmount);\\n            if(_fee > 0) {\\n                IERC20(_originalTokenAddress).safeTransfer(_relayer, _fee);\\n            }\\n        }\\n        return receivedAmount;\\n    }\\n\\n    /**\\n     * ERC-20 tokens approve and transferFrom pattern\\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\\n     */\\n    function receiveTokensTo(address tokenToUse, address to, uint256 amount) override public {\\n        address sender = _msgSender();\\n        //Transfer the tokens on IERC20, they should be already Approved for the bridge Address to use them\\n        IERC20(tokenToUse).safeTransferFrom(sender, address(this), amount);\\n        crossTokens(tokenToUse, sender, to, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * Use network currency and cross it.\\n     */\\n    function depositTo(address to) override external payable {\\n        address sender = _msgSender();\\n        require(address(wrappedCurrency) != NULL_ADDRESS, \\\"Bridge: wrappedCurrency empty\\\");\\n        wrappedCurrency.deposit{ value: msg.value }();\\n        crossTokens(address(wrappedCurrency), sender, to, msg.value, \\\"\\\");\\n    }\\n\\n    /**\\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\\n     */\\n    function tokensReceived (\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata\\n    ) external override(IBridge, IERC777Recipient){\\n        //Hook from ERC777address\\n        if(operator == address(this)) return; // Avoid loop from bridge calling to ERC77transferFrom\\n        require(to == address(this), \\\"Bridge: Not to this address\\\");\\n        address tokenToUse = _msgSender();\\n        require(ERC1820.getInterfaceImplementer(tokenToUse, _erc777Interface) != NULL_ADDRESS, \\\"Bridge: Not ERC777 token\\\");\\n        require(userData.length != 0 || !from.isContract(), \\\"Bridge: Specify receiver address in data\\\");\\n        address receiver = userData.length == 0 ? from : LibUtils.bytesToAddress(userData);\\n        crossTokens(tokenToUse, from, receiver, amount, userData);\\n    }\\n\\n    function crossTokens(address tokenToUse, address from, address to, uint256 amount, bytes memory userData)\\n    internal whenNotUpgrading whenNotPaused nonReentrant {\\n        knownTokens[tokenToUse] = true;\\n        uint256 fee = amount.mul(feePercentage).div(feePercentageDivider);\\n        uint256 amountMinusFees = amount.sub(fee);\\n        uint8 decimals = LibUtils.getDecimals(tokenToUse);\\n        uint formattedAmount = amount;\\n        if(decimals != 18) {\\n            formattedAmount = amount.mul(uint256(10)**(18-decimals));\\n        }\\n        // We consider the amount before fees converted to 18 decimals to check the limits\\n        // updateTokenTransfer revert if token not allowed\\n        allowTokens.updateTokenTransfer(tokenToUse, formattedAmount);\\n        address originalTokenAddress = tokenToUse;\\n        if (originalTokens[tokenToUse] != NULL_ADDRESS) {\\n            //Side Token Crossing\\n            originalTokenAddress = originalTokens[tokenToUse];\\n            uint256 granularity = LibUtils.getGranularity(tokenToUse);\\n            uint256 modulo = amountMinusFees.mod(granularity);\\n            fee = fee.add(modulo);\\n            amountMinusFees = amountMinusFees.sub(modulo);\\n            IERC777(tokenToUse).burn(amountMinusFees, userData);\\n        }\\n\\n        emit Cross(\\n            originalTokenAddress,\\n            from,\\n            to,\\n            amountMinusFees,\\n            userData\\n        );\\n\\n        if (fee > 0) {\\n            //Send the payment to the MultiSig of the Federation\\n            IERC20(tokenToUse).safeTransfer(owner(), fee);\\n        }\\n    }\\n\\n    function getTransactionDataHash(\\n        address _to,\\n        uint256 _amount,\\n        bytes32 _blockHash,\\n        bytes32 _transactionHash,\\n        uint32 _logIndex\\n    )\\n        public pure override returns(bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_blockHash, _transactionHash, _to, _amount, _logIndex));\\n    }\\n\\n    function setFeePercentage(uint amount) external onlyOwner {\\n        require(amount < (feePercentageDivider/10), \\\"Bridge: bigger than 10%\\\");\\n        feePercentage = amount;\\n        emit FeePercentageChanged(feePercentage);\\n    }\\n\\n    function getFeePercentage() external view override returns(uint) {\\n        return feePercentage;\\n    }\\n\\n    function changeFederation(address newFederation) external onlyOwner {\\n        require(newFederation != NULL_ADDRESS, \\\"Bridge: Federation is empty\\\");\\n        federation = newFederation;\\n        emit FederationChanged(federation);\\n    }\\n\\n\\n    function changeAllowTokens(address newAllowTokens) external onlyOwner {\\n        require(newAllowTokens != NULL_ADDRESS, \\\"Bridge: AllowTokens is empty\\\");\\n        allowTokens = IAllowTokens(newAllowTokens);\\n        emit AllowTokensChanged(newAllowTokens);\\n    }\\n\\n    function getFederation() external view returns(address) {\\n        return federation;\\n    }\\n\\n    function changeSideTokenFactory(address newSideTokenFactory) external onlyOwner {\\n        require(newSideTokenFactory != NULL_ADDRESS, \\\"Bridge: SideTokenFactory is empty\\\");\\n        sideTokenFactory = ISideTokenFactory(newSideTokenFactory);\\n        emit SideTokenFactoryChanged(newSideTokenFactory);\\n    }\\n\\n    function setUpgrading(bool _isUpgrading) external onlyOwner {\\n        isUpgrading = _isUpgrading;\\n        emit Upgrading(isUpgrading);\\n    }\\n\\n    function setWrappedCurrency(address _wrappedCurrency) external onlyOwner {\\n        require(_wrappedCurrency != NULL_ADDRESS, \\\"Bridge: wrapp is empty\\\");\\n        wrappedCurrency = IWrapped(_wrappedCurrency);\\n        emit WrappedCurrencyChanged(_wrappedCurrency);\\n    }\\n\\n    function hasCrossed(bytes32 transactionHash) public view returns (bool) {\\n        return transactionsDataHashes[transactionHash] != bytes32(0);\\n    }\\n\\n    function hasBeenClaimed(bytes32 transactionHash) public view returns (bool) {\\n        return claimed[transactionsDataHashes[transactionHash]];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdcbfb5796484e5126f190585235641f51084e252ab091f66b0922b02c5befa03\",\"license\":\"MIT\"},\"contracts/interface/IAllowTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\ninterface IAllowTokens {\\n\\n    struct Limits {\\n        uint256 min;\\n        uint256 max;\\n        uint256 daily;\\n        uint256 mediumAmount;\\n        uint256 largeAmount;\\n    }\\n\\n    struct TokenInfo {\\n        bool allowed;\\n        uint256 typeId;\\n        uint256 spentToday;\\n        uint256 lastDay;\\n    }\\n\\n    struct TypeInfo {\\n        string description;\\n        Limits limits;\\n    }\\n\\n    struct TokensAndType {\\n        address token;\\n        uint256 typeId;\\n    }\\n\\n    function version() external pure returns (string memory);\\n\\n    function getInfoAndLimits(address token) external view returns (TokenInfo memory info, Limits memory limit);\\n\\n    function calcMaxWithdraw(address token) external view returns (uint256 maxWithdraw);\\n\\n    function getTypesLimits() external view returns(Limits[] memory limits);\\n\\n    function getTypeDescriptionsLength() external view returns(uint256);\\n\\n    function getTypeDescriptions() external view returns(string[] memory descriptions);\\n\\n    function setToken(address token, uint256 typeId) external;\\n\\n    function getConfirmations() external view returns (uint256 smallAmount, uint256 mediumAmount, uint256 largeAmount);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function updateTokenTransfer(address token, uint256 amount) external;\\n}\",\"keccak256\":\"0x5a2aaa285c400917cd72fafe61ce409f200c3fc13d984843bccfb97563489a61\",\"license\":\"MIT\"},\"contracts/interface/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\ninterface IBridge {\\n\\n    struct ClaimData {\\n        address payable to;\\n        uint256 amount;\\n        bytes32 blockHash;\\n        bytes32 transactionHash;\\n        uint32 logIndex;\\n    }\\n\\n    function version() external pure returns (string memory);\\n\\n    function getFeePercentage() external view returns(uint);\\n\\n    /**\\n     * ERC-20 tokens approve and transferFrom pattern\\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\\n     */\\n    function receiveTokensTo(address tokenToUse, address to, uint256 amount) external;\\n\\n    /**\\n     * Use network currency and cross it.\\n     */\\n    function depositTo(address to) external payable;\\n\\n    /**\\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\\n     */\\n    function tokensReceived (\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * Accepts the transaction from the other chain that was voted and sent by the Federation contract\\n     */\\n    function acceptTransfer(\\n        address _originalTokenAddress,\\n        address payable _from,\\n        address payable _to,\\n        uint256 _amount,\\n        bytes32 _blockHash,\\n        bytes32 _transactionHash,\\n        uint32 _logIndex\\n    ) external;\\n\\n    /**\\n     * Claims the crossed transaction using the hash, this sends the funds to the address indicated in\\n     */\\n    function claim(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\\n\\n    function claimFallback(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\\n\\n    function claimGasless(\\n        ClaimData calldata _claimData,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 receivedAmount);\\n\\n    function getTransactionDataHash(\\n        address _to,\\n        uint256 _amount,\\n        bytes32 _blockHash,\\n        bytes32 _transactionHash,\\n        uint32 _logIndex\\n    ) external returns(bytes32);\\n\\n    event Cross(\\n        address indexed _tokenAddress,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _userData\\n    );\\n    event NewSideToken(\\n        address indexed _newSideTokenAddress,\\n        address indexed _originalTokenAddress,\\n        string _newSymbol,\\n        uint256 _granularity\\n    );\\n    event AcceptedCrossTransfer(\\n        bytes32 indexed _transactionHash,\\n        address indexed _originalTokenAddress,\\n        address indexed _to,\\n        address  _from,\\n        uint256 _amount,\\n        bytes32 _blockHash,\\n        uint256 _logIndex\\n    );\\n    event FeePercentageChanged(uint256 _amount);\\n    event Claimed(\\n        bytes32 indexed _transactionHash,\\n        address indexed _originalTokenAddress,\\n        address indexed _to,\\n        address _sender,\\n        uint256 _amount,\\n        bytes32 _blockHash,\\n        uint256 _logIndex,\\n        address _reciever,\\n        address _relayer,\\n        uint256 _fee\\n    );\\n}\",\"keccak256\":\"0x188bdd14d3e1d1eaddd5d86a4d957a8c6a7e6c4571058b6db13a974db3ab5f39\",\"license\":\"MIT\"},\"contracts/interface/ISideToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface ISideToken {\\n    function mint(address account, uint256 amount, bytes calldata userData, bytes calldata operatorData) external;\\n}\",\"keccak256\":\"0xf01477bc820f57970d7d8384417ac0aead22bd336077e371c48da917270013b4\",\"license\":\"MIT\"},\"contracts/interface/ISideTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface ISideTokenFactory {\\n\\n    function createSideToken(string calldata name, string calldata symbol, uint256 granularity) external returns(address);\\n\\n    event SideTokenCreated(address indexed sideToken, string symbol, uint256 granularity);\\n}\",\"keccak256\":\"0x550c1af5fa52739ac28f58c36f04ba634213c5307ae95b412e41f3ee1d2e7217\",\"license\":\"MIT\"},\"contracts/interface/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\ninterface IWrapped {\\n    function balanceOf(address) external returns(uint);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad)\\n        external\\n        returns (bool);\\n}\",\"keccak256\":\"0x2d8a99b6a030e37f01dba86db80e3bd29d1d01e592e399c8635df3fb636ec0d1\",\"license\":\"MIT\"},\"contracts/lib/LibEIP712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n// https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\nlibrary LibEIP712 {\\n\\n    // Hash of the EIP712 Domain Separator Schema\\n    // keccak256(abi.encodePacked(\\n    //     \\\"EIP712Domain(\\\",\\n    //     \\\"string name,\\\",\\n    //     \\\"string version,\\\",\\n    //     \\\"uint256 chainId,\\\",\\n    //     \\\"address verifyingContract\\\",\\n    //     \\\")\\\"\\n    // ))\\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev Calculates a EIP712 domain separator.\\n    /// @param name The EIP712 domain name.\\n    /// @param version The EIP712 domain version.\\n    /// @param verifyingContract The EIP712 verifying contract.\\n    /// @return result EIP712 domain separator.\\n    function hashEIP712Domain(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n        //     keccak256(bytes(name)),\\n        //     keccak256(bytes(version)),\\n        //     chainId,\\n        //     uint256(verifyingContract)\\n        // ))\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // Calculate hashes of dynamic data\\n            let nameHash := keccak256(add(name, 32), mload(name))\\n            let versionHash := keccak256(add(version, 32), mload(version))\\n\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // Store params in memory\\n            mstore(memPtr, schemaHash)\\n            mstore(add(memPtr, 32), nameHash)\\n            mstore(add(memPtr, 64), versionHash)\\n            mstore(add(memPtr, 96), chainId)\\n            mstore(add(memPtr, 128), verifyingContract)\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 160)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\n    ///                         with getDomainHash().\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return result EIP712 hash applied to the given EIP712 Domain.\\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x6116e22c413fc65e87bf7db958d5c1f301b493494813f76dce512f8254c3b012\",\"license\":\"MIT\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nlibrary LibUtils {\\n\\n    function decimalsToGranularity(uint8 decimals) internal pure returns (uint256) {\\n        require(decimals <= 18, \\\"LibUtils: Decimals not <= 18\\\");\\n        return uint256(10)**(18-decimals);\\n    }\\n\\n    function getDecimals(address tokenToUse) internal view returns (uint8) {\\n        //support decimals as uint256 or uint8\\n        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        require(success, \\\"LibUtils: No decimals\\\");\\n        // uint<M>: enc(X) is the big-endian encoding of X,\\n        //padded on the higher-order (left) side with zero-bytes such that the length is 32 bytes.\\n        return uint8(abi.decode(data, (uint256)));\\n    }\\n\\n    function getGranularity(address tokenToUse) internal view returns (uint256) {\\n        //support granularity if ERC777\\n        (bool success, bytes memory data) = tokenToUse.staticcall(abi.encodeWithSignature(\\\"granularity()\\\"));\\n        require(success, \\\"LibUtils: No granularity\\\");\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            addr := mload(add(bys,20))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc888bccaec06ac8103257667388d83bac9f2fe24cfc445676003088a5a339897\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xbc43be9319c563253600d0a1d7106572c9bfc1fbb623d133a1edfb7e60c845c4\",\"license\":\"MIT\"},\"contracts/zeppelin/access/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account doesn't have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0xfa806d08d8b499296b170e1cf6a8870bfb25fd4dbf67bca2e6b327f8fe5c2d1e\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as `account`'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `_account`.\\n     * - `_interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `_implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address _account, bytes32 _interfaceHash, address _implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `_interfaceHash` for `_account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `_interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `_account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address _account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x1b44f619ae588fd201e93b126b80576e1244ef468e8b4e54e62fbad6a805cc87\",\"license\":\"MIT\"},\"contracts/zeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x09ca2716452528a6e69ac9f83f874292a1e547630473f3133038314a2f16029e\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x1bc9527655c4be58541c2fb90c0a05952938961c289f505c70160f87e08aef33\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc22dd16f0cffdfddf9caa4643752b4b4e7fb41390f4a3ccb11b4eec501920980\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * [ERC1820 registry standard](https://eips.ethereum.org/EIPS/eip-1820) to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See `IERC1820Registry` and\\n * `ERC1820Implementer`.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n     *\\n     * Emits a `Sent` event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the `tokensReceived`\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See `IERC777Sender`.\\n     *\\n     * Emits a `Burned` event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See `operatorSend` and `operatorBurn`.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See `isOperatorFor`.\\n     *\\n     * Emits an `AuthorizedOperator` event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See `isOperatorFor` and `defaultOperators`.\\n     *\\n     * Emits a `RevokedOperator` event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if `authorizeOperator` was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * `revokeOperator`, in which case `isOperatorFor` will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n     *\\n     * Emits a `Sent` event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the `tokensReceived`\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See `IERC777Sender`.\\n     *\\n     * Emits a `Burned` event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    function decimals() external returns (uint8);\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x9ace3cf83443ae90a995a8e33652238fa2b5afb258897757f85467d5fb437c1a\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of `IERC777` tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\\n *\\n * See `IERC1820Registry` and `ERC1820Implementer`.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an `IERC777` token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * `IERC777.balanceOf`, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc8dae3544a459d13f23ba0c7737f6e279e06d83ef86b8f7a0318d83bcf4147e3\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || !initialized, \\\"Contract instance is already initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x3eeeb5ea6bf7d3458bb36acebd4268b406e6a1525e009d4d8a90626c277a37d1\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/access/roles/UpgradablePauserRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../Initializable.sol\\\";\\n\\nimport \\\"../../../GSN/Context.sol\\\";\\nimport \\\"../../../access/Roles.sol\\\";\\n\\ncontract UpgradablePauserRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    function __PauserRol_init(address sender) public initializer {\\n        if (!isPauser(sender)) {\\n            _addPauser(sender);\\n        }\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller doesn't have the role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x8944b1fc00760a83b652c14b9891d7e0a43b860fb13725480359e10979a23e15\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/lifecycle/UpgradablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../access/roles/UpgradablePauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract UpgradablePausable is Initializable, Context, UpgradablePauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    function __Pausable_init(address sender) public initializer {\\n        UpgradablePauserRole.__PauserRol_init(sender);\\n\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x97aa1a11fb3dc9d9e1478f846196f98296e46cc05202c986f6c60a3417951520\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradableOwnable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2e0e58f4a3991801550e6a52512a3c1bbcaa5cb824120c177cb6ec1b4fa0ce97\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard is Initializable {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    function initialize() public initializer {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: no reentrant allowed\\\");\\n    }\\n}\",\"keccak256\":\"0x55fdfe1504f54e18aaf3da306bfb46498d1baf54e371d14a3ace8a5adf25bbe1\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc67d0428addcf1cbef937166a7b8f28d4e1d6ecf0eaaff683501d25e8593dc28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614280806100206000396000f3fe6080604052600436106103025760003560e01c80638456cb5911610190578063c4d66de8116100dc578063e6fc774411610095578063f2fde38b1161006f578063f2fde38b14610891578063f698da25146108b1578063f74032f0146108c6578063fa0caa16146108e65761032d565b8063e6fc774414610847578063ea2170911461085c578063eb16136f146108715761032d565b8063c4d66de814610792578063ca07140c146107b2578063cc3c0f06146107d2578063d12e825d146107f2578063da67703714610807578063e6ede14d146108275761032d565b8063ae06c1b711610149578063b50277bb11610123578063b50277bb14610735578063b760faf914610755578063b794726214610768578063b86f60d21461077d5761032d565b8063ae06c1b7146106e0578063afad80ac14610700578063b0e1268e146107205761032d565b80638456cb591461064c5780638da5cb5b146106615780638f32d59b14610676578063916dc59d1461068b578063a53d6e6e146106ab578063adc5fb64146106c05761032d565b80634beea5061161024f5780636b0509b1116102085780637813bea2116101e25780637813bea2146105d75780637ecebe00146105f75780638129fc1c1461061757806382dc1ec41461062c5761032d565b80636b0509b1146105985780636ef8d66d146105ad578063715018a6146105c25761032d565b80634beea506146104ec57806354fd4d501461050c57806359a8a8671461052e5780635c975abb146105435780635d447129146105585780636a863191146105785761032d565b80632fb3b361116102bc5780633cf3058b116102965780633cf3058b1461046a5780633f4ba83a1461049757806342cdb2c6146104ac57806346fbf68e146104cc5761032d565b80632fb3b361146103fd5780633500c1dc1461041d57806337e761091461043d5761032d565b806223de2914610332578063026976191461035257806307c8f7b01461038857806311efbf61146103a857806320e3bb00146103bd5780632f3cca4e146103dd5761032d565b3661032d576041546001600160a01b031661031b610906565b6001600160a01b03161461032b57fe5b005b600080fd5b34801561033e57600080fd5b5061032b61034d36600461313e565b61090a565b34801561035e57600080fd5b5061037261036d3660046132b5565b610b0a565b60405161037f9190613714565b60405180910390f35b34801561039457600080fd5b5061032b6103a336600461327d565b610b1c565b3480156103b457600080fd5b50610372610b9a565b3480156103c957600080fd5b5061032b6103d83660046133e6565b610ba0565b3480156103e957600080fd5b5061032b6103f8366004612fbc565b610ddb565b34801561040957600080fd5b5061032b61041836600461306a565b610e64565b34801561042957600080fd5b5061032b610438366004612fbc565b610fd4565b34801561044957600080fd5b5061045d6104583660046132b5565b611069565b60405161037f9190613709565b34801561047657600080fd5b5061048a6104853660046132b5565b61108e565b60405161037f91906135a0565b3480156104a357600080fd5b5061032b6110a9565b3480156104b857600080fd5b5061032b6104c7366004612fbc565b61113c565b3480156104d857600080fd5b5061045d6104e7366004612fbc565b6111cf565b3480156104f857600080fd5b506103726105073660046132e8565b6111e2565b34801561051857600080fd5b506105216112fc565b60405161037f91906137d0565b34801561053a57600080fd5b50610521611318565b34801561054f57600080fd5b5061045d6113a6565b34801561056457600080fd5b5061045d610573366004612fbc565b6113af565b34801561058457600080fd5b5061032b610593366004612ff4565b6113c4565b3480156105a457600080fd5b50610372611628565b3480156105b957600080fd5b5061032b61164c565b3480156105ce57600080fd5b5061032b61165e565b3480156105e357600080fd5b5061032b6105f23660046131ec565b6116d2565b34801561060357600080fd5b50610372610612366004612fbc565b611715565b34801561062357600080fd5b5061032b611727565b34801561063857600080fd5b5061032b610647366004612fbc565b6117a1565b34801561065857600080fd5b5061032b6117d1565b34801561066d57600080fd5b5061048a611851565b34801561068257600080fd5b5061045d611865565b34801561069757600080fd5b5061032b6106a6366004612fbc565b611890565b3480156106b757600080fd5b5061048a611925565b3480156106cc57600080fd5b506103726106db3660046132cd565b611934565b3480156106ec57600080fd5b5061032b6106fb3660046132b5565b611993565b34801561070c57600080fd5b5061037261071b36600461322c565b611a0d565b34801561072c57600080fd5b5061048a611a49565b34801561074157600080fd5b506103726107503660046132cd565b611a58565b61032b610763366004612fbc565b611a6b565b34801561077457600080fd5b5061045d611b3a565b34801561078957600080fd5b5061048a611b4a565b34801561079e57600080fd5b5061032b6107ad366004612fbc565b611b59565b3480156107be57600080fd5b5061048a6107cd3660046132b5565b611c24565b3480156107de57600080fd5b5061045d6107ed3660046132b5565b611c3f565b3480156107fe57600080fd5b5061032b611c54565b34801561081357600080fd5b5061045d6108223660046132b5565b611cac565b34801561083357600080fd5b5061048a610842366004612fbc565b611cc0565b34801561085357600080fd5b50610372611cdb565b34801561086857600080fd5b5061048a611ce1565b34801561087d57600080fd5b5061032b61088c366004612fbc565b611cf0565b34801561089d57600080fd5b5061032b6108ac366004612fbc565b611d7b565b3480156108bd57600080fd5b50610372611da8565b3480156108d257600080fd5b5061048a6108e1366004612fbc565b611dae565b3480156108f257600080fd5b5061032b610901366004612fbc565b611dc9565b3390565b6001600160a01b03881630141561092057610b00565b6001600160a01b03861630146109515760405162461bcd60e51b815260040161094890613bc5565b60405180910390fd5b600061095b610906565b60405163555ddc6560e11b8152909150600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca906109ba9085907fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054906004016136a8565b60206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190612fd8565b6001600160a01b03161415610a315760405162461bcd60e51b815260040161094890613fbe565b83151580610a4e5750610a4c886001600160a01b0316611e64565b155b610a6a5760405162461bcd60e51b815260040161094890613c2c565b60008415610ab657610ab186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e6a92505050565b610ab8565b885b9050610afd828a838a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e7192505050565b50505b5050505050505050565b60426020526000908152604090205481565b610b24611865565b610b405760405162461bcd60e51b815260040161094890613e72565b6040805460ff60a01b1916600160a01b83151581029190911780835591517f983e436223c000a441c2443b394ca5fb4669a513fe86dc1dd44494047b514ad992610b8f9260ff91041690613709565b60405180910390a150565b60375490565b610ba8611865565b610bc45760405162461bcd60e51b815260040161094890613e72565b6001600160a01b038616610bea5760405162461bcd60e51b815260040161094890613e46565b6001600160a01b038087166000908152603b6020526040902054168015610c235760405162461bcd60e51b8152600401610948906140df565b6000610c2e87612124565b9050600060388787604051602001610c4893929190613524565b60408051601f1981840301815282825290546326d9e96360e01b83529092506001600160a01b0316906326d9e96390610c8b908890889086908890600401613781565b602060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190612fd8565b6001600160a01b03808b166000818152603b6020908152604080832080548688166001600160a01b03199182168117909255908452603c909252918290208054909116909217909155603f5490516378bf2b5360e01b815292955016906378bf2b5390610d509086908e906004016136a8565b600060405180830381600087803b158015610d6a57600080fd5b505af1158015610d7e573d6000803e3d6000fd5b50505050886001600160a01b0316836001600160a01b03167f2ef93c4e96a4ef0b19497ff60c9e7360a8734f3d2cd27ae5318e43851734d17f8385604051610dc79291906137e3565b60405180910390a350505050505050505050565b600054610100900460ff1680610df4575060005460ff16155b610e105760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015610e3b576000805460ff1961ff0019909116610100171660011790555b610e4482611cf0565b6034805460ff191690558015610e60576000805461ff00191690555b5050565b600054610100900460ff1680610e7d575060005460ff16155b610e995760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015610ec4576000805460ff1961ff0019909116610100171660011790555b610ecd86611b59565b610ed686610ddb565b8151610ee9906038906020850190612e98565b50603f80546001600160a01b038087166001600160a01b031992831617909255604080548684169083161781556036805493891693909216929092179055516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90610f809030907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9082906004016135b4565b600060405180830381600087803b158015610f9a57600080fd5b505af1158015610fae573d6000803e3d6000fd5b50505050610fba611c54565b8015610fcc576000805461ff00191690555b505050505050565b610fdc611865565b610ff85760405162461bcd60e51b815260040161094890613e72565b6001600160a01b03811661101e5760405162461bcd60e51b815260040161094890613b66565b604180546001600160a01b0319166001600160a01b0383161790556040517f0966c958966f6fac9ff807af074f8117eb2e9ce2b76390db7a158e9bdeb2485c90610b8f9083906135a0565b6000818152604260209081526040808320548352603e90915290205460ff165b919050565b6044602052600090815260409020546001600160a01b031681565b6110b46104e7610906565b6110d05760405162461bcd60e51b815260040161094890613abd565b60345460ff166110f25760405162461bcd60e51b81526004016109489061384a565b6034805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611125610906565b60405161113291906135a0565b60405180910390a1565b611144611865565b6111605760405162461bcd60e51b815260040161094890613e72565b6001600160a01b0381166111865760405162461bcd60e51b815260040161094890613d5e565b604080546001600160a01b0319166001600160a01b038316178155517f619936bc6e3618d0b8dc69bcc70134fe9d88f9967f3a8b8304e318369252162590610b8f9083906135a0565b60006111dc603383612157565b92915050565b6000428510156112045760405162461bcd60e51b815260040161094890613d35565b6000611220611218368b90038b018b613358565b89898961219f565b90506000600182878787604051600081526020016040526040516112479493929190613763565b6020604051602081039080840390855afa158015611269573d6000803e3d6000fd5b5050604051601f19015191506000905061128660208c018c612fbc565b6001600160a01b0316141580156112ba57506112a560208b018b612fbc565b6001600160a01b0316816001600160a01b0316145b6112d65760405162461bcd60e51b815260040161094890613b05565b6112ee8a6112e76020820182612fbc565b8b8b612234565b9a9950505050505050505050565b604080518082019091526002815261763360f01b602082015290565b6038805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561139e5780601f106113735761010080835404028352916020019161139e565b820191906000526020600020905b81548152906001019060200180831161138157829003601f168201915b505050505081565b60345460ff1690565b603d6020526000908152604090205460ff1681565b60345460ff16156113e75760405162461bcd60e51b815260040161094890613cd4565b60358054600101908190556036546001600160a01b0316611406610906565b6001600160a01b03161461142c5760405162461bcd60e51b815260040161094890613bfc565b6001600160a01b0388166000908152603d602052604090205460ff168061146c57506001600160a01b038881166000908152603b60205260409020541615155b6114885760405162461bcd60e51b815260040161094890613b96565b6001600160a01b0386166114ae5760405162461bcd60e51b815260040161094890613cab565b600085116114ce5760405162461bcd60e51b815260040161094890613b3c565b836114eb5760405162461bcd60e51b815260040161094890613f57565b826115085760405162461bcd60e51b8152600401610948906139de565b600083815260426020526040902054156115345760405162461bcd60e51b815260040161094890613f20565b60006115438787878787611a0d565b6000818152603e602052604090205490915060ff16156115755760405162461bcd60e51b815260040161094890613ee9565b60008481526042602090815260408083208490556043825280832080546001600160a01b03199081166001600160a01b038f811691821790935560449094529382902080549094168c821617909355519189169186907f2858b8803acb87882fd2de49ce7572ae3e741fb8073cbe772fa50ce00bdfba22906115fe908d908c908c908b906135d7565b60405180910390a4506035548114610b005760405162461bcd60e51b815260040161094890613805565b7ff18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd8043381565b61165c611657610906565b61244d565b565b611666611865565b6116825760405162461bcd60e51b815260040161094890613e72565b60345460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360348054610100600160a81b0319169055565b60006116dc610906565b90506116f36001600160a01b03851682308561248f565b61170f8482858560405180602001604052806000815250611e71565b50505050565b60456020526000908152604090205481565b600054610100900460ff1680611740575060005460ff16155b61175c5760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015611787576000805460ff1961ff0019909116610100171660011790555b6001603555801561179e576000805461ff00191690555b50565b6117ac6104e7610906565b6117c85760405162461bcd60e51b815260040161094890613abd565b61179e816124e7565b6117dc6104e7610906565b6117f85760405162461bcd60e51b815260040161094890613abd565b60345460ff161561181b5760405162461bcd60e51b815260040161094890613cd4565b6034805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611125610906565b60345461010090046001600160a01b031690565b60345460009061010090046001600160a01b0316611881610906565b6001600160a01b031614905090565b611898611865565b6118b45760405162461bcd60e51b815260040161094890613e72565b6001600160a01b0381166118da5760405162461bcd60e51b815260040161094890613f87565b603f80546001600160a01b0319166001600160a01b0383161790556040517f5f2c1fe803fd576d8af05ea156011cc9cc8c025bda24c1e85772fc05a0b3f1e390610b8f9083906135a0565b603f546001600160a01b031681565b60608101356000908152604460205260408120546001600160a01b0316611959610906565b6001600160a01b03161461197f5760405162461bcd60e51b8152600401610948906139ae565b6111dc8261198b610906565b600080612234565b61199b611865565b6119b75760405162461bcd60e51b815260040161094890613e72565b6103e881106119d85760405162461bcd60e51b81526004016109489061410f565b60378190556040517f97e97c577f03bda90e2c9739011ec065ed5fbfb36ae217d20bb0d9be95e160cd90610b8f908390613714565b60008383878785604051602001611a289594939291906134c6565b60405160208183030381529060405280519060200120905095945050505050565b6041546001600160a01b031681565b60006111dc8261198b6020820182612fbc565b6000611a75610906565b6041549091506001600160a01b0316611aa05760405162461bcd60e51b815260040161094890613cfe565b604160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611af057600080fd5b505af1158015611b04573d6000803e3d6000fd5b5050505050610e60604160009054906101000a90046001600160a01b031682843460405180602001604052806000815250611e71565b604054600160a01b900460ff1681565b6040546001600160a01b031681565b600054610100900460ff1680611b72575060005460ff16155b611b8e5760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015611bb9576000805460ff1961ff0019909116610100171660011790555b60348054610100600160a81b0319166101006001600160a01b0385811682029290921792839055604051920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610e60576000805461ff00191690555050565b6043602052600090815260409020546001600160a01b031681565b603e6020526000908152604090205460ff1681565b6000469050611ca66040518060400160405280601081526020016f52534b20546f6b656e2042726964676560801b815250604051806040016040528060018152602001603160f81b8152508330612529565b60395550565b600090815260426020526040902054151590565b603b602052600090815260409020546001600160a01b031681565b61271081565b6036546001600160a01b031690565b600054610100900460ff1680611d09575060005460ff16155b611d255760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015611d50576000805460ff1961ff0019909116610100171660011790555b611d59826111cf565b611d6657611d66826124e7565b8015610e60576000805461ff00191690555050565b611d83611865565b611d9f5760405162461bcd60e51b815260040161094890613e72565b61179e81612580565b60395481565b603c602052600090815260409020546001600160a01b031681565b611dd1611865565b611ded5760405162461bcd60e51b815260040161094890613e72565b6001600160a01b038116611e135760405162461bcd60e51b815260040161094890613915565b603680546001600160a01b0319166001600160a01b0383811691909117918290556040517f4a41a4d11aaf0c0c9e4311ac1d68b2b0134556da594779a2a35b0ddf7cd1eafb92610b8f9216906135a0565b3b151590565b6014015190565b604054600160a01b900460ff1615611e9b5760405162461bcd60e51b815260040161094890613983565b60345460ff1615611ebe5760405162461bcd60e51b815260040161094890613cd4565b603580546001908101918290556001600160a01b0387166000908152603d60205260408120805460ff1916909217909155603754611f0b9061271090611f0590879061260d565b9061264e565b90506000611f198583612690565b90506000611f26896126d2565b905085601260ff831614611f4b57611f488760ff601285900316600a0a61260d565b90505b603f54604051638c34bc5560e01b81526001600160a01b0390911690638c34bc5590611f7d908d9085906004016136a8565b600060405180830381600087803b158015611f9757600080fd5b505af1158015611fab573d6000803e3d6000fd5b5050506001600160a01b03808c166000908152603c60205260409020548c9250161561208557506001600160a01b03808b166000908152603c602052604081205490911690611ff98c612796565b90506000612007868361283e565b90506120138782612880565b965061201f8682612690565b60405163fe9d930360e01b81529096506001600160a01b038e169063fe9d9303906120509089908d906004016141be565b600060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b5050505050505b886001600160a01b03168a6001600160a01b0316826001600160a01b03167f1e90de9ae4d02420648a650f45f089a1be18fbca324092544ea626f9833212b0878b6040516120d49291906141be565b60405180910390a484156120fe576120fe6120ed611851565b6001600160a01b038d1690876128a5565b50505050506035548114610fcc5760405162461bcd60e51b815260040161094890613805565b600060128260ff16111561214a5760405162461bcd60e51b815260040161094890613dce565b5060120360ff16600a0a90565b60006001600160a01b03821661217f5760405162461bcd60e51b815260040161094890613ea7565b506001600160a01b03166000908152602091909152604090205460ff1690565b603954845160208087015160608801516001600160a01b03841660009081526045845260408082208054600181019091559051919661222b969095612210957ff18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd8043395929490938d928d928d910161371d565b604051602081830303815290604052805190602001206128c9565b95945050505050565b603580546001019081905560608501356000908152604360205260408120549091906001600160a01b03168061227c5760405162461bcd60e51b815260040161094890613ff5565b60006122ad61228e60208a018a612fbc565b60208a013560408b013560608c013561071b60a08e0160808f01613480565b606089013560009081526042602052604090205490915081146122e25760405162461bcd60e51b81526004016109489061417d565b6000818152603e602052604090205460ff16156123115760405162461bcd60e51b815260040161094890613ee9565b6000818152603e60209081526040808320805460ff191660011790556001600160a01b0385168352603d90915290205460ff16156123615761235a82888a6020013589896128e8565b9350612375565b61237282888a602001358989612af2565b93505b6123826020890189612fbc565b6001600160a01b0316826001600160a01b031689606001357f42b1cb6263e8da47edf0583516eda1de16f729d26282f5791dc5b7af1010e925604460008d60600135815260200190815260200160002060009054906101000a90046001600160a01b03168c602001358d604001358e60800160208101906124039190613480565b8e8e8e60405161241997969594939291906136c1565b60405180910390a4505060355481146124445760405162461bcd60e51b815260040161094890613805565b50949350505050565b612458603382612c89565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61170f846323b872dd60e01b8585856040516024016124b093929190613684565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612cd1565b6124f2603382612db5565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6001600160a01b0381166125a65760405162461bcd60e51b815260040161094890614053565b6034546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008261261c575060006111dc565b8282028284828161262957fe5b04146126475760405162461bcd60e51b815260040161094890613e05565b9392505050565b600061264783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612e01565b600061264783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e38565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916127189190613508565b600060405180830381855afa9150503d8060008114612753576040519150601f19603f3d011682016040523d82523d6000602084013e612758565b606091505b50915091508161277a5760405162461bcd60e51b8152600401610948906138e6565b8080602001905181019061278e91906133ce565b949350505050565b60408051600481526024810182526020810180516001600160e01b031663556f0dc760e01b1790529051600091829182916001600160a01b038616916127dc9190613508565b600060405180830381855afa9150503d8060008114612817576040519150601f19603f3d011682016040523d82523d6000602084013e61281c565b606091505b50915091508161277a5760405162461bcd60e51b815260040161094890613c74565b600061264783836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612e64565b6000828201838110156126475760405162461bcd60e51b81526004016109489061394c565b6128c48363a9059cbb60e01b84846040516024016124b09291906136a8565b505050565b60405161190160f01b8152600281019290925260228201526042902090565b6000806128f4876126d2565b60ff169050600061290c866012849003600a0a61264e565b90508084111561292e5760405162461bcd60e51b815260040161094890614025565b60415484820393506001600160a01b0389811691161415612ab957604154604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90612979908490600401613714565b600060405180830381600087803b15801561299357600080fd5b505af11580156129a7573d6000803e3d6000fd5b505050506000876001600160a01b0316846159d8906040516129c89061359d565b600060405180830381858888f193505050503d8060008114612a06576040519150601f19603f3d011682016040523d82523d6000602084013e612a0b565b606091505b5050905080612a2c5760405162461bcd60e51b815260040161094890613d9f565b8415612ab357856001600160a01b0316856159d890604051612a4d9061359d565b600060405180830381858888f193505050503d8060008114612a8b576040519150601f19603f3d011682016040523d82523d6000602084013e612a90565b606091505b50508091505080612ab35760405162461bcd60e51b8152600401610948906138af565b50612ae7565b612acd6001600160a01b03891688856128a5565b8315612ae757612ae76001600160a01b03891686866128a5565b505095945050505050565b6001600160a01b038086166000908152603b6020908152604080832054815163556f0dc760e01b81529151939416928492849263556f0dc79260048083019392829003018186803b158015612b4657600080fd5b505afa158015612b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7e91906133ce565b90506000612b8c878361260d565b905080851115612bae5760405162461bcd60e51b815260040161094890614025565b604051630dcdc7dd60e41b815285820394506001600160a01b0384169063dcdc7dd090612be1908b90889060040161364e565b600060405180830381600087803b158015612bfb57600080fd5b505af1158015612c0f573d6000803e3d6000fd5b505050506000851115612c7d57604051630dcdc7dd60e41b81526001600160a01b0384169063dcdc7dd090612c4a9089908990600401613603565b600060405180830381600087803b158015612c6457600080fd5b505af1158015612c78573d6000803e3d6000fd5b505050505b50505095945050505050565b612c938282612157565b612caf5760405162461bcd60e51b815260040161094890613a0b565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b612ce3826001600160a01b0316611e64565b612cff5760405162461bcd60e51b815260040161094890614146565b600080836001600160a01b031683604051612d1a9190613508565b6000604051808303816000865af19150503d8060008114612d57576040519150601f19603f3d011682016040523d82523d6000602084013e612d5c565b606091505b509150915081612d7e5760405162461bcd60e51b815260040161094890613a40565b80511561170f5780806020019051810190612d999190613299565b61170f5760405162461bcd60e51b815260040161094890614095565b612dbf8282612157565b15612ddc5760405162461bcd60e51b815260040161094890613878565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60008183612e225760405162461bcd60e51b815260040161094891906137d0565b506000838581612e2e57fe5b0495945050505050565b60008184841115612e5c5760405162461bcd60e51b815260040161094891906137d0565b505050900390565b60008183612e855760405162461bcd60e51b815260040161094891906137d0565b50828481612e8f57fe5b06949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612ece5760008555612f14565b82601f10612ee757805160ff1916838001178555612f14565b82800160010185558215612f14579182015b82811115612f14578251825591602001919060010190612ef9565b50612f20929150612f24565b5090565b5b80821115612f205760008155600101612f25565b60008083601f840112612f4a578182fd5b50813567ffffffffffffffff811115612f61578182fd5b602083019150836020828501011115612f7957600080fd5b9250929050565b600060a08284031215612f91578081fd5b50919050565b803563ffffffff8116811461108957600080fd5b803560ff8116811461108957600080fd5b600060208284031215612fcd578081fd5b813561264781614227565b600060208284031215612fe9578081fd5b815161264781614227565b600080600080600080600060e0888a03121561300e578283fd5b873561301981614227565b9650602088013561302981614227565b9550604088013561303981614227565b9450606088013593506080880135925060a0880135915061305c60c08901612f97565b905092959891949750929550565b600080600080600060a08688031215613081578081fd5b853561308c81614227565b945060208681013561309d81614227565b945060408701356130ad81614227565b935060608701356130bd81614227565b9250608087013567ffffffffffffffff808211156130d9578384fd5b818901915089601f8301126130ec578384fd5b8135818111156130f857fe5b61310a601f8201601f191685016141d7565b91508082528a8482850101111561311f578485fd5b8084840185840137810190920192909252949793965091945092919050565b60008060008060008060008060c0898b031215613159578081fd5b883561316481614227565b9750602089013561317481614227565b9650604089013561318481614227565b955060608901359450608089013567ffffffffffffffff808211156131a7578283fd5b6131b38c838d01612f39565b909650945060a08b01359150808211156131cb578283fd5b506131d88b828c01612f39565b999c989b5096995094979396929594505050565b600080600060608486031215613200578081fd5b833561320b81614227565b9250602084013561321b81614227565b929592945050506040919091013590565b600080600080600060a08688031215613243578283fd5b853561324e81614227565b945060208601359350604086013592506060860135915061327160808701612f97565b90509295509295909350565b60006020828403121561328e578081fd5b81356126478161423c565b6000602082840312156132aa578081fd5b81516126478161423c565b6000602082840312156132c6578081fd5b5035919050565b600060a082840312156132de578081fd5b6126478383612f80565b6000806000806000806000610160888a031215613303578081fd5b61330d8989612f80565b965060a088013561331d81614227565b955060c0880135945060e0880135935061333a6101008901612fab565b92506101208801359150610140880135905092959891949750929550565b600060a08284031215613369578081fd5b60405160a0810181811067ffffffffffffffff8211171561338657fe5b604052823561339481614227565b808252506020830135602082015260408301356040820152606083013560608201526133c260808401612f97565b60808201529392505050565b6000602082840312156133df578081fd5b5051919050565b600080600080600080600060a0888a031215613400578081fd5b87359650602088013561341281614227565b955061342060408901612fab565b9450606088013567ffffffffffffffff8082111561343c578283fd5b6134488b838c01612f39565b909650945060808a0135915080821115613460578283fd5b5061346d8a828b01612f39565b989b979a50959850939692959293505050565b600060208284031215613491578081fd5b61264782612f97565b600081518084526134b28160208601602086016141fb565b601f01601f19169290920160200192915050565b948552602085019390935260609190911b6bffffffffffffffffffffffff19166040840152605483015260e01b6001600160e01b031916607482015260780190565b6000825161351a8184602087016141fb565b9190910192915050565b6000808554600180821660008114613543576001811461355a57613589565b60ff198316865260028304607f1686019350613589565b600283048986526020808720875b838110156135815781548a820152908501908201613568565b505050860193505b505050838582379092019182525092915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b039490941684526020840192909252604083015263ffffffff16606082015260800190565b6001600160a01b03929092168252602082015260806040820181905260009082015260a060608201819052600b908201526a72656c617965722066656560a81b60c082015260e00190565b6001600160a01b039290921682526020820152608060408201819052600090820181905260a06060830181905282015260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0397881681526020810196909652604086019490945263ffffffff9290921660608501528416608084015290921660a082015260c081019190915260e00190565b901515815260200190565b90815260200190565b9788526001600160a01b039687166020890152604088019590955260608701939093529316608085015260a084019290925260c083019190915260e08201526101000190565b93845260ff9290921660208401526040830152606082015260800190565b600060608252846060830152848660808401378060808684010152601f19601f860116820160808382030160208401526137be608082018661349a565b91505082604083015295945050505050565b600060208252612647602083018461349a565b6000604082526137f6604083018561349a565b90508260208301529392505050565b60208082526025908201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6040820152641b1bddd95960da1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601f908201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604082015260600190565b60208082526019908201527f4272696467653a207472616e7366657220666565206661696c00000000000000604082015260600190565b6020808252601590820152744c69625574696c733a204e6f20646563696d616c7360581b604082015260600190565b6020808252601b908201527f4272696467653a2046656465726174696f6e20697320656d7074790000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601190820152704272696467653a20557067726164696e6760781b604082015260600190565b602080825260169082015275213934b233b29d1034b73b30b634b21039b2b73232b960511b604082015260600190565b602080825260139082015272084e4d2c8ceca74409cead8d840a8f090c2e6d606b1b604082015260600190565b6020808252818101527f526f6c65733a206163636f756e7420646f65736e2774206861766520726f6c65604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60208082526028908201527f506175736572526f6c653a2063616c6c657220646f65736e277420686176652060408201526774686520726f6c6560c01b606082015260800190565b60208082526019908201527f4272696467653a20494e56414c49445f5349474e415455524500000000000000604082015260600190565b60208082526010908201526f04272696467653a20416d6f756e7420360841b604082015260600190565b6020808252601690820152754272696467653a20777261707020697320656d70747960501b604082015260600190565b602080825260159082015274213934b233b29d102ab735b737bbb7103a37b5b2b760591b604082015260600190565b6020808252601b908201527f4272696467653a204e6f7420746f207468697320616464726573730000000000604082015260600190565b602080825260169082015275213934b233b29d102737ba102332b232b930ba34b7b760511b604082015260600190565b60208082526028908201527f4272696467653a2053706563696679207265636569766572206164647265737360408201526720696e206461746160c01b606082015260800190565b60208082526018908201527f4c69625574696c733a204e6f206772616e756c61726974790000000000000000604082015260600190565b6020808252600f908201526e4272696467653a204e756c6c20546f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f4272696467653a207772617070656443757272656e637920656d707479000000604082015260600190565b6020808252600f908201526e109c9a5919d94e8811561412549151608a1b604082015260600190565b60208082526021908201527f4272696467653a2053696465546f6b656e466163746f727920697320656d70746040820152607960f81b606082015260800190565b602080825260159082015274109c9a5919d94e881d1c985b9cd9995c8819985a5b605a1b604082015260600190565b6020808252601c908201527f4c69625574696c733a20446563696d616c73206e6f74203c3d20313800000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260129082015271213934b233b29d10273ab636103a37b5b2b760711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526017908201527f4272696467653a20416c726561647920636c61696d6564000000000000000000604082015260600190565b60208082526018908201527f4272696467653a20416c72656164792061636365707465640000000000000000604082015260600190565b602080825260169082015275084e4d2c8ceca74409cead8d84084d8dec6d690c2e6d60531b604082015260600190565b6020808252601c908201527f4272696467653a20416c6c6f77546f6b656e7320697320656d70747900000000604082015260600190565b60208082526018908201527f4272696467653a204e6f742045524337373720746f6b656e0000000000000000604082015260600190565b602080825260169082015275109c9a5919d94e88151e081b9bdd0818dc9bdcdcd95960521b604082015260600190565b602080825260149082015273084e4d2c8ceca7440cccaca40e8dede40d0d2ced60631b604082015260600190565b60208082526022908201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601690820152754272696467653a20416c72656164792065786973747360501b604082015260600190565b60208082526017908201527f4272696467653a20626967676572207468616e20313025000000000000000000604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b60208082526021908201527f4272696467653a2057726f6e67207472616e73616374696f6e446174614861736040820152600d60fb1b606082015260800190565b60008382526040602083015261278e604083018461349a565b60405181810167ffffffffffffffff811182821017156141f357fe5b604052919050565b60005b838110156142165781810151838201526020016141fe565b8381111561170f5750506000910152565b6001600160a01b038116811461179e57600080fd5b801515811461179e57600080fdfea26469706673582212204107de5d3148e869a8c1b6e3aaa625981cfa92646cc82b5617681e154df449ef64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106103025760003560e01c80638456cb5911610190578063c4d66de8116100dc578063e6fc774411610095578063f2fde38b1161006f578063f2fde38b14610891578063f698da25146108b1578063f74032f0146108c6578063fa0caa16146108e65761032d565b8063e6fc774414610847578063ea2170911461085c578063eb16136f146108715761032d565b8063c4d66de814610792578063ca07140c146107b2578063cc3c0f06146107d2578063d12e825d146107f2578063da67703714610807578063e6ede14d146108275761032d565b8063ae06c1b711610149578063b50277bb11610123578063b50277bb14610735578063b760faf914610755578063b794726214610768578063b86f60d21461077d5761032d565b8063ae06c1b7146106e0578063afad80ac14610700578063b0e1268e146107205761032d565b80638456cb591461064c5780638da5cb5b146106615780638f32d59b14610676578063916dc59d1461068b578063a53d6e6e146106ab578063adc5fb64146106c05761032d565b80634beea5061161024f5780636b0509b1116102085780637813bea2116101e25780637813bea2146105d75780637ecebe00146105f75780638129fc1c1461061757806382dc1ec41461062c5761032d565b80636b0509b1146105985780636ef8d66d146105ad578063715018a6146105c25761032d565b80634beea506146104ec57806354fd4d501461050c57806359a8a8671461052e5780635c975abb146105435780635d447129146105585780636a863191146105785761032d565b80632fb3b361116102bc5780633cf3058b116102965780633cf3058b1461046a5780633f4ba83a1461049757806342cdb2c6146104ac57806346fbf68e146104cc5761032d565b80632fb3b361146103fd5780633500c1dc1461041d57806337e761091461043d5761032d565b806223de2914610332578063026976191461035257806307c8f7b01461038857806311efbf61146103a857806320e3bb00146103bd5780632f3cca4e146103dd5761032d565b3661032d576041546001600160a01b031661031b610906565b6001600160a01b03161461032b57fe5b005b600080fd5b34801561033e57600080fd5b5061032b61034d36600461313e565b61090a565b34801561035e57600080fd5b5061037261036d3660046132b5565b610b0a565b60405161037f9190613714565b60405180910390f35b34801561039457600080fd5b5061032b6103a336600461327d565b610b1c565b3480156103b457600080fd5b50610372610b9a565b3480156103c957600080fd5b5061032b6103d83660046133e6565b610ba0565b3480156103e957600080fd5b5061032b6103f8366004612fbc565b610ddb565b34801561040957600080fd5b5061032b61041836600461306a565b610e64565b34801561042957600080fd5b5061032b610438366004612fbc565b610fd4565b34801561044957600080fd5b5061045d6104583660046132b5565b611069565b60405161037f9190613709565b34801561047657600080fd5b5061048a6104853660046132b5565b61108e565b60405161037f91906135a0565b3480156104a357600080fd5b5061032b6110a9565b3480156104b857600080fd5b5061032b6104c7366004612fbc565b61113c565b3480156104d857600080fd5b5061045d6104e7366004612fbc565b6111cf565b3480156104f857600080fd5b506103726105073660046132e8565b6111e2565b34801561051857600080fd5b506105216112fc565b60405161037f91906137d0565b34801561053a57600080fd5b50610521611318565b34801561054f57600080fd5b5061045d6113a6565b34801561056457600080fd5b5061045d610573366004612fbc565b6113af565b34801561058457600080fd5b5061032b610593366004612ff4565b6113c4565b3480156105a457600080fd5b50610372611628565b3480156105b957600080fd5b5061032b61164c565b3480156105ce57600080fd5b5061032b61165e565b3480156105e357600080fd5b5061032b6105f23660046131ec565b6116d2565b34801561060357600080fd5b50610372610612366004612fbc565b611715565b34801561062357600080fd5b5061032b611727565b34801561063857600080fd5b5061032b610647366004612fbc565b6117a1565b34801561065857600080fd5b5061032b6117d1565b34801561066d57600080fd5b5061048a611851565b34801561068257600080fd5b5061045d611865565b34801561069757600080fd5b5061032b6106a6366004612fbc565b611890565b3480156106b757600080fd5b5061048a611925565b3480156106cc57600080fd5b506103726106db3660046132cd565b611934565b3480156106ec57600080fd5b5061032b6106fb3660046132b5565b611993565b34801561070c57600080fd5b5061037261071b36600461322c565b611a0d565b34801561072c57600080fd5b5061048a611a49565b34801561074157600080fd5b506103726107503660046132cd565b611a58565b61032b610763366004612fbc565b611a6b565b34801561077457600080fd5b5061045d611b3a565b34801561078957600080fd5b5061048a611b4a565b34801561079e57600080fd5b5061032b6107ad366004612fbc565b611b59565b3480156107be57600080fd5b5061048a6107cd3660046132b5565b611c24565b3480156107de57600080fd5b5061045d6107ed3660046132b5565b611c3f565b3480156107fe57600080fd5b5061032b611c54565b34801561081357600080fd5b5061045d6108223660046132b5565b611cac565b34801561083357600080fd5b5061048a610842366004612fbc565b611cc0565b34801561085357600080fd5b50610372611cdb565b34801561086857600080fd5b5061048a611ce1565b34801561087d57600080fd5b5061032b61088c366004612fbc565b611cf0565b34801561089d57600080fd5b5061032b6108ac366004612fbc565b611d7b565b3480156108bd57600080fd5b50610372611da8565b3480156108d257600080fd5b5061048a6108e1366004612fbc565b611dae565b3480156108f257600080fd5b5061032b610901366004612fbc565b611dc9565b3390565b6001600160a01b03881630141561092057610b00565b6001600160a01b03861630146109515760405162461bcd60e51b815260040161094890613bc5565b60405180910390fd5b600061095b610906565b60405163555ddc6560e11b8152909150600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca906109ba9085907fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054906004016136a8565b60206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190612fd8565b6001600160a01b03161415610a315760405162461bcd60e51b815260040161094890613fbe565b83151580610a4e5750610a4c886001600160a01b0316611e64565b155b610a6a5760405162461bcd60e51b815260040161094890613c2c565b60008415610ab657610ab186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e6a92505050565b610ab8565b885b9050610afd828a838a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e7192505050565b50505b5050505050505050565b60426020526000908152604090205481565b610b24611865565b610b405760405162461bcd60e51b815260040161094890613e72565b6040805460ff60a01b1916600160a01b83151581029190911780835591517f983e436223c000a441c2443b394ca5fb4669a513fe86dc1dd44494047b514ad992610b8f9260ff91041690613709565b60405180910390a150565b60375490565b610ba8611865565b610bc45760405162461bcd60e51b815260040161094890613e72565b6001600160a01b038616610bea5760405162461bcd60e51b815260040161094890613e46565b6001600160a01b038087166000908152603b6020526040902054168015610c235760405162461bcd60e51b8152600401610948906140df565b6000610c2e87612124565b9050600060388787604051602001610c4893929190613524565b60408051601f1981840301815282825290546326d9e96360e01b83529092506001600160a01b0316906326d9e96390610c8b908890889086908890600401613781565b602060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190612fd8565b6001600160a01b03808b166000818152603b6020908152604080832080548688166001600160a01b03199182168117909255908452603c909252918290208054909116909217909155603f5490516378bf2b5360e01b815292955016906378bf2b5390610d509086908e906004016136a8565b600060405180830381600087803b158015610d6a57600080fd5b505af1158015610d7e573d6000803e3d6000fd5b50505050886001600160a01b0316836001600160a01b03167f2ef93c4e96a4ef0b19497ff60c9e7360a8734f3d2cd27ae5318e43851734d17f8385604051610dc79291906137e3565b60405180910390a350505050505050505050565b600054610100900460ff1680610df4575060005460ff16155b610e105760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015610e3b576000805460ff1961ff0019909116610100171660011790555b610e4482611cf0565b6034805460ff191690558015610e60576000805461ff00191690555b5050565b600054610100900460ff1680610e7d575060005460ff16155b610e995760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015610ec4576000805460ff1961ff0019909116610100171660011790555b610ecd86611b59565b610ed686610ddb565b8151610ee9906038906020850190612e98565b50603f80546001600160a01b038087166001600160a01b031992831617909255604080548684169083161781556036805493891693909216929092179055516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90610f809030907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9082906004016135b4565b600060405180830381600087803b158015610f9a57600080fd5b505af1158015610fae573d6000803e3d6000fd5b50505050610fba611c54565b8015610fcc576000805461ff00191690555b505050505050565b610fdc611865565b610ff85760405162461bcd60e51b815260040161094890613e72565b6001600160a01b03811661101e5760405162461bcd60e51b815260040161094890613b66565b604180546001600160a01b0319166001600160a01b0383161790556040517f0966c958966f6fac9ff807af074f8117eb2e9ce2b76390db7a158e9bdeb2485c90610b8f9083906135a0565b6000818152604260209081526040808320548352603e90915290205460ff165b919050565b6044602052600090815260409020546001600160a01b031681565b6110b46104e7610906565b6110d05760405162461bcd60e51b815260040161094890613abd565b60345460ff166110f25760405162461bcd60e51b81526004016109489061384a565b6034805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611125610906565b60405161113291906135a0565b60405180910390a1565b611144611865565b6111605760405162461bcd60e51b815260040161094890613e72565b6001600160a01b0381166111865760405162461bcd60e51b815260040161094890613d5e565b604080546001600160a01b0319166001600160a01b038316178155517f619936bc6e3618d0b8dc69bcc70134fe9d88f9967f3a8b8304e318369252162590610b8f9083906135a0565b60006111dc603383612157565b92915050565b6000428510156112045760405162461bcd60e51b815260040161094890613d35565b6000611220611218368b90038b018b613358565b89898961219f565b90506000600182878787604051600081526020016040526040516112479493929190613763565b6020604051602081039080840390855afa158015611269573d6000803e3d6000fd5b5050604051601f19015191506000905061128660208c018c612fbc565b6001600160a01b0316141580156112ba57506112a560208b018b612fbc565b6001600160a01b0316816001600160a01b0316145b6112d65760405162461bcd60e51b815260040161094890613b05565b6112ee8a6112e76020820182612fbc565b8b8b612234565b9a9950505050505050505050565b604080518082019091526002815261763360f01b602082015290565b6038805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561139e5780601f106113735761010080835404028352916020019161139e565b820191906000526020600020905b81548152906001019060200180831161138157829003601f168201915b505050505081565b60345460ff1690565b603d6020526000908152604090205460ff1681565b60345460ff16156113e75760405162461bcd60e51b815260040161094890613cd4565b60358054600101908190556036546001600160a01b0316611406610906565b6001600160a01b03161461142c5760405162461bcd60e51b815260040161094890613bfc565b6001600160a01b0388166000908152603d602052604090205460ff168061146c57506001600160a01b038881166000908152603b60205260409020541615155b6114885760405162461bcd60e51b815260040161094890613b96565b6001600160a01b0386166114ae5760405162461bcd60e51b815260040161094890613cab565b600085116114ce5760405162461bcd60e51b815260040161094890613b3c565b836114eb5760405162461bcd60e51b815260040161094890613f57565b826115085760405162461bcd60e51b8152600401610948906139de565b600083815260426020526040902054156115345760405162461bcd60e51b815260040161094890613f20565b60006115438787878787611a0d565b6000818152603e602052604090205490915060ff16156115755760405162461bcd60e51b815260040161094890613ee9565b60008481526042602090815260408083208490556043825280832080546001600160a01b03199081166001600160a01b038f811691821790935560449094529382902080549094168c821617909355519189169186907f2858b8803acb87882fd2de49ce7572ae3e741fb8073cbe772fa50ce00bdfba22906115fe908d908c908c908b906135d7565b60405180910390a4506035548114610b005760405162461bcd60e51b815260040161094890613805565b7ff18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd8043381565b61165c611657610906565b61244d565b565b611666611865565b6116825760405162461bcd60e51b815260040161094890613e72565b60345460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360348054610100600160a81b0319169055565b60006116dc610906565b90506116f36001600160a01b03851682308561248f565b61170f8482858560405180602001604052806000815250611e71565b50505050565b60456020526000908152604090205481565b600054610100900460ff1680611740575060005460ff16155b61175c5760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015611787576000805460ff1961ff0019909116610100171660011790555b6001603555801561179e576000805461ff00191690555b50565b6117ac6104e7610906565b6117c85760405162461bcd60e51b815260040161094890613abd565b61179e816124e7565b6117dc6104e7610906565b6117f85760405162461bcd60e51b815260040161094890613abd565b60345460ff161561181b5760405162461bcd60e51b815260040161094890613cd4565b6034805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611125610906565b60345461010090046001600160a01b031690565b60345460009061010090046001600160a01b0316611881610906565b6001600160a01b031614905090565b611898611865565b6118b45760405162461bcd60e51b815260040161094890613e72565b6001600160a01b0381166118da5760405162461bcd60e51b815260040161094890613f87565b603f80546001600160a01b0319166001600160a01b0383161790556040517f5f2c1fe803fd576d8af05ea156011cc9cc8c025bda24c1e85772fc05a0b3f1e390610b8f9083906135a0565b603f546001600160a01b031681565b60608101356000908152604460205260408120546001600160a01b0316611959610906565b6001600160a01b03161461197f5760405162461bcd60e51b8152600401610948906139ae565b6111dc8261198b610906565b600080612234565b61199b611865565b6119b75760405162461bcd60e51b815260040161094890613e72565b6103e881106119d85760405162461bcd60e51b81526004016109489061410f565b60378190556040517f97e97c577f03bda90e2c9739011ec065ed5fbfb36ae217d20bb0d9be95e160cd90610b8f908390613714565b60008383878785604051602001611a289594939291906134c6565b60405160208183030381529060405280519060200120905095945050505050565b6041546001600160a01b031681565b60006111dc8261198b6020820182612fbc565b6000611a75610906565b6041549091506001600160a01b0316611aa05760405162461bcd60e51b815260040161094890613cfe565b604160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611af057600080fd5b505af1158015611b04573d6000803e3d6000fd5b5050505050610e60604160009054906101000a90046001600160a01b031682843460405180602001604052806000815250611e71565b604054600160a01b900460ff1681565b6040546001600160a01b031681565b600054610100900460ff1680611b72575060005460ff16155b611b8e5760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015611bb9576000805460ff1961ff0019909116610100171660011790555b60348054610100600160a81b0319166101006001600160a01b0385811682029290921792839055604051920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610e60576000805461ff00191690555050565b6043602052600090815260409020546001600160a01b031681565b603e6020526000908152604090205460ff1681565b6000469050611ca66040518060400160405280601081526020016f52534b20546f6b656e2042726964676560801b815250604051806040016040528060018152602001603160f81b8152508330612529565b60395550565b600090815260426020526040902054151590565b603b602052600090815260409020546001600160a01b031681565b61271081565b6036546001600160a01b031690565b600054610100900460ff1680611d09575060005460ff16155b611d255760405162461bcd60e51b815260040161094890613a75565b600054610100900460ff16158015611d50576000805460ff1961ff0019909116610100171660011790555b611d59826111cf565b611d6657611d66826124e7565b8015610e60576000805461ff00191690555050565b611d83611865565b611d9f5760405162461bcd60e51b815260040161094890613e72565b61179e81612580565b60395481565b603c602052600090815260409020546001600160a01b031681565b611dd1611865565b611ded5760405162461bcd60e51b815260040161094890613e72565b6001600160a01b038116611e135760405162461bcd60e51b815260040161094890613915565b603680546001600160a01b0319166001600160a01b0383811691909117918290556040517f4a41a4d11aaf0c0c9e4311ac1d68b2b0134556da594779a2a35b0ddf7cd1eafb92610b8f9216906135a0565b3b151590565b6014015190565b604054600160a01b900460ff1615611e9b5760405162461bcd60e51b815260040161094890613983565b60345460ff1615611ebe5760405162461bcd60e51b815260040161094890613cd4565b603580546001908101918290556001600160a01b0387166000908152603d60205260408120805460ff1916909217909155603754611f0b9061271090611f0590879061260d565b9061264e565b90506000611f198583612690565b90506000611f26896126d2565b905085601260ff831614611f4b57611f488760ff601285900316600a0a61260d565b90505b603f54604051638c34bc5560e01b81526001600160a01b0390911690638c34bc5590611f7d908d9085906004016136a8565b600060405180830381600087803b158015611f9757600080fd5b505af1158015611fab573d6000803e3d6000fd5b5050506001600160a01b03808c166000908152603c60205260409020548c9250161561208557506001600160a01b03808b166000908152603c602052604081205490911690611ff98c612796565b90506000612007868361283e565b90506120138782612880565b965061201f8682612690565b60405163fe9d930360e01b81529096506001600160a01b038e169063fe9d9303906120509089908d906004016141be565b600060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b5050505050505b886001600160a01b03168a6001600160a01b0316826001600160a01b03167f1e90de9ae4d02420648a650f45f089a1be18fbca324092544ea626f9833212b0878b6040516120d49291906141be565b60405180910390a484156120fe576120fe6120ed611851565b6001600160a01b038d1690876128a5565b50505050506035548114610fcc5760405162461bcd60e51b815260040161094890613805565b600060128260ff16111561214a5760405162461bcd60e51b815260040161094890613dce565b5060120360ff16600a0a90565b60006001600160a01b03821661217f5760405162461bcd60e51b815260040161094890613ea7565b506001600160a01b03166000908152602091909152604090205460ff1690565b603954845160208087015160608801516001600160a01b03841660009081526045845260408082208054600181019091559051919661222b969095612210957ff18ceda3f6355f78c234feba066041a50f6557bfb600201e2a71a89e2dd8043395929490938d928d928d910161371d565b604051602081830303815290604052805190602001206128c9565b95945050505050565b603580546001019081905560608501356000908152604360205260408120549091906001600160a01b03168061227c5760405162461bcd60e51b815260040161094890613ff5565b60006122ad61228e60208a018a612fbc565b60208a013560408b013560608c013561071b60a08e0160808f01613480565b606089013560009081526042602052604090205490915081146122e25760405162461bcd60e51b81526004016109489061417d565b6000818152603e602052604090205460ff16156123115760405162461bcd60e51b815260040161094890613ee9565b6000818152603e60209081526040808320805460ff191660011790556001600160a01b0385168352603d90915290205460ff16156123615761235a82888a6020013589896128e8565b9350612375565b61237282888a602001358989612af2565b93505b6123826020890189612fbc565b6001600160a01b0316826001600160a01b031689606001357f42b1cb6263e8da47edf0583516eda1de16f729d26282f5791dc5b7af1010e925604460008d60600135815260200190815260200160002060009054906101000a90046001600160a01b03168c602001358d604001358e60800160208101906124039190613480565b8e8e8e60405161241997969594939291906136c1565b60405180910390a4505060355481146124445760405162461bcd60e51b815260040161094890613805565b50949350505050565b612458603382612c89565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61170f846323b872dd60e01b8585856040516024016124b093929190613684565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612cd1565b6124f2603382612db5565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6001600160a01b0381166125a65760405162461bcd60e51b815260040161094890614053565b6034546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008261261c575060006111dc565b8282028284828161262957fe5b04146126475760405162461bcd60e51b815260040161094890613e05565b9392505050565b600061264783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612e01565b600061264783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e38565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916127189190613508565b600060405180830381855afa9150503d8060008114612753576040519150601f19603f3d011682016040523d82523d6000602084013e612758565b606091505b50915091508161277a5760405162461bcd60e51b8152600401610948906138e6565b8080602001905181019061278e91906133ce565b949350505050565b60408051600481526024810182526020810180516001600160e01b031663556f0dc760e01b1790529051600091829182916001600160a01b038616916127dc9190613508565b600060405180830381855afa9150503d8060008114612817576040519150601f19603f3d011682016040523d82523d6000602084013e61281c565b606091505b50915091508161277a5760405162461bcd60e51b815260040161094890613c74565b600061264783836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612e64565b6000828201838110156126475760405162461bcd60e51b81526004016109489061394c565b6128c48363a9059cbb60e01b84846040516024016124b09291906136a8565b505050565b60405161190160f01b8152600281019290925260228201526042902090565b6000806128f4876126d2565b60ff169050600061290c866012849003600a0a61264e565b90508084111561292e5760405162461bcd60e51b815260040161094890614025565b60415484820393506001600160a01b0389811691161415612ab957604154604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90612979908490600401613714565b600060405180830381600087803b15801561299357600080fd5b505af11580156129a7573d6000803e3d6000fd5b505050506000876001600160a01b0316846159d8906040516129c89061359d565b600060405180830381858888f193505050503d8060008114612a06576040519150601f19603f3d011682016040523d82523d6000602084013e612a0b565b606091505b5050905080612a2c5760405162461bcd60e51b815260040161094890613d9f565b8415612ab357856001600160a01b0316856159d890604051612a4d9061359d565b600060405180830381858888f193505050503d8060008114612a8b576040519150601f19603f3d011682016040523d82523d6000602084013e612a90565b606091505b50508091505080612ab35760405162461bcd60e51b8152600401610948906138af565b50612ae7565b612acd6001600160a01b03891688856128a5565b8315612ae757612ae76001600160a01b03891686866128a5565b505095945050505050565b6001600160a01b038086166000908152603b6020908152604080832054815163556f0dc760e01b81529151939416928492849263556f0dc79260048083019392829003018186803b158015612b4657600080fd5b505afa158015612b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7e91906133ce565b90506000612b8c878361260d565b905080851115612bae5760405162461bcd60e51b815260040161094890614025565b604051630dcdc7dd60e41b815285820394506001600160a01b0384169063dcdc7dd090612be1908b90889060040161364e565b600060405180830381600087803b158015612bfb57600080fd5b505af1158015612c0f573d6000803e3d6000fd5b505050506000851115612c7d57604051630dcdc7dd60e41b81526001600160a01b0384169063dcdc7dd090612c4a9089908990600401613603565b600060405180830381600087803b158015612c6457600080fd5b505af1158015612c78573d6000803e3d6000fd5b505050505b50505095945050505050565b612c938282612157565b612caf5760405162461bcd60e51b815260040161094890613a0b565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b612ce3826001600160a01b0316611e64565b612cff5760405162461bcd60e51b815260040161094890614146565b600080836001600160a01b031683604051612d1a9190613508565b6000604051808303816000865af19150503d8060008114612d57576040519150601f19603f3d011682016040523d82523d6000602084013e612d5c565b606091505b509150915081612d7e5760405162461bcd60e51b815260040161094890613a40565b80511561170f5780806020019051810190612d999190613299565b61170f5760405162461bcd60e51b815260040161094890614095565b612dbf8282612157565b15612ddc5760405162461bcd60e51b815260040161094890613878565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60008183612e225760405162461bcd60e51b815260040161094891906137d0565b506000838581612e2e57fe5b0495945050505050565b60008184841115612e5c5760405162461bcd60e51b815260040161094891906137d0565b505050900390565b60008183612e855760405162461bcd60e51b815260040161094891906137d0565b50828481612e8f57fe5b06949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612ece5760008555612f14565b82601f10612ee757805160ff1916838001178555612f14565b82800160010185558215612f14579182015b82811115612f14578251825591602001919060010190612ef9565b50612f20929150612f24565b5090565b5b80821115612f205760008155600101612f25565b60008083601f840112612f4a578182fd5b50813567ffffffffffffffff811115612f61578182fd5b602083019150836020828501011115612f7957600080fd5b9250929050565b600060a08284031215612f91578081fd5b50919050565b803563ffffffff8116811461108957600080fd5b803560ff8116811461108957600080fd5b600060208284031215612fcd578081fd5b813561264781614227565b600060208284031215612fe9578081fd5b815161264781614227565b600080600080600080600060e0888a03121561300e578283fd5b873561301981614227565b9650602088013561302981614227565b9550604088013561303981614227565b9450606088013593506080880135925060a0880135915061305c60c08901612f97565b905092959891949750929550565b600080600080600060a08688031215613081578081fd5b853561308c81614227565b945060208681013561309d81614227565b945060408701356130ad81614227565b935060608701356130bd81614227565b9250608087013567ffffffffffffffff808211156130d9578384fd5b818901915089601f8301126130ec578384fd5b8135818111156130f857fe5b61310a601f8201601f191685016141d7565b91508082528a8482850101111561311f578485fd5b8084840185840137810190920192909252949793965091945092919050565b60008060008060008060008060c0898b031215613159578081fd5b883561316481614227565b9750602089013561317481614227565b9650604089013561318481614227565b955060608901359450608089013567ffffffffffffffff808211156131a7578283fd5b6131b38c838d01612f39565b909650945060a08b01359150808211156131cb578283fd5b506131d88b828c01612f39565b999c989b5096995094979396929594505050565b600080600060608486031215613200578081fd5b833561320b81614227565b9250602084013561321b81614227565b929592945050506040919091013590565b600080600080600060a08688031215613243578283fd5b853561324e81614227565b945060208601359350604086013592506060860135915061327160808701612f97565b90509295509295909350565b60006020828403121561328e578081fd5b81356126478161423c565b6000602082840312156132aa578081fd5b81516126478161423c565b6000602082840312156132c6578081fd5b5035919050565b600060a082840312156132de578081fd5b6126478383612f80565b6000806000806000806000610160888a031215613303578081fd5b61330d8989612f80565b965060a088013561331d81614227565b955060c0880135945060e0880135935061333a6101008901612fab565b92506101208801359150610140880135905092959891949750929550565b600060a08284031215613369578081fd5b60405160a0810181811067ffffffffffffffff8211171561338657fe5b604052823561339481614227565b808252506020830135602082015260408301356040820152606083013560608201526133c260808401612f97565b60808201529392505050565b6000602082840312156133df578081fd5b5051919050565b600080600080600080600060a0888a031215613400578081fd5b87359650602088013561341281614227565b955061342060408901612fab565b9450606088013567ffffffffffffffff8082111561343c578283fd5b6134488b838c01612f39565b909650945060808a0135915080821115613460578283fd5b5061346d8a828b01612f39565b989b979a50959850939692959293505050565b600060208284031215613491578081fd5b61264782612f97565b600081518084526134b28160208601602086016141fb565b601f01601f19169290920160200192915050565b948552602085019390935260609190911b6bffffffffffffffffffffffff19166040840152605483015260e01b6001600160e01b031916607482015260780190565b6000825161351a8184602087016141fb565b9190910192915050565b6000808554600180821660008114613543576001811461355a57613589565b60ff198316865260028304607f1686019350613589565b600283048986526020808720875b838110156135815781548a820152908501908201613568565b505050860193505b505050838582379092019182525092915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b039490941684526020840192909252604083015263ffffffff16606082015260800190565b6001600160a01b03929092168252602082015260806040820181905260009082015260a060608201819052600b908201526a72656c617965722066656560a81b60c082015260e00190565b6001600160a01b039290921682526020820152608060408201819052600090820181905260a06060830181905282015260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0397881681526020810196909652604086019490945263ffffffff9290921660608501528416608084015290921660a082015260c081019190915260e00190565b901515815260200190565b90815260200190565b9788526001600160a01b039687166020890152604088019590955260608701939093529316608085015260a084019290925260c083019190915260e08201526101000190565b93845260ff9290921660208401526040830152606082015260800190565b600060608252846060830152848660808401378060808684010152601f19601f860116820160808382030160208401526137be608082018661349a565b91505082604083015295945050505050565b600060208252612647602083018461349a565b6000604082526137f6604083018561349a565b90508260208301529392505050565b60208082526025908201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6040820152641b1bddd95960da1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601f908201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604082015260600190565b60208082526019908201527f4272696467653a207472616e7366657220666565206661696c00000000000000604082015260600190565b6020808252601590820152744c69625574696c733a204e6f20646563696d616c7360581b604082015260600190565b6020808252601b908201527f4272696467653a2046656465726174696f6e20697320656d7074790000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601190820152704272696467653a20557067726164696e6760781b604082015260600190565b602080825260169082015275213934b233b29d1034b73b30b634b21039b2b73232b960511b604082015260600190565b602080825260139082015272084e4d2c8ceca74409cead8d840a8f090c2e6d606b1b604082015260600190565b6020808252818101527f526f6c65733a206163636f756e7420646f65736e2774206861766520726f6c65604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60208082526028908201527f506175736572526f6c653a2063616c6c657220646f65736e277420686176652060408201526774686520726f6c6560c01b606082015260800190565b60208082526019908201527f4272696467653a20494e56414c49445f5349474e415455524500000000000000604082015260600190565b60208082526010908201526f04272696467653a20416d6f756e7420360841b604082015260600190565b6020808252601690820152754272696467653a20777261707020697320656d70747960501b604082015260600190565b602080825260159082015274213934b233b29d102ab735b737bbb7103a37b5b2b760591b604082015260600190565b6020808252601b908201527f4272696467653a204e6f7420746f207468697320616464726573730000000000604082015260600190565b602080825260169082015275213934b233b29d102737ba102332b232b930ba34b7b760511b604082015260600190565b60208082526028908201527f4272696467653a2053706563696679207265636569766572206164647265737360408201526720696e206461746160c01b606082015260800190565b60208082526018908201527f4c69625574696c733a204e6f206772616e756c61726974790000000000000000604082015260600190565b6020808252600f908201526e4272696467653a204e756c6c20546f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f4272696467653a207772617070656443757272656e637920656d707479000000604082015260600190565b6020808252600f908201526e109c9a5919d94e8811561412549151608a1b604082015260600190565b60208082526021908201527f4272696467653a2053696465546f6b656e466163746f727920697320656d70746040820152607960f81b606082015260800190565b602080825260159082015274109c9a5919d94e881d1c985b9cd9995c8819985a5b605a1b604082015260600190565b6020808252601c908201527f4c69625574696c733a20446563696d616c73206e6f74203c3d20313800000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260129082015271213934b233b29d10273ab636103a37b5b2b760711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526022908201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526017908201527f4272696467653a20416c726561647920636c61696d6564000000000000000000604082015260600190565b60208082526018908201527f4272696467653a20416c72656164792061636365707465640000000000000000604082015260600190565b602080825260169082015275084e4d2c8ceca74409cead8d84084d8dec6d690c2e6d60531b604082015260600190565b6020808252601c908201527f4272696467653a20416c6c6f77546f6b656e7320697320656d70747900000000604082015260600190565b60208082526018908201527f4272696467653a204e6f742045524337373720746f6b656e0000000000000000604082015260600190565b602080825260169082015275109c9a5919d94e88151e081b9bdd0818dc9bdcdcd95960521b604082015260600190565b602080825260149082015273084e4d2c8ceca7440cccaca40e8dede40d0d2ced60631b604082015260600190565b60208082526022908201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601690820152754272696467653a20416c72656164792065786973747360501b604082015260600190565b60208082526017908201527f4272696467653a20626967676572207468616e20313025000000000000000000604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b60208082526021908201527f4272696467653a2057726f6e67207472616e73616374696f6e446174614861736040820152600d60fb1b606082015260800190565b60008382526040602083015261278e604083018461349a565b60405181810167ffffffffffffffff811182821017156141f357fe5b604052919050565b60005b838110156142165781810151838201526020016141fe565b8381111561170f5750506000910152565b6001600160a01b038116811461179e57600080fd5b801515811461179e57600080fdfea26469706673582212204107de5d3148e869a8c1b6e3aaa625981cfa92646cc82b5617681e154df449ef64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__Pausable_init(address)": {
        "details": "Initializes the contract in unpaused state. Assigns the Pauser role to the deployer."
      },
      "initialize(address)": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Called by a pauser to pause, triggers stopped state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptTransfer(address,address,address,uint256,bytes32,bytes32,uint32)": {
        "notice": "Accepts the transaction from the other chain that was voted and sent by the Federation contract"
      },
      "claim((address,uint256,bytes32,bytes32,uint32))": {
        "notice": "Claims the crossed transaction using the hash, this sends the funds to the address indicated in"
      },
      "depositTo(address)": {
        "notice": "Use network currency and cross it."
      },
      "receiveTokensTo(address,address,uint256)": {
        "notice": "ERC-20 tokens approve and transferFrom pattern See https://eips.ethereum.org/EIPS/eip-20#transferfrom"
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction See https://eips.ethereum.org/EIPS/eip-777#motivation for details"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15906,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15909,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15949,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15973,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "_pausers",
        "offset": 0,
        "slot": "51",
        "type": "t_struct(Role)10250_storage"
      },
      {
        "astId": 16095,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 16193,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 1,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 16907,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "_guardCounter",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 1282,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "federation",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 1284,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "feePercentage",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 1286,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "symbolPrefix",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 1288,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "57",
        "type": "t_bytes32"
      },
      {
        "astId": 1290,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "_deprecatedSpentToday",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 1294,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "mappedTokens",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1298,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "originalTokens",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1302,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "knownTokens",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1306,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "claimed",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1308,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "allowTokens",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(IAllowTokens)7228"
      },
      {
        "astId": 1310,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "sideTokenFactory",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(ISideTokenFactory)7625"
      },
      {
        "astId": 1312,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "isUpgrading",
        "offset": 20,
        "slot": "64",
        "type": "t_bool"
      },
      {
        "astId": 1322,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "wrappedCurrency",
        "offset": 0,
        "slot": "65",
        "type": "t_contract(IWrapped)7678"
      },
      {
        "astId": 1326,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "transactionsDataHashes",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 1330,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "originalTokenAddresses",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1334,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "senderAddresses",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1341,
        "contract": "contracts/Bridge/Bridge.sol:Bridge",
        "label": "nonces",
        "offset": 0,
        "slot": "69",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAllowTokens)7228": {
        "encoding": "inplace",
        "label": "contract IAllowTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISideTokenFactory)7625": {
        "encoding": "inplace",
        "label": "contract ISideTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IWrapped)7678": {
        "encoding": "inplace",
        "label": "contract IWrapped",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)10250_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 10249,
            "contract": "contracts/Bridge/Bridge.sol:Bridge",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}