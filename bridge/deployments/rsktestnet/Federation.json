{
  "address": "0xD87975fcAd9F7AD00D6F02a83c46f9E729C77b3B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "BridgeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "federator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fedVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fedChainsIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fedChainsBlocks",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "fedChainsInfo",
          "type": "string[]"
        }
      ],
      "name": "HeartBeat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeNFT",
          "type": "address"
        }
      ],
      "name": "NFTBridgeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "federator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MEMBER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeNFT",
      "outputs": [
        {
          "internalType": "contract INFTBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fedVersion",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "fedChainsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fedChainsBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "fedChainsInfo",
          "type": "string[]"
        }
      ],
      "name": "emitHeartbeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "getTransactionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeNFT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionIdMultichain",
          "type": "bytes32"
        }
      ],
      "name": "isProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionIdMultichain",
          "type": "bytes32"
        }
      ],
      "name": "isVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldMember",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeNFT",
          "type": "address"
        }
      ],
      "name": "setNFTBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "transactionWasProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "internalType": "enum IFederation.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "voteTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0892bc94724e5e643a662c95e7328edf6caba8ee1d7c82e36f84026a6ed2a6f7",
  "receipt": {
    "to": null,
    "from": "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
    "contractAddress": "0xD87975fcAd9F7AD00D6F02a83c46f9E729C77b3B",
    "transactionIndex": 0,
    "gasUsed": "2396380",
    "logsBloom": "0x
    "blockHash": "0xf6ac61a775f8feca214f101d0b9d1aef1d615dc4277e90962c3e23efb9ea9da2",
    "transactionHash": "0x0892bc94724e5e643a662c95e7328edf6caba8ee1d7c82e36f84026a6ed2a6f7",
    "logs": [],
    "blockNumber": 2580604,
    "cumulativeGasUsed": "2396380",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f27c8e19ddc2cd2a95162a1eabc0e272",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fedVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fedChainsIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fedChainsBlocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"fedChainsInfo\",\"type\":\"string[]\"}],\"name\":\"HeartBeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeNFT\",\"type\":\"address\"}],\"name\":\"NFTBridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MEMBER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeNFT\",\"outputs\":[{\"internalType\":\"contract INFTBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fedVersion\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"fedChainsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fedChainsBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"fedChainsInfo\",\"type\":\"string[]\"}],\"name\":\"emitHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"getTransactionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeNFT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionIdMultichain\",\"type\":\"bytes32\"}],\"name\":\"isProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionIdMultichain\",\"type\":\"bytes32\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeNFT\",\"type\":\"address\"}],\"name\":\"setNFTBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"transactionWasProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"enum IFederation.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"voteTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMember(address)\":{\"params\":{\"_newMember\":\"address of the new member\"}},\"changeRequirement(uint256)\":{\"details\":\"Emits the RequirementChange event\",\"params\":{\"_required\":\"the number of minimum members to approve an transaction, it has to be bigger than 1\"}},\"emitHeartbeat(string,uint256[],uint256[],string[])\":{\"details\":\"Emits HeartBeat event\"},\"getMembers()\":{\"returns\":{\"_0\":\"Current members\"}},\"getTransactionCount(bytes32)\":{\"params\":{\"transactionId\":\"The transaction hashed from getTransactionId function\"}},\"getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)\":{\"details\":\"It encodes and applies keccak256 to the parameters received in the same order\",\"params\":{\"amount\":\"Could be the amount or the tokenId\",\"blockHash\":\"The block hash in which the transaction with the cross event occurred\",\"destinationChainId\":\"Is chainId of the destination chain\",\"logIndex\":\"Index of the event in the logs\",\"originChainId\":\"Is chainId of the original chain\",\"originalTokenAddress\":\"The address of the token in the origin (main) chain\",\"receiver\":\"Who is going to receive the token in the opposite chain\",\"sender\":\"The address who solicited the cross token\",\"transactionHash\":\"The transaction in which the cross event occurred\"},\"returns\":{\"_0\":\"The hash generated by the parameters.\"}},\"initialize(address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeMember(address)\":{\"params\":{\"_oldMember\":\"address of the member to be removed from federation\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBridge(address)\":{\"details\":\"Emits BridgeChanged event\",\"params\":{\"_bridge\":\"the new bridge contract address that should implement the IBridge interface\"}},\"setNFTBridge(address)\":{\"details\":\"Emits NFTBridgeChanged event\",\"params\":{\"_bridgeNFT\":\"the new NFT bridge contract address that should implement the INFTBridge interface\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"version in v{Number}\"}},\"voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint8,uint256,uint256)\":{\"params\":{\"blockHash\":\"The block hash in which the transaction with the cross event occurred\",\"destinationChainId\":\"Is chainId of the destination chain\",\"logIndex\":\"Index of the event in the logs\",\"originChainId\":\"Is chainId of the original chain\",\"originalTokenAddress\":\"The address of the token in the origin (main) chain\",\"receiver\":\"Who is going to receive the token in the opposite chain\",\"sender\":\"The address who solicited the cross token\",\"tokenType\":\"Is the type of bridge to be used\",\"transactionHash\":\"The transaction in which the cross event occurred\",\"value\":\"Could be the amount if tokenType == COIN or the tokenId if tokenType == NFT\"}}},\"stateVariables\":{\"isMember\":{\"details\":\"The address should be a member to vote in transactions\"},\"required\":{\"details\":\"It should have at least the required amount of members\"},\"votes\":{\"details\":\"the members should approve the transaction by 50% + 1\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(address)\":{\"notice\":\"Add a new member to the federation\"},\"bridgeNFT()\":{\"notice\":\"Federator v3 variables \"},\"changeRequirement(uint256)\":{\"notice\":\"Changes the number of required members to vote and approve an transaction\"},\"emitHeartbeat(string,uint256[],uint256[],string[])\":{\"notice\":\"It emits an HeartBeat like an health check\"},\"getMembers()\":{\"notice\":\"Return all the current members of the federation\"},\"getTransactionCount(bytes32)\":{\"notice\":\"Get the amount of approved votes for that transactionId\"},\"getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)\":{\"notice\":\"Gets the hash of transaction from the following parameters encoded and keccaked\"},\"isMember(address)\":{\"notice\":\"All the addresses that are members of the federation\"},\"processed(bytes32)\":{\"notice\":\"(bytes32) transactionId => (bool) votedCheck if that transaction was already processed\"},\"removeMember(address)\":{\"notice\":\"Remove a member of the federation\"},\"required()\":{\"notice\":\"The minimum amount of votes to approve a transaction\"},\"setBridge(address)\":{\"notice\":\"Sets a new bridge contract\"},\"setNFTBridge(address)\":{\"notice\":\"Sets a new NFT bridge contract\"},\"version()\":{\"notice\":\"Current version of the contract\"},\"voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint8,uint256,uint256)\":{\"notice\":\"Vote in a transaction, if it has enough votes it accepts the transfer\"},\"votes(bytes32,address)\":{\"notice\":\"(bytes32) transactionId = keccak256( abi.encodePacked( originalTokenAddress, sender, receiver, amount, blockHash, transactionHash, logIndex ) ) => ( (address) members => (bool) voted )Votes by members by the transaction ID\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/federation/Federation.sol\":\"Federation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/federation/Federation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n// Upgradables\\nimport \\\"../zeppelin/upgradable/Initializable.sol\\\";\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableOwnable.sol\\\";\\n\\nimport \\\"../nftbridge/INFTBridge.sol\\\";\\nimport \\\"../interface/IBridge.sol\\\";\\nimport \\\"../interface/IFederation.sol\\\";\\ncontract Federation is Initializable, UpgradableOwnable, IFederation {\\n\\tuint constant public MAX_MEMBER_COUNT = 50;\\n\\taddress constant private NULL_ADDRESS = address(0);\\n\\n\\tIBridge public bridge;\\n\\taddress[] public members;\\n\\n\\t/**\\n\\t\\t@notice The minimum amount of votes to approve a transaction\\n\\t\\t@dev It should have at least the required amount of members\\n\\t\\t*/\\n\\tuint public required;\\n\\n\\t/**\\n\\t\\t@notice All the addresses that are members of the federation\\n\\t\\t@dev The address should be a member to vote in transactions\\n\\t\\t*/\\n\\tmapping (address => bool) public isMember;\\n\\n\\t/**\\n\\t\\t(bytes32) transactionId = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex\\n\\t\\t\\t)\\n\\t\\t) => (\\n\\t\\t\\t(address) members => (bool) voted\\n\\t\\t)\\n\\t\\t@notice Votes by members by the transaction ID\\n\\t\\t@dev the members should approve the transaction by 50% + 1\\n\\t\\t*/\\n\\tmapping (bytes32 => mapping (address => bool)) public votes;\\n\\n\\t/**\\n\\t\\t(bytes32) transactionId => (bool) voted\\n\\t\\t@notice Check if that transaction was already processed\\n\\t*/\\n\\tmapping(bytes32 => bool) public processed;\\n\\n\\t/** Federator v3 variables */\\n\\tINFTBridge public bridgeNFT;\\n\\n\\tmodifier onlyMember() {\\n\\t\\trequire(isMember[_msgSender()], \\\"Federation: Not Federator\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier validRequirement(uint membersCount, uint _required) {\\n\\t\\trequire(_required <= membersCount && _required != 0 && membersCount != 0, \\\"Federation: Invalid requirements\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress[] calldata _members,\\n\\t\\tuint _required,\\n\\t\\taddress _bridge,\\n\\t\\taddress owner,\\n\\t\\taddress _bridgeNFT\\n\\t) public validRequirement(_members.length, _required) initializer {\\n\\t\\tUpgradableOwnable.initialize(owner);\\n\\t\\trequire(_members.length <= MAX_MEMBER_COUNT, \\\"Federation: Too many members\\\");\\n\\t\\tmembers = _members;\\n\\t\\tfor (uint i = 0; i < _members.length; i++) {\\n\\t\\t\\trequire(!isMember[_members[i]] && _members[i] != NULL_ADDRESS, \\\"Federation: Invalid members\\\");\\n\\t\\t\\tisMember[_members[i]] = true;\\n\\t\\t\\temit MemberAddition(_members[i]);\\n\\t\\t}\\n\\t\\trequired = _required;\\n\\t\\temit RequirementChange(required);\\n\\t\\t_setBridge(_bridge);\\n\\t\\t_setNFTBridge(_bridgeNFT);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Current version of the contract\\n\\t\\t@return version in v{Number}\\n\\t\\t*/\\n\\tfunction version() external pure override returns (string memory) {\\n\\t\\treturn \\\"v3\\\";\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Sets a new bridge contract\\n\\t\\t@dev Emits BridgeChanged event\\n\\t\\t@param _bridge the new bridge contract address that should implement the IBridge interface\\n\\t\\t*/\\n\\tfunction setBridge(address _bridge) external onlyOwner override {\\n\\t\\t_setBridge(_bridge);\\n\\t}\\n\\n\\tfunction _setBridge(address _bridge) internal {\\n\\t\\trequire(_bridge != NULL_ADDRESS, \\\"Federation: Empty bridge\\\");\\n\\t\\tbridge = IBridge(_bridge);\\n\\t\\temit BridgeChanged(_bridge);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Sets a new NFT bridge contract\\n\\t\\t@dev Emits NFTBridgeChanged event\\n\\t\\t@param _bridgeNFT the new NFT bridge contract address that should implement the INFTBridge interface\\n\\t\\t*/\\n\\tfunction setNFTBridge(address _bridgeNFT) external onlyOwner override {\\n\\t\\trequire(_bridgeNFT != NULL_ADDRESS, \\\"Federation: Empty NFT bridge\\\");\\n\\t\\t_setNFTBridge(_bridgeNFT);\\n\\t}\\n\\n\\tfunction _setNFTBridge(address _bridgeNFT) internal {\\n\\t\\tbridgeNFT = INFTBridge(_bridgeNFT);\\n\\t\\temit NFTBridgeChanged(_bridgeNFT);\\n\\t}\\n\\n\\tfunction validateTransaction(bytes32 transactionId, bytes32 transactionIdMultichain) internal view returns(bool) {\\n\\t\\tuint256 minimumVotes = getMinimalNumberOfVotes();\\n\\t\\tuint256 amountVotes = 0;\\n\\n    for (uint256 i = 0; i < members.length; i++) {\\n      if (votes[transactionIdMultichain][members[i]]) {\\n        amountVotes += 1;\\n\\t\\t\\t} else if (votes[transactionId][members[i]]) {\\n        amountVotes += 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (amountVotes >= minimumVotes && amountVotes >= required) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n    }\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction getMinimalNumberOfVotes() internal view returns(uint256) {\\n\\t\\treturn members.length / 2 + 1;\\n\\t}\\n\\n\\tfunction isProcessed(bytes32 transactionId, bytes32 transactionIdMultichain) public view returns(bool) {\\n\\t\\treturn processed[transactionIdMultichain] || processed[transactionId];\\n\\t}\\n\\n\\tfunction isVoted(bytes32 transactionId, bytes32 transactionIdMultichain) public view returns(bool) {\\n\\t\\treturn votes[transactionIdMultichain][_msgSender()] || votes[transactionId][_msgSender()];\\n\\t}\\n\\n\\tfunction shouldBeCurrentChainId(uint256 chainId) internal view {\\n\\t\\trequire(chainId == block.chainid, \\\"Federation: Not block.chainid\\\");\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Vote in a transaction, if it has enough votes it accepts the transfer\\n\\t\\t@param originalTokenAddress The address of the token in the origin (main) chain\\n\\t\\t@param sender The address who solicited the cross token\\n\\t\\t@param receiver Who is going to receive the token in the opposite chain\\n\\t\\t@param value Could be the amount if tokenType == COIN or the tokenId if tokenType == NFT\\n\\t\\t@param blockHash The block hash in which the transaction with the cross event occurred\\n\\t\\t@param transactionHash The transaction in which the cross event occurred\\n\\t\\t@param logIndex Index of the event in the logs\\n\\t\\t@param tokenType Is the type of bridge to be used\\n\\t\\t@param originChainId Is chainId of the original chain\\n\\t\\t@param destinationChainId Is chainId of the destination chain\\n\\t\\t*/\\n\\tfunction voteTransaction(\\n\\t\\taddress originalTokenAddress,\\n\\t\\taddress payable sender,\\n\\t\\taddress payable receiver,\\n\\t\\tuint256 value,\\n\\t\\tbytes32 blockHash,\\n\\t\\tbytes32 transactionHash,\\n\\t\\tuint32 logIndex,\\n\\t\\tTokenType tokenType,\\n\\t\\tuint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n\\t) external onlyMember override {\\n\\t\\tshouldBeCurrentChainId(destinationChainId);\\n\\t\\tbytes32 transactionId = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tbytes32 transactionIdMultichain = getTransactionId(\\n\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\tsender,\\n\\t\\t\\treceiver,\\n\\t\\t\\tvalue,\\n\\t\\t\\tblockHash,\\n\\t\\t\\ttransactionHash,\\n\\t\\t\\tlogIndex,\\n\\t\\t\\toriginChainId,\\n\\t\\t\\tdestinationChainId\\n\\t\\t);\\n\\n\\t\\tif (isProcessed(transactionId, transactionIdMultichain))\\n\\t\\t\\treturn;\\n\\n\\t\\tif (isVoted(transactionId, transactionIdMultichain))\\n\\t\\t\\treturn;\\n\\n\\t\\tvotes[transactionIdMultichain][_msgSender()] = true;\\n\\t\\temit Voted(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\ttransactionHash,\\n\\t\\t\\ttransactionIdMultichain,\\n\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\tsender,\\n\\t\\t\\treceiver,\\n\\t\\t\\tvalue,\\n\\t\\t\\tblockHash,\\n\\t\\t\\tlogIndex,\\n\\t\\t\\toriginChainId,\\n\\t\\t\\tdestinationChainId\\n\\t\\t);\\n\\n\\t\\tif (validateTransaction(transactionId, transactionIdMultichain)) {\\n\\t\\t\\tprocessed[transactionIdMultichain] = true;\\n\\n\\t\\t\\tacceptTransfer(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex,\\n\\t\\t\\t\\ttokenType,\\n\\t\\t\\t\\toriginChainId,\\n\\t\\t\\t\\tdestinationChainId\\n\\t\\t\\t);\\n\\n\\t\\t\\temit Executed(\\n\\t\\t\\t\\t_msgSender(),\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\ttransactionIdMultichain,\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\tlogIndex,\\n\\t\\t\\t\\toriginChainId,\\n\\t\\t\\t\\tdestinationChainId\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n  function acceptTransfer(\\n    address originalTokenAddress,\\n    address payable sender,\\n    address payable receiver,\\n    uint256 value,\\n    bytes32 blockHash,\\n    bytes32 transactionHash,\\n    uint32 logIndex,\\n    TokenType tokenType,\\n\\tuint256 originChainId,\\n\\tuint256\\tdestinationChainId\\n  ) internal {\\n    if (tokenType == TokenType.NFT) {\\n      require(address(bridgeNFT) != NULL_ADDRESS, \\\"Federation: Empty NFTBridge\\\");\\n      bridgeNFT.acceptTransfer(\\n        originalTokenAddress,\\n        sender,\\n        receiver,\\n        value,\\n        blockHash,\\n        transactionHash,\\n        logIndex,\\n\\t\\toriginChainId,\\n\\t\\tdestinationChainId\\n      );\\n    } else {\\n\\t  bridge.acceptTransfer(\\n\\t\\toriginalTokenAddress,\\n\\t\\tsender,\\n\\t\\treceiver,\\n\\t\\tvalue,\\n\\t\\tblockHash,\\n\\t\\ttransactionHash,\\n\\t\\tlogIndex,\\n\\t\\toriginChainId,\\n\\t\\tdestinationChainId\\n\\t  );\\n\\t}\\n  }\\n\\n  /**\\n    @notice Get the amount of approved votes for that transactionId\\n    @param transactionId The transaction hashed from getTransactionId function\\n   */\\n  function getTransactionCount(bytes32 transactionId) public view returns(uint) {\\n    uint count = 0;\\n    for (uint i = 0; i < members.length; i++) {\\n      if (votes[transactionId][members[i]])\\n        count += 1;\\n    }\\n    return count;\\n  }\\n\\n\\tfunction hasVoted(bytes32 transactionId) external view returns(bool) {\\n\\t\\treturn votes[transactionId][_msgSender()];\\n\\t}\\n\\n\\tfunction transactionWasProcessed(bytes32 transactionId) external view returns(bool) {\\n\\t\\treturn processed[transactionId];\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Gets the hash of transaction from the following parameters encoded and keccaked\\n\\t\\t@dev It encodes and applies keccak256 to the parameters received in the same order\\n\\t\\t@param originalTokenAddress The address of the token in the origin (main) chain\\n\\t\\t@param sender The address who solicited the cross token\\n\\t\\t@param receiver Who is going to receive the token in the opposite chain\\n\\t\\t@param amount Could be the amount or the tokenId\\n\\t\\t@param blockHash The block hash in which the transaction with the cross event occurred\\n\\t\\t@param transactionHash The transaction in which the cross event occurred\\n\\t\\t@param logIndex Index of the event in the logs\\n\\t\\t@param originChainId Is chainId of the original chain\\n\\t\\t@param destinationChainId Is chainId of the destination chain\\n\\t\\t@return The hash generated by the parameters.\\n\\t*/\\n\\tfunction getTransactionId(\\n\\t\\taddress originalTokenAddress,\\n\\t\\taddress sender,\\n\\t\\taddress receiver,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32 blockHash,\\n\\t\\tbytes32 transactionHash,\\n\\t\\tuint32 logIndex,\\n\\t\\tuint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n\\t) public pure returns(bytes32) {\\n\\t\\treturn keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex,\\n\\t\\t\\t\\toriginChainId,\\n\\t\\t\\t\\tdestinationChainId\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction addMember(address _newMember) external onlyOwner override {\\n\\t\\trequire(_newMember != NULL_ADDRESS, \\\"Federation: Empty member\\\");\\n\\t\\trequire(!isMember[_newMember], \\\"Federation: Member already exists\\\");\\n\\t\\trequire(members.length < MAX_MEMBER_COUNT, \\\"Federation: Max members reached\\\");\\n\\n\\t\\tisMember[_newMember] = true;\\n\\t\\tmembers.push(_newMember);\\n\\t\\temit MemberAddition(_newMember);\\n\\t}\\n\\n\\tfunction removeMember(address _oldMember) external onlyOwner override {\\n\\t\\trequire(_oldMember != NULL_ADDRESS, \\\"Federation: Empty member\\\");\\n\\t\\trequire(isMember[_oldMember], \\\"Federation: Member doesn't exists\\\");\\n\\t\\trequire(members.length > 1, \\\"Federation: Can't remove all the members\\\");\\n\\t\\trequire(members.length - 1 >= required, \\\"Federation: Can't have less than required members\\\");\\n\\n\\t\\tisMember[_oldMember] = false;\\n\\t\\tfor (uint i = 0; i < members.length - 1; i++) {\\n\\t\\t\\tif (members[i] == _oldMember) {\\n\\t\\t\\t\\tmembers[i] = members[members.length - 1];\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tmembers.pop(); // remove an element from the end of the array.\\n\\t\\temit MemberRemoval(_oldMember);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Return all the current members of the federation\\n\\t\\t@return Current members\\n\\t\\t*/\\n\\tfunction getMembers() external view override returns (address[] memory) {\\n\\t\\treturn members;\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Changes the number of required members to vote and approve an transaction\\n\\t\\t@dev Emits the RequirementChange event\\n\\t\\t@param _required the number of minimum members to approve an transaction, it has to be bigger than 1\\n\\t\\t*/\\n\\tfunction changeRequirement(uint _required) external onlyOwner validRequirement(members.length, _required) override {\\n\\t\\trequire(_required >= 2, \\\"Federation: Requires at least 2\\\");\\n\\t\\trequired = _required;\\n\\t\\temit RequirementChange(_required);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice It emits an HeartBeat like an health check\\n\\t\\t@dev Emits HeartBeat event\\n\\t\\t*/\\n\\tfunction emitHeartbeat(\\n\\t\\tstring calldata fedVersion,\\n\\t\\tuint256[] calldata fedChainsIds,\\n\\t\\tuint256[] calldata fedChainsBlocks,\\n\\t\\tstring[] calldata fedChainsInfo\\n\\t) external onlyMember override {\\n\\t\\trequire(fedChainsIds.length == fedChainsBlocks.length &&\\n\\t\\t\\tfedChainsIds.length == fedChainsInfo.length, \\\"Federation: Length missmatch\\\");\\n\\t\\temit HeartBeat(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tblock.chainid,\\n\\t\\t\\tblock.number,\\n\\t\\t\\tfedVersion,\\n\\t\\t\\tfedChainsIds,\\n\\t\\t\\tfedChainsBlocks,\\n\\t\\t\\tfedChainsInfo\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x54d6ded45858d8c9175b8e77414e22e8a63298769ce5717974444055bfc8a218\",\"license\":\"MIT\"},\"contracts/interface/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\ninterface IBridge {\\n\\n\\tstruct ClaimData {\\n\\t\\taddress payable to;\\n\\t\\tuint256 amount;\\n\\t\\tbytes32 blockHash;\\n\\t\\tbytes32 transactionHash;\\n\\t\\tuint32 logIndex;\\n\\t\\tuint256 originChainId;\\n\\t}\\n\\n\\tstruct OriginalToken {\\n\\t\\taddress tokenAddress;\\n\\t\\tuint256 originChainId;\\n\\t}\\n\\n\\tfunction version() external pure returns (string memory);\\n\\n\\tfunction getFeePercentage() external view returns(uint);\\n\\n\\t/**\\n\\t\\t* ERC-20 tokens approve and transferFrom pattern\\n\\t\\t* See https://eips.ethereum.org/EIPS/eip-20#transferfrom\\n\\t\\t*/\\n\\tfunction receiveTokensTo(uint256 chainId, address tokenToUse, address to, uint256 amount) external;\\n\\n\\t/**\\n\\t\\t* Use network currency and cross it.\\n\\t\\t*/\\n\\tfunction depositTo(uint256 chainId, address to) external payable;\\n\\n\\t/**\\n\\t\\t* ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\\n\\t\\t* See https://eips.ethereum.org/EIPS/eip-777#motivation for details\\n\\t\\t* @param userData it can be 2 options in the first one you can send the receiver and the chain id of the destination\\n\\t\\t* const userData = web3.eth.abi.encodeParameters(\\n    *   [\\\"address\\\", \\\"uint256\\\"],\\n    *   [anAccount.toLowerCase(), chains.ETHEREUM_MAIN_NET_CHAIN_ID]\\n    * );\\n\\t\\t* or you also can send only the destination chain id, and the receiver would be the same as the from parameter\\n\\t\\t* const userData = web3.eth.abi.encodeParameters([\\\"uint256\\\"], [chains.ETHEREUM_MAIN_NET_CHAIN_ID]);\\n\\t\\t*/\\n\\tfunction tokensReceived (\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint amount,\\n\\t\\tbytes calldata userData,\\n\\t\\tbytes calldata operatorData\\n\\t) external;\\n\\n\\t/**\\n\\t\\t* Accepts the transaction from the other chain that was voted and sent by the Federation contract\\n\\t\\t*/\\n\\tfunction acceptTransfer(\\n\\t\\taddress _originalTokenAddress,\\n\\t\\taddress payable _from,\\n\\t\\taddress payable _to,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tbytes32 _transactionHash,\\n\\t\\tuint32 _logIndex,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256\\t_destinationChainId\\n\\t) external;\\n\\n\\t/**\\n\\t\\t* Claims the crossed transaction using the hash, this sends the funds to the address indicated in\\n\\t\\t*/\\n\\tfunction claim(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\\n\\n\\tfunction claimFallback(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\\n\\n\\tfunction claimGasless(\\n\\t\\tClaimData calldata _claimData,\\n\\t\\taddress payable _relayer,\\n\\t\\tuint256 _fee,\\n\\t\\tuint256 _deadline,\\n\\t\\tuint8 _v,\\n\\t\\tbytes32 _r,\\n\\t\\tbytes32 _s\\n\\t) external returns (uint256 receivedAmount);\\n\\n\\tfunction createSideToken(\\n\\t\\tuint256 _typeId,\\n\\t\\taddress _originalTokenAddress,\\n\\t\\tuint8 _originalTokenDecimals,\\n\\t\\tstring calldata _originalTokenSymbol,\\n\\t\\tstring calldata _originalTokenName,\\n\\t\\tuint256 _chainId\\n\\t) external;\\n\\n\\tfunction getTransactionDataHash(\\n\\t\\taddress _to,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tbytes32 _transactionHash,\\n\\t\\tuint32 _logIndex,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256 _destinationChainId\\n\\t) external returns(bytes32);\\n\\n\\tevent Cross(\\n\\t\\taddress indexed _tokenAddress,\\n\\t\\taddress indexed _to,\\n\\t\\tuint256 indexed _destinationChainId,\\n\\t\\taddress _from,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes _userData\\n\\t);\\n\\n\\tevent NewSideToken(\\n\\t\\taddress indexed _newSideTokenAddress,\\n\\t\\taddress indexed _originalTokenAddress,\\n\\t\\tstring _newSymbol,\\n\\t\\tuint256 _granularity,\\n\\t\\tuint256 _chainId\\n\\t);\\n\\tevent AcceptedCrossTransfer(\\n\\t\\tbytes32 indexed _transactionHash,\\n\\t\\taddress indexed _originalTokenAddress,\\n\\t\\taddress indexed _to,\\n\\t\\taddress  _from,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tuint256 _logIndex,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256\\t_destinationChainId\\n\\t);\\n\\tevent FeePercentageChanged(uint256 _amount);\\n\\tevent Claimed(\\n\\t\\tbytes32 indexed _transactionHash,\\n\\t\\taddress indexed _originalTokenAddress,\\n\\t\\taddress indexed _to,\\n\\t\\taddress _sender,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tuint256 _logIndex,\\n\\t\\taddress _reciever,\\n\\t\\taddress _relayer,\\n\\t\\tuint256 _fee,\\n\\t\\tuint256 _destinationChainId,\\n\\t\\tuint256 _originChainId\\n\\t);\\n}\",\"keccak256\":\"0x6731a952e7419e95412fd97c9f34ef403a2c16d2cf5cb1bbab4374fa6d41ff0f\",\"license\":\"MIT\"},\"contracts/interface/IFederation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface IFederation {\\n  enum TokenType{ COIN, NFT }\\n\\n  /**\\n    @notice Current version of the contract\\n    @return version in v{Number}\\n    */\\n  function version() external pure returns (string memory);\\n\\n  /**\\n    @notice Sets a new bridge contract\\n    @param _bridge the new bridge contract address that should implement the IBridge interface\\n  */\\n  function setBridge(address _bridge) external;\\n\\n  /**\\n    @notice Sets a new NFT bridge contract\\n    @param _bridgeNFT the new NFT bridge contract address that should implement the INFTBridge interface\\n  */\\n  function setNFTBridge(address _bridgeNFT) external;\\n\\n  /**\\n    @notice Vote in a transaction, if it has enough votes it accepts the transfer\\n    @param originalTokenAddress The address of the token in the origin (main) chain\\n    @param sender The address who solicited the cross token\\n    @param receiver Who is going to receive the token in the opposite chain\\n    @param value Could be the amount if tokenType == COIN or the tokenId if tokenType == NFT\\n    @param blockHash The block hash in which the transaction with the cross event occurred\\n    @param transactionHash The transaction in which the cross event occurred\\n    @param logIndex Index of the event in the logs\\n    @param tokenType Is the type of bridge to be used\\n\\t\\t@param originChainId Is chainId of the original chain\\n\\t\\t@param destinationChainId Is chainId of the destination chain\\n  */\\n  function voteTransaction(\\n    address originalTokenAddress,\\n    address payable sender,\\n    address payable receiver,\\n    uint256 value,\\n    bytes32 blockHash,\\n    bytes32 transactionHash,\\n    uint32 logIndex,\\n    TokenType tokenType,\\n\\t  uint256 originChainId,\\n\\t  uint256\\tdestinationChainId\\n  ) external;\\n\\n  /**\\n    @notice Add a new member to the federation\\n    @param _newMember address of the new member\\n  */\\n  function addMember(address _newMember) external;\\n\\n  /**\\n    @notice Remove a member of the federation\\n    @param _oldMember address of the member to be removed from federation\\n  */\\n  function removeMember(address _oldMember) external;\\n\\n  /**\\n    @notice Return all the current members of the federation\\n    @return Current members\\n  */\\n  function getMembers() external view returns (address[] memory);\\n\\n  /**\\n    @notice Changes the number of required members to vote and approve an transaction\\n    @param _required the number of minimum members to approve an transaction, it has to be bigger than 1\\n  */\\n  function changeRequirement(uint _required) external;\\n\\n  /**\\n    @notice It emmits an HeartBeat like an healthy check\\n  */\\n  function emitHeartbeat(\\n    string calldata federatorVersion,\\n\\t\\tuint256[] calldata fedChainsIds,\\n\\t\\tuint256[] calldata fedChainsBlocks,\\n\\t\\tstring[] calldata fedChainsInfo\\n  ) external;\\n\\n  event Executed(\\n    address indexed federator,\\n    bytes32 indexed transactionHash,\\n    bytes32 indexed transactionId,\\n    address originalTokenAddress,\\n    address sender,\\n    address receiver,\\n    uint256 amount,\\n    bytes32 blockHash,\\n    uint32 logIndex,\\n\\t\\tuint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n  );\\n  event MemberAddition(address indexed member);\\n  event MemberRemoval(address indexed member);\\n  event RequirementChange(uint required);\\n  event BridgeChanged(address bridge);\\n  event NFTBridgeChanged(address bridgeNFT);\\n  event Voted(\\n    address indexed federator,\\n    bytes32 indexed transactionHash,\\n    bytes32 indexed transactionId,\\n    address originalTokenAddress,\\n    address sender,\\n    address receiver,\\n    uint256 amount,\\n    bytes32 blockHash,\\n    uint32 logIndex,\\n    uint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n  );\\n  event HeartBeat(\\n    address indexed sender,\\n    uint256 currentChainId,\\n    uint256 currentBlock,\\n    string fedVersion,\\n    uint256[] fedChainsIds,\\n\\t\\tuint256[] fedChainsBlocks,\\n\\t\\tstring[] fedChainsInfo\\n  );\\n\\n}\\n\",\"keccak256\":\"0x085d1c40b0845283f29ea8dd32c112caba92baacbc9fb1a2989b6cf48e772f3d\",\"license\":\"MIT\"},\"contracts/nftbridge/INFTBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\ninterface INFTBridge {\\n\\n  struct NFTClaimData {\\n    address payable to;\\n    address from;\\n    uint256 tokenId;\\n    address tokenAddress;\\n    bytes32 blockHash;\\n    bytes32 transactionHash;\\n    uint32 logIndex;\\n    uint256 originChainId;\\n  }\\n\\n\\tstruct OriginalNft {\\n\\t\\taddress nftAddress;\\n\\t\\tuint256 originChainId;\\n\\t}\\n\\n  function version() external pure returns (string memory);\\n\\n  function getFixedFee() external view returns (uint256);\\n\\n  function receiveTokensTo(\\n    address tokenAddress,\\n    address to,\\n    uint256 tokenId,\\n    uint256 destinationChainId\\n  ) external payable;\\n\\n  /**\\n    * Accepts the transaction from the other chain that was voted and sent by the Federation contract\\n    */\\n  function acceptTransfer(\\n    address _originalTokenAddress,\\n    address payable _from,\\n    address payable _to,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    bytes32 _transactionHash,\\n    uint32 _logIndex,\\n    uint256 _originChainId,\\n\\t  uint256\\t_destinationChainId\\n  ) external;\\n\\n  /**\\n    * Claims the crossed transaction using the hash, this sends the token to the address specified in the claim data\\n    */\\n  function claim(NFTClaimData calldata _claimData) external;\\n\\n  function claimFallback(NFTClaimData calldata _claimData) external;\\n\\n  function getTransactionDataHash(\\n    address _to,\\n    address _from,\\n    uint256 _tokenId,\\n    address _tokenAddress,\\n    bytes32 _blockHash,\\n    bytes32 _transactionHash,\\n    uint32 _logIndex,\\n    uint256 _originChainId,\\n\\t\\tuint256\\t_destinationChainId\\n  ) external returns (bytes32);\\n\\n  event Cross(\\n    address indexed _originalTokenAddress,\\n    address indexed _to,\\n    uint256 indexed _destinationChainId,\\n    address _from,\\n    uint256 _originChainId,\\n    address _tokenCreator,\\n    uint256 _totalSupply,\\n    uint256 _tokenId,\\n    string _tokenURI,\\n    bytes _userData\\n  );\\n\\n  event NewSideNFTToken(\\n    address indexed _newSideNFTTokenAddress,\\n    address indexed _originalTokenAddress,\\n    string _newSymbol,\\n    uint256 originChainId\\n  );\\n  event AcceptedNFTCrossTransfer(\\n    bytes32 indexed _transactionHash,\\n    address indexed _originalTokenAddress,\\n    address indexed _to,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    uint256 _logIndex,\\n    uint256 _originChainId,\\n\\t  uint256\\t_destinationChainId\\n  );\\n  event FixedFeeNFTChanged(uint256 _amount);\\n  event ClaimedNFTToken(\\n    bytes32 indexed _transactionHash,\\n    address indexed _originalTokenAddress,\\n    address indexed _to,\\n    address _sender,\\n    uint256 _tokenId,\\n    bytes32 _blockHash,\\n    uint256 _logIndex,\\n    address _receiver,\\n    uint256 _originChainId,\\n\\t  uint256\\t_destinationChainId\\n  );\\n}\\n\",\"keccak256\":\"0xf45f693122c7e5edf3620b4f7a372cba37d85f1ed196362baa7c65d081a02652\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6f3f274a2270bfe073339370edfa2485e2d515a2656039937f6b972fae96d297\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || !initialized, \\\"Contract instance is already initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x14063a689bff5eecf0f36cb519feb575f60349ecf0d425ead5b931b77dd599d4\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradableOwnable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdf439a167ae82e7e3dd241ea0c831a1bb0329432ceb4fa889778d1f2d196ce00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061224d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80639dc8f9c811610104578063ba51a6df116100a2578063dc8452cd11610071578063dc8452cd1461044d578063e78cea9214610456578063ef1093a714610469578063f2fde38b1461047c57600080fd5b8063ba51a6df146103f1578063c1f0808a14610404578063c4d66de814610427578063ca6d56dc1461043a57600080fd5b8063a230c524116100de578063a230c52414610385578063a481d59b146103a8578063a8e12e4c146103bb578063a93585f0146103ce57600080fd5b80639dc8f9c81461034a5780639eab52531461035d578063a1fb4acb1461037257600080fd5b8063715018a6116101715780638da5cb5b1161014b5780638da5cb5b146102e55780638dd14802146102f65780638f32d59b146103095780639386775a1461031c57600080fd5b8063715018a6146102b757806379d9ee72146102bf5780637b6d343a146102d257600080fd5b80631b4613cb116101ad5780631b4613cb1461022457806354fd4d50146102525780635daf08ca14610276578063681fc921146102a157600080fd5b806309c69cfa146101d45780630b1ca49a146101fc5780631273835214610211575b600080fd5b6101e76101e2366004611a98565b61048f565b60405190151581526020015b60405180910390f35b61020f61020a366004611acf565b6104d9565b005b61020f61021f366004611b0c565b610817565b6101e7610232366004611bb1565b600090815260386020908152604080832033845290915290205460ff1690565b6040805180820182526002815261763360f01b602082015290516101f39190611bca565b610289610284366004611bb1565b610a59565b6040516001600160a01b0390911681526020016101f3565b6102a9603281565b6040519081526020016101f3565b61020f610a83565b61020f6102cd366004611c6b565b610af7565b6101e76102e0366004611a98565b610c09565b6033546001600160a01b0316610289565b61020f610304366004611acf565b610c38565b6033546001600160a01b031633146101e7565b6101e761032a366004611d5a565b603860209081526000928352604080842090915290825290205460ff1681565b6102a9610358366004611d8a565b610c6e565b610365610cfb565b6040516101f39190611e15565b6102a9610380366004611bb1565b610d5d565b6101e7610393366004611acf565b60376020526000908152604090205460ff1681565b61020f6103b6366004611acf565b610de5565b61020f6103c9366004611e62565b610e6e565b6101e76103dc366004611bb1565b60009081526039602052604090205460ff1690565b61020f6103ff366004611bb1565b61119b565b6101e7610412366004611bb1565b60396020526000908152604090205460ff1681565b61020f610435366004611acf565b6112bd565b61020f610448366004611acf565b611373565b6102a960365481565b603454610289906001600160a01b031681565b603a54610289906001600160a01b031681565b61020f61048a366004611acf565b61153f565b600081815260386020908152604080832033845290915281205460ff16806104d05750600083815260386020908152604080832033845290915290205460ff165b90505b92915050565b6033546001600160a01b0316331461050c5760405162461bcd60e51b815260040161050390611ee7565b60405180910390fd5b6001600160a01b03811661055d5760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b6044820152606401610503565b6001600160a01b03811660009081526037602052604090205460ff166105cf5760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220646f65736e27742065786973746044820152607360f81b6064820152608401610503565b6035546001106106325760405162461bcd60e51b815260206004820152602860248201527f46656465726174696f6e3a2043616e27742072656d6f766520616c6c20746865604482015267206d656d6265727360c01b6064820152608401610503565b60365460355461064490600190611f32565b10156106ac5760405162461bcd60e51b815260206004820152603160248201527f46656465726174696f6e3a2043616e27742068617665206c657373207468616e604482015270207265717569726564206d656d6265727360781b6064820152608401610503565b6001600160a01b0381166000908152603760205260408120805460ff191690555b6035546106dc90600190611f32565b8110156107ac57816001600160a01b03166035828154811061070057610700611f49565b6000918252602090912001546001600160a01b0316141561079a576035805461072b90600190611f32565b8154811061073b5761073b611f49565b600091825260209091200154603580546001600160a01b03909216918390811061076757610767611f49565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506107ac565b806107a481611f5f565b9150506106cd565b5060358054806107be576107be611f7a565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316917f270bfc616dd36d5cb6b35aac93e6ef22b089c34e6f6ad6f0892797424840897b91a250565b3360009081526037602052604090205460ff166108725760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b6044820152606401610503565b61087b81611572565b6040516bffffffffffffffffffffffff1960608c811b821660208401528b811b821660348401528a901b166048820152605c8101889052607c8101879052609c81018690526001600160e01b031960e086901b1660bc82015260009060c00160405160208183030381529060405280519060200120905060006109058c8c8c8c8c8c8c8b8b610c6e565b90506109118282610c09565b1561091d575050610a4d565b610927828261048f565b15610933575050610a4d565b6000818152603860205260408120600191336001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558087336001600160a01b03167fa7be469662a3e5b2343dce0cefce9d3e114875d7334d8d724d3838cf629c5b108f8f8f8f8f8e8d8d6040516109b6989796959493929190611f90565b60405180910390a46109c882826115c1565b15610a4a576000818152603960205260409020805460ff191660011790556109f88c8c8c8c8c8c8c8c8c8c6116e1565b8087336001600160a01b03167f0fe3e5a751f4df1a701ea5d318482623b6a6b59ece98cb64169279b44219355e8f8f8f8f8f8e8d8d604051610a41989796959493929190611f90565b60405180910390a45b50505b50505050505050505050565b60358181548110610a6957600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610aad5760405162461bcd60e51b815260040161050390611ee7565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b3360009081526037602052604090205460ff16610b525760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b6044820152606401610503565b8483148015610b6057508481145b610bac5760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a204c656e677468206d6973736d61746368000000006044820152606401610503565b336001600160a01b03167f909659508bf1f4c0ad9b406809f943832e107af28b0b436d9b7d56d3993c77f146438b8b8b8b8b8b8b8b604051610bf79a9998979695949392919061203c565b60405180910390a25050505050505050565b60008181526039602052604081205460ff16806104d05750505060009081526039602052604090205460ff1690565b6033546001600160a01b03163314610c625760405162461bcd60e51b815260040161050390611ee7565b610c6b81611848565b50565b604080516bffffffffffffffffffffffff1960609b8c1b81166020808401919091529a8c1b8116603483015298909a1b90971660488a0152605c890195909552607c880193909352609c8701919091526001600160e01b031960e091821b1660bc87015260c086019190915280850191909152815180850390910181526101009093019052815191012090565b60606035805480602002602001604051908101604052809291908181526020018280548015610d5357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d35575b5050505050905090565b600080805b603554811015610dde5760008481526038602052604081206035805491929184908110610d9157610d91611f49565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610dcc57610dc9600183612129565b91505b80610dd681611f5f565b915050610d62565b5092915050565b6033546001600160a01b03163314610e0f5760405162461bcd60e51b815260040161050390611ee7565b6001600160a01b038116610e655760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a20456d707479204e465420627269646765000000006044820152606401610503565b610c6b816118f3565b8484818111801590610e7f57508015155b8015610e8a57508115155b610ed65760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e74736044820152606401610503565b600054610100900460ff1680610eef575060005460ff16155b610f0b5760405162461bcd60e51b815260040161050390612141565b600054610100900460ff16158015610f2d576000805461ffff19166101011790555b610f36856112bd565b6032881115610f875760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a20546f6f206d616e79206d656d62657273000000006044820152606401610503565b610f9360358a8a611a20565b5060005b8881101561113357603760008b8b84818110610fb557610fb5611f49565b9050602002016020810190610fca9190611acf565b6001600160a01b0316815260208101919091526040016000205460ff16158015611024575060008a8a8381811061100357611003611f49565b90506020020160208101906110189190611acf565b6001600160a01b031614155b6110705760405162461bcd60e51b815260206004820152601b60248201527f46656465726174696f6e3a20496e76616c6964206d656d6265727300000000006044820152606401610503565b6001603760008c8c8581811061108857611088611f49565b905060200201602081019061109d9190611acf565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558989828181106110d7576110d7611f49565b90506020020160208101906110ec9190611acf565b6001600160a01b03167f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c760405160405180910390a28061112b81611f5f565b915050610f97565b5060368790556040518781527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a161117586611848565b61117e846118f3565b8015611190576000805461ff00191690555b505050505050505050565b6033546001600160a01b031633146111c55760405162461bcd60e51b815260040161050390611ee7565b603554818181118015906111d857508015155b80156111e357508115155b61122f5760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e74736044820152606401610503565b60028310156112805760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a205265717569726573206174206c656173742032006044820152606401610503565b60368390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b600054610100900460ff16806112d6575060005460ff16155b6112f25760405162461bcd60e51b815260040161050390612141565b600054610100900460ff16158015611314576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561136f576000805461ff00191690555b5050565b6033546001600160a01b0316331461139d5760405162461bcd60e51b815260040161050390611ee7565b6001600160a01b0381166113ee5760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b6044820152606401610503565b6001600160a01b03811660009081526037602052604090205460ff16156114615760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220616c72656164792065786973746044820152607360f81b6064820152608401610503565b6035546032116114b35760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a204d6178206d656d626572732072656163686564006044820152606401610503565b6001600160a01b038116600081815260376020526040808220805460ff1916600190811790915560358054918201815583527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d0180546001600160a01b03191684179055517f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c79190a250565b6033546001600160a01b031633146115695760405162461bcd60e51b815260040161050390611ee7565b610c6b81611941565b468114610c6b5760405162461bcd60e51b815260206004820152601d60248201527f46656465726174696f6e3a204e6f7420626c6f636b2e636861696e69640000006044820152606401610503565b6000806115cc6119fe565b90506000805b6035548110156116d5576000858152603860205260408120603580549192918490811061160157611601611f49565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561164057611639600183612129565b91506116a0565b6000868152603860205260408120603580549192918490811061166557611665611f49565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156116a05761169d600183612129565b91505b8282101580156116b257506036548210155b156116c357600193505050506104d3565b806116cd81611f5f565b9150506115d2565b50600095945050505050565b60018360018111156116f5576116f5612189565b14156117ca57603a546001600160a01b03166117535760405162461bcd60e51b815260206004820152601b60248201527f46656465726174696f6e3a20456d707479204e465442726964676500000000006044820152606401610503565b603a5460405163048aa97560e21b81526001600160a01b039091169063122aa5d490611793908d908d908d908d908d908d908d908c908c9060040161219f565b600060405180830381600087803b1580156117ad57600080fd5b505af11580156117c1573d6000803e3d6000fd5b50505050610a4d565b60345460405163048aa97560e21b81526001600160a01b039091169063122aa5d49061180a908d908d908d908d908d908d908d908c908c9060040161219f565b600060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b5050505050505050505050505050565b6001600160a01b03811661189e5760405162461bcd60e51b815260206004820152601860248201527f46656465726174696f6e3a20456d7074792062726964676500000000000000006044820152606401610503565b603480546001600160a01b0319166001600160a01b0383169081179091556040519081527f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b92551782794497906020015b60405180910390a150565b603a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f41d363b5ede55d38b1fa8f7ba6188f9c20e353bc71e4a93de8938a20b27b6bc2906020016118e8565b6001600160a01b0381166119a25760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604482015261737360f01b6064820152608401610503565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b603554600090611a10906002906121f5565b611a1b906001612129565b905090565b828054828255906000526020600020908101928215611a73579160200282015b82811115611a735781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611a40565b50611a7f929150611a83565b5090565b5b80821115611a7f5760008155600101611a84565b60008060408385031215611aab57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c6b57600080fd5b600060208284031215611ae157600080fd5b8135611aec81611aba565b9392505050565b803563ffffffff81168114611b0757600080fd5b919050565b6000806000806000806000806000806101408b8d031215611b2c57600080fd5b8a35611b3781611aba565b995060208b0135611b4781611aba565b985060408b0135611b5781611aba565b975060608b0135965060808b0135955060a08b01359450611b7a60c08c01611af3565b935060e08b013560028110611b8e57600080fd5b809350506101008b013591506101208b013590509295989b9194979a5092959850565b600060208284031215611bc357600080fd5b5035919050565b600060208083528351808285015260005b81811015611bf757858101830151858201604001528201611bdb565b81811115611c09576000604083870101525b50601f01601f1916929092016040019392505050565b60008083601f840112611c3157600080fd5b50813567ffffffffffffffff811115611c4957600080fd5b6020830191508360208260051b8501011115611c6457600080fd5b9250929050565b6000806000806000806000806080898b031215611c8757600080fd5b883567ffffffffffffffff80821115611c9f57600080fd5b818b0191508b601f830112611cb357600080fd5b813581811115611cc257600080fd5b8c6020828501011115611cd457600080fd5b60209283019a509850908a01359080821115611cef57600080fd5b611cfb8c838d01611c1f565b909850965060408b0135915080821115611d1457600080fd5b611d208c838d01611c1f565b909650945060608b0135915080821115611d3957600080fd5b50611d468b828c01611c1f565b999c989b5096995094979396929594505050565b60008060408385031215611d6d57600080fd5b823591506020830135611d7f81611aba565b809150509250929050565b60008060008060008060008060006101208a8c031215611da957600080fd5b8935611db481611aba565b985060208a0135611dc481611aba565b975060408a0135611dd481611aba565b965060608a0135955060808a0135945060a08a01359350611df760c08b01611af3565b925060e08a013591506101008a013590509295985092959850929598565b6020808252825182820181905260009190848201906040850190845b81811015611e565783516001600160a01b031683529284019291840191600101611e31565b50909695505050505050565b60008060008060008060a08789031215611e7b57600080fd5b863567ffffffffffffffff811115611e9257600080fd5b611e9e89828a01611c1f565b909750955050602087013593506040870135611eb981611aba565b92506060870135611ec981611aba565b91506080870135611ed981611aba565b809150509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611f4457611f44611f1c565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611f7357611f73611f1c565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015263ffffffff1660a083015260c082019290925260e08101919091526101000190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006001600160fb1b0383111561201f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b8a8152600060208b8184015260c0604084015261205d60c084018b8d611fdd565b8381036060850152612070818a8c612006565b9050838103608085015261208581888a612006565b84810360a08601528581529050818101600586901b820183018760005b8881101561211157848303601f190184528135368b9003601e190181126120c857600080fd5b8a01803567ffffffffffffffff8111156120e157600080fd5b8036038c13156120f057600080fd5b6120fd85828a8501611fdd565b9588019594505050908501906001016120a2565b5050809450505050509b9a5050505050505050505050565b6000821982111561213c5761213c611f1c565b500190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03998a16815297891660208901529590971660408701526060860193909352608085019190915260a084015263ffffffff1660c083015260e08201929092526101008101919091526101200190565b60008261221257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205e6773f4f800299832aea5d8c74b303a6befad8d693c67bb9a52e7657b7db69864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80639dc8f9c811610104578063ba51a6df116100a2578063dc8452cd11610071578063dc8452cd1461044d578063e78cea9214610456578063ef1093a714610469578063f2fde38b1461047c57600080fd5b8063ba51a6df146103f1578063c1f0808a14610404578063c4d66de814610427578063ca6d56dc1461043a57600080fd5b8063a230c524116100de578063a230c52414610385578063a481d59b146103a8578063a8e12e4c146103bb578063a93585f0146103ce57600080fd5b80639dc8f9c81461034a5780639eab52531461035d578063a1fb4acb1461037257600080fd5b8063715018a6116101715780638da5cb5b1161014b5780638da5cb5b146102e55780638dd14802146102f65780638f32d59b146103095780639386775a1461031c57600080fd5b8063715018a6146102b757806379d9ee72146102bf5780637b6d343a146102d257600080fd5b80631b4613cb116101ad5780631b4613cb1461022457806354fd4d50146102525780635daf08ca14610276578063681fc921146102a157600080fd5b806309c69cfa146101d45780630b1ca49a146101fc5780631273835214610211575b600080fd5b6101e76101e2366004611a98565b61048f565b60405190151581526020015b60405180910390f35b61020f61020a366004611acf565b6104d9565b005b61020f61021f366004611b0c565b610817565b6101e7610232366004611bb1565b600090815260386020908152604080832033845290915290205460ff1690565b6040805180820182526002815261763360f01b602082015290516101f39190611bca565b610289610284366004611bb1565b610a59565b6040516001600160a01b0390911681526020016101f3565b6102a9603281565b6040519081526020016101f3565b61020f610a83565b61020f6102cd366004611c6b565b610af7565b6101e76102e0366004611a98565b610c09565b6033546001600160a01b0316610289565b61020f610304366004611acf565b610c38565b6033546001600160a01b031633146101e7565b6101e761032a366004611d5a565b603860209081526000928352604080842090915290825290205460ff1681565b6102a9610358366004611d8a565b610c6e565b610365610cfb565b6040516101f39190611e15565b6102a9610380366004611bb1565b610d5d565b6101e7610393366004611acf565b60376020526000908152604090205460ff1681565b61020f6103b6366004611acf565b610de5565b61020f6103c9366004611e62565b610e6e565b6101e76103dc366004611bb1565b60009081526039602052604090205460ff1690565b61020f6103ff366004611bb1565b61119b565b6101e7610412366004611bb1565b60396020526000908152604090205460ff1681565b61020f610435366004611acf565b6112bd565b61020f610448366004611acf565b611373565b6102a960365481565b603454610289906001600160a01b031681565b603a54610289906001600160a01b031681565b61020f61048a366004611acf565b61153f565b600081815260386020908152604080832033845290915281205460ff16806104d05750600083815260386020908152604080832033845290915290205460ff165b90505b92915050565b6033546001600160a01b0316331461050c5760405162461bcd60e51b815260040161050390611ee7565b60405180910390fd5b6001600160a01b03811661055d5760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b6044820152606401610503565b6001600160a01b03811660009081526037602052604090205460ff166105cf5760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220646f65736e27742065786973746044820152607360f81b6064820152608401610503565b6035546001106106325760405162461bcd60e51b815260206004820152602860248201527f46656465726174696f6e3a2043616e27742072656d6f766520616c6c20746865604482015267206d656d6265727360c01b6064820152608401610503565b60365460355461064490600190611f32565b10156106ac5760405162461bcd60e51b815260206004820152603160248201527f46656465726174696f6e3a2043616e27742068617665206c657373207468616e604482015270207265717569726564206d656d6265727360781b6064820152608401610503565b6001600160a01b0381166000908152603760205260408120805460ff191690555b6035546106dc90600190611f32565b8110156107ac57816001600160a01b03166035828154811061070057610700611f49565b6000918252602090912001546001600160a01b0316141561079a576035805461072b90600190611f32565b8154811061073b5761073b611f49565b600091825260209091200154603580546001600160a01b03909216918390811061076757610767611f49565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506107ac565b806107a481611f5f565b9150506106cd565b5060358054806107be576107be611f7a565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316917f270bfc616dd36d5cb6b35aac93e6ef22b089c34e6f6ad6f0892797424840897b91a250565b3360009081526037602052604090205460ff166108725760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b6044820152606401610503565b61087b81611572565b6040516bffffffffffffffffffffffff1960608c811b821660208401528b811b821660348401528a901b166048820152605c8101889052607c8101879052609c81018690526001600160e01b031960e086901b1660bc82015260009060c00160405160208183030381529060405280519060200120905060006109058c8c8c8c8c8c8c8b8b610c6e565b90506109118282610c09565b1561091d575050610a4d565b610927828261048f565b15610933575050610a4d565b6000818152603860205260408120600191336001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558087336001600160a01b03167fa7be469662a3e5b2343dce0cefce9d3e114875d7334d8d724d3838cf629c5b108f8f8f8f8f8e8d8d6040516109b6989796959493929190611f90565b60405180910390a46109c882826115c1565b15610a4a576000818152603960205260409020805460ff191660011790556109f88c8c8c8c8c8c8c8c8c8c6116e1565b8087336001600160a01b03167f0fe3e5a751f4df1a701ea5d318482623b6a6b59ece98cb64169279b44219355e8f8f8f8f8f8e8d8d604051610a41989796959493929190611f90565b60405180910390a45b50505b50505050505050505050565b60358181548110610a6957600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610aad5760405162461bcd60e51b815260040161050390611ee7565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b3360009081526037602052604090205460ff16610b525760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b6044820152606401610503565b8483148015610b6057508481145b610bac5760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a204c656e677468206d6973736d61746368000000006044820152606401610503565b336001600160a01b03167f909659508bf1f4c0ad9b406809f943832e107af28b0b436d9b7d56d3993c77f146438b8b8b8b8b8b8b8b604051610bf79a9998979695949392919061203c565b60405180910390a25050505050505050565b60008181526039602052604081205460ff16806104d05750505060009081526039602052604090205460ff1690565b6033546001600160a01b03163314610c625760405162461bcd60e51b815260040161050390611ee7565b610c6b81611848565b50565b604080516bffffffffffffffffffffffff1960609b8c1b81166020808401919091529a8c1b8116603483015298909a1b90971660488a0152605c890195909552607c880193909352609c8701919091526001600160e01b031960e091821b1660bc87015260c086019190915280850191909152815180850390910181526101009093019052815191012090565b60606035805480602002602001604051908101604052809291908181526020018280548015610d5357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d35575b5050505050905090565b600080805b603554811015610dde5760008481526038602052604081206035805491929184908110610d9157610d91611f49565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610dcc57610dc9600183612129565b91505b80610dd681611f5f565b915050610d62565b5092915050565b6033546001600160a01b03163314610e0f5760405162461bcd60e51b815260040161050390611ee7565b6001600160a01b038116610e655760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a20456d707479204e465420627269646765000000006044820152606401610503565b610c6b816118f3565b8484818111801590610e7f57508015155b8015610e8a57508115155b610ed65760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e74736044820152606401610503565b600054610100900460ff1680610eef575060005460ff16155b610f0b5760405162461bcd60e51b815260040161050390612141565b600054610100900460ff16158015610f2d576000805461ffff19166101011790555b610f36856112bd565b6032881115610f875760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a20546f6f206d616e79206d656d62657273000000006044820152606401610503565b610f9360358a8a611a20565b5060005b8881101561113357603760008b8b84818110610fb557610fb5611f49565b9050602002016020810190610fca9190611acf565b6001600160a01b0316815260208101919091526040016000205460ff16158015611024575060008a8a8381811061100357611003611f49565b90506020020160208101906110189190611acf565b6001600160a01b031614155b6110705760405162461bcd60e51b815260206004820152601b60248201527f46656465726174696f6e3a20496e76616c6964206d656d6265727300000000006044820152606401610503565b6001603760008c8c8581811061108857611088611f49565b905060200201602081019061109d9190611acf565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558989828181106110d7576110d7611f49565b90506020020160208101906110ec9190611acf565b6001600160a01b03167f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c760405160405180910390a28061112b81611f5f565b915050610f97565b5060368790556040518781527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a161117586611848565b61117e846118f3565b8015611190576000805461ff00191690555b505050505050505050565b6033546001600160a01b031633146111c55760405162461bcd60e51b815260040161050390611ee7565b603554818181118015906111d857508015155b80156111e357508115155b61122f5760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e74736044820152606401610503565b60028310156112805760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a205265717569726573206174206c656173742032006044820152606401610503565b60368390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b600054610100900460ff16806112d6575060005460ff16155b6112f25760405162461bcd60e51b815260040161050390612141565b600054610100900460ff16158015611314576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561136f576000805461ff00191690555b5050565b6033546001600160a01b0316331461139d5760405162461bcd60e51b815260040161050390611ee7565b6001600160a01b0381166113ee5760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b6044820152606401610503565b6001600160a01b03811660009081526037602052604090205460ff16156114615760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220616c72656164792065786973746044820152607360f81b6064820152608401610503565b6035546032116114b35760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a204d6178206d656d626572732072656163686564006044820152606401610503565b6001600160a01b038116600081815260376020526040808220805460ff1916600190811790915560358054918201815583527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d0180546001600160a01b03191684179055517f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c79190a250565b6033546001600160a01b031633146115695760405162461bcd60e51b815260040161050390611ee7565b610c6b81611941565b468114610c6b5760405162461bcd60e51b815260206004820152601d60248201527f46656465726174696f6e3a204e6f7420626c6f636b2e636861696e69640000006044820152606401610503565b6000806115cc6119fe565b90506000805b6035548110156116d5576000858152603860205260408120603580549192918490811061160157611601611f49565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561164057611639600183612129565b91506116a0565b6000868152603860205260408120603580549192918490811061166557611665611f49565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156116a05761169d600183612129565b91505b8282101580156116b257506036548210155b156116c357600193505050506104d3565b806116cd81611f5f565b9150506115d2565b50600095945050505050565b60018360018111156116f5576116f5612189565b14156117ca57603a546001600160a01b03166117535760405162461bcd60e51b815260206004820152601b60248201527f46656465726174696f6e3a20456d707479204e465442726964676500000000006044820152606401610503565b603a5460405163048aa97560e21b81526001600160a01b039091169063122aa5d490611793908d908d908d908d908d908d908d908c908c9060040161219f565b600060405180830381600087803b1580156117ad57600080fd5b505af11580156117c1573d6000803e3d6000fd5b50505050610a4d565b60345460405163048aa97560e21b81526001600160a01b039091169063122aa5d49061180a908d908d908d908d908d908d908d908c908c9060040161219f565b600060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b5050505050505050505050505050565b6001600160a01b03811661189e5760405162461bcd60e51b815260206004820152601860248201527f46656465726174696f6e3a20456d7074792062726964676500000000000000006044820152606401610503565b603480546001600160a01b0319166001600160a01b0383169081179091556040519081527f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b92551782794497906020015b60405180910390a150565b603a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f41d363b5ede55d38b1fa8f7ba6188f9c20e353bc71e4a93de8938a20b27b6bc2906020016118e8565b6001600160a01b0381166119a25760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604482015261737360f01b6064820152608401610503565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b603554600090611a10906002906121f5565b611a1b906001612129565b905090565b828054828255906000526020600020908101928215611a73579160200282015b82811115611a735781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611a40565b50611a7f929150611a83565b5090565b5b80821115611a7f5760008155600101611a84565b60008060408385031215611aab57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c6b57600080fd5b600060208284031215611ae157600080fd5b8135611aec81611aba565b9392505050565b803563ffffffff81168114611b0757600080fd5b919050565b6000806000806000806000806000806101408b8d031215611b2c57600080fd5b8a35611b3781611aba565b995060208b0135611b4781611aba565b985060408b0135611b5781611aba565b975060608b0135965060808b0135955060a08b01359450611b7a60c08c01611af3565b935060e08b013560028110611b8e57600080fd5b809350506101008b013591506101208b013590509295989b9194979a5092959850565b600060208284031215611bc357600080fd5b5035919050565b600060208083528351808285015260005b81811015611bf757858101830151858201604001528201611bdb565b81811115611c09576000604083870101525b50601f01601f1916929092016040019392505050565b60008083601f840112611c3157600080fd5b50813567ffffffffffffffff811115611c4957600080fd5b6020830191508360208260051b8501011115611c6457600080fd5b9250929050565b6000806000806000806000806080898b031215611c8757600080fd5b883567ffffffffffffffff80821115611c9f57600080fd5b818b0191508b601f830112611cb357600080fd5b813581811115611cc257600080fd5b8c6020828501011115611cd457600080fd5b60209283019a509850908a01359080821115611cef57600080fd5b611cfb8c838d01611c1f565b909850965060408b0135915080821115611d1457600080fd5b611d208c838d01611c1f565b909650945060608b0135915080821115611d3957600080fd5b50611d468b828c01611c1f565b999c989b5096995094979396929594505050565b60008060408385031215611d6d57600080fd5b823591506020830135611d7f81611aba565b809150509250929050565b60008060008060008060008060006101208a8c031215611da957600080fd5b8935611db481611aba565b985060208a0135611dc481611aba565b975060408a0135611dd481611aba565b965060608a0135955060808a0135945060a08a01359350611df760c08b01611af3565b925060e08a013591506101008a013590509295985092959850929598565b6020808252825182820181905260009190848201906040850190845b81811015611e565783516001600160a01b031683529284019291840191600101611e31565b50909695505050505050565b60008060008060008060a08789031215611e7b57600080fd5b863567ffffffffffffffff811115611e9257600080fd5b611e9e89828a01611c1f565b909750955050602087013593506040870135611eb981611aba565b92506060870135611ec981611aba565b91506080870135611ed981611aba565b809150509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611f4457611f44611f1c565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611f7357611f73611f1c565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015263ffffffff1660a083015260c082019290925260e08101919091526101000190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006001600160fb1b0383111561201f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b8a8152600060208b8184015260c0604084015261205d60c084018b8d611fdd565b8381036060850152612070818a8c612006565b9050838103608085015261208581888a612006565b84810360a08601528581529050818101600586901b820183018760005b8881101561211157848303601f190184528135368b9003601e190181126120c857600080fd5b8a01803567ffffffffffffffff8111156120e157600080fd5b8036038c13156120f057600080fd5b6120fd85828a8501611fdd565b9588019594505050908501906001016120a2565b5050809450505050509b9a5050505050505050505050565b6000821982111561213c5761213c611f1c565b500190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03998a16815297891660208901529590971660408701526060860193909352608085019190915260a084015263ffffffff1660c083015260e08201929092526101008101919091526101200190565b60008261221257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205e6773f4f800299832aea5d8c74b303a6befad8d693c67bb9a52e7657b7db69864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMember(address)": {
        "params": {
          "_newMember": "address of the new member"
        }
      },
      "changeRequirement(uint256)": {
        "details": "Emits the RequirementChange event",
        "params": {
          "_required": "the number of minimum members to approve an transaction, it has to be bigger than 1"
        }
      },
      "emitHeartbeat(string,uint256[],uint256[],string[])": {
        "details": "Emits HeartBeat event"
      },
      "getMembers()": {
        "returns": {
          "_0": "Current members"
        }
      },
      "getTransactionCount(bytes32)": {
        "params": {
          "transactionId": "The transaction hashed from getTransactionId function"
        }
      },
      "getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)": {
        "details": "It encodes and applies keccak256 to the parameters received in the same order",
        "params": {
          "amount": "Could be the amount or the tokenId",
          "blockHash": "The block hash in which the transaction with the cross event occurred",
          "destinationChainId": "Is chainId of the destination chain",
          "logIndex": "Index of the event in the logs",
          "originChainId": "Is chainId of the original chain",
          "originalTokenAddress": "The address of the token in the origin (main) chain",
          "receiver": "Who is going to receive the token in the opposite chain",
          "sender": "The address who solicited the cross token",
          "transactionHash": "The transaction in which the cross event occurred"
        },
        "returns": {
          "_0": "The hash generated by the parameters."
        }
      },
      "initialize(address)": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeMember(address)": {
        "params": {
          "_oldMember": "address of the member to be removed from federation"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBridge(address)": {
        "details": "Emits BridgeChanged event",
        "params": {
          "_bridge": "the new bridge contract address that should implement the IBridge interface"
        }
      },
      "setNFTBridge(address)": {
        "details": "Emits NFTBridgeChanged event",
        "params": {
          "_bridgeNFT": "the new NFT bridge contract address that should implement the INFTBridge interface"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "version()": {
        "returns": {
          "_0": "version in v{Number}"
        }
      },
      "voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint8,uint256,uint256)": {
        "params": {
          "blockHash": "The block hash in which the transaction with the cross event occurred",
          "destinationChainId": "Is chainId of the destination chain",
          "logIndex": "Index of the event in the logs",
          "originChainId": "Is chainId of the original chain",
          "originalTokenAddress": "The address of the token in the origin (main) chain",
          "receiver": "Who is going to receive the token in the opposite chain",
          "sender": "The address who solicited the cross token",
          "tokenType": "Is the type of bridge to be used",
          "transactionHash": "The transaction in which the cross event occurred",
          "value": "Could be the amount if tokenType == COIN or the tokenId if tokenType == NFT"
        }
      }
    },
    "stateVariables": {
      "isMember": {
        "details": "The address should be a member to vote in transactions"
      },
      "required": {
        "details": "It should have at least the required amount of members"
      },
      "votes": {
        "details": "the members should approve the transaction by 50% + 1"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(address)": {
        "notice": "Add a new member to the federation"
      },
      "bridgeNFT()": {
        "notice": "Federator v3 variables "
      },
      "changeRequirement(uint256)": {
        "notice": "Changes the number of required members to vote and approve an transaction"
      },
      "emitHeartbeat(string,uint256[],uint256[],string[])": {
        "notice": "It emits an HeartBeat like an health check"
      },
      "getMembers()": {
        "notice": "Return all the current members of the federation"
      },
      "getTransactionCount(bytes32)": {
        "notice": "Get the amount of approved votes for that transactionId"
      },
      "getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)": {
        "notice": "Gets the hash of transaction from the following parameters encoded and keccaked"
      },
      "isMember(address)": {
        "notice": "All the addresses that are members of the federation"
      },
      "processed(bytes32)": {
        "notice": "(bytes32) transactionId => (bool) votedCheck if that transaction was already processed"
      },
      "removeMember(address)": {
        "notice": "Remove a member of the federation"
      },
      "required()": {
        "notice": "The minimum amount of votes to approve a transaction"
      },
      "setBridge(address)": {
        "notice": "Sets a new bridge contract"
      },
      "setNFTBridge(address)": {
        "notice": "Sets a new NFT bridge contract"
      },
      "version()": {
        "notice": "Current version of the contract"
      },
      "voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint8,uint256,uint256)": {
        "notice": "Vote in a transaction, if it has enough votes it accepts the transfer"
      },
      "votes(bytes32,address)": {
        "notice": "(bytes32) transactionId = keccak256( abi.encodePacked( originalTokenAddress, sender, receiver, amount, blockHash, transactionHash, logIndex ) ) => ( (address) members => (bool) voted )Votes by members by the transaction ID"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16199,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16202,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16242,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16488,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5448,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "bridge",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IBridge)7426"
      },
      {
        "astId": 5451,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "members",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5454,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "required",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 5459,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "isMember",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5466,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "votes",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5471,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "processed",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5475,
        "contract": "contracts/federation/Federation.sol:Federation",
        "label": "bridgeNFT",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(INFTBridge)8118"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)7426": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(INFTBridge)8118": {
        "encoding": "inplace",
        "label": "contract INFTBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}