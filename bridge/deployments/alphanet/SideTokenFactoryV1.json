{
  "address": "0x8f32871C464E254e1DDb1b8be1444c201a6E656C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sideToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "CreatedSideToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimaryTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "createSideToken",
      "outputs": [
        {
          "internalType": "contract SideTokenV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferPrimary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5568a3296ad53a60d8a97607be73c7f8a4ef5825067e4efc22cba6bbc98f483a",
  "receipt": {
    "to": null,
    "from": "0x49A2731C440B0A217f817dB99145Ef5c2e3c9f4E",
    "contractAddress": "0x8f32871C464E254e1DDb1b8be1444c201a6E656C",
    "transactionIndex": 0,
    "gasUsed": "2635320",
    "logsBloom": "0x
    "blockHash": "0x2ba06f0f533e8c5c90a3f5967dc2fa6162814140168228f77ae01540c3bb585c",
    "transactionHash": "0x5568a3296ad53a60d8a97607be73c7f8a4ef5825067e4efc22cba6bbc98f483a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 103901,
        "transactionHash": "0x5568a3296ad53a60d8a97607be73c7f8a4ef5825067e4efc22cba6bbc98f483a",
        "address": "0x8f32871C464E254e1DDb1b8be1444c201a6E656C",
        "topics": [
          "0x4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9"
        ],
        "data": "0x00000000000000000000000049a2731c440b0a217f817db99145ef5c2e3c9f4e",
        "logIndex": 0,
        "blockHash": "0x2ba06f0f533e8c5c90a3f5967dc2fa6162814140168228f77ae01540c3bb585c"
      }
    ],
    "blockNumber": 103901,
    "cumulativeGasUsed": "2635320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bfc96d5f60348b72136d284c7b5c1536",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sideToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreatedSideToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createSideToken\",\"outputs\":[{\"internalType\":\"contract SideTokenV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"primary()\":{\"returns\":{\"_0\":\"the address of the primary.\"}},\"transferPrimary(address)\":{\"details\":\"Transfers contract to a new primary.\",\"params\":{\"recipient\":\"The address of new primary.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SideTokenFactory/SideTokenFactoryV1.sol\":\"SideTokenFactoryV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SideToken/SideTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../zeppelin/token/ERC777/ERC777.sol\\\";\\n\\ncontract SideTokenV1 is ERC777 {\\n    address public minter;\\n\\n    constructor(string memory _tokenName, string memory _tokenSymbol, address _minterAddr)\\n    ERC777(_tokenName, _tokenSymbol, new address[](0)) {\\n        require(_minterAddr != address(0), \\\"SideToken: Minter address is null\\\");\\n        minter = _minterAddr;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(_msgSender() == minter, \\\"SideToken: Caller is not the minter\\\");\\n        _;\\n    }\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    )\\n    external onlyMinter\\n    {\\n        _mint(_msgSender(), account, amount, userData, operatorData);\\n    }\\n\\n}\",\"keccak256\":\"0xc49437b3915e15f13364cd5a91c3f90cf1e63768556ddd1c7d50482fcc19c2a4\",\"license\":\"MIT\"},\"contracts/SideTokenFactory/SideTokenFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../zeppelin/ownership/Secondary.sol\\\";\\nimport \\\"../SideToken/SideTokenV1.sol\\\";\\n\\ncontract SideTokenFactoryV1 is Secondary {\\n    event CreatedSideToken(address sideToken, string symbol);\\n\\n    function createSideToken(string calldata name, string calldata symbol) external onlyPrimary returns(SideTokenV1) {\\n        SideTokenV1 sideToken = new SideTokenV1(name, symbol, primary());\\n        emit CreatedSideToken(address(sideToken), symbol);\\n        return sideToken;\\n    }\\n}\",\"keccak256\":\"0x7754cde7712b09e5ab4ce3f6a8fe567d9cefda1cd4ffe29b6998d8bfb9eac82c\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6f3f274a2270bfe073339370edfa2485e2d515a2656039937f6b972fae96d297\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as `account`'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `_account`.\\n     * - `_interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `_implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address _account, bytes32 _interfaceHash, address _implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `_interfaceHash` for `_account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `_interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `_account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address _account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x8877787cbe99ab8e2dcb85e9b22066b7e62bcea328091c1ff9ae462e54afa66e\",\"license\":\"MIT\"},\"contracts/zeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x8038a6eca31e013b0c7f248c7a4eb5846ab0d52bb3f7636fafcf00b075643afe\",\"license\":\"MIT\"},\"contracts/zeppelin/ownership/Secondary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\\n */\\nabstract contract Secondary is Context {\\n    address private _primary;\\n\\n    /**\\n     * @dev Emitted when the primary contract changes.\\n     */\\n    event PrimaryTransferred(\\n        address recipient\\n    );\\n\\n    /**\\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\\n     */\\n    constructor () {\\n        _primary = _msgSender();\\n        emit PrimaryTransferred(_primary);\\n    }\\n\\n    /**\\n     * @dev Reverts if called from any account other than the primary.\\n     */\\n    modifier onlyPrimary() {\\n        require(_msgSender() == _primary, \\\"Secondary: caller is not the primary account\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return the address of the primary.\\n     */\\n    function primary() public view returns (address) {\\n        return _primary;\\n    }\\n\\n    /**\\n     * @dev Transfers contract to a new primary.\\n     * @param recipient The address of new primary.\\n     */\\n    function transferPrimary(address recipient) public onlyPrimary {\\n        require(recipient != address(0), \\\"Secondary: new primary is the zero address\\\");\\n        _primary = recipient;\\n        emit PrimaryTransferred(_primary);\\n    }\\n}\\n\",\"keccak256\":\"0xdab039c15e9fd9764351f7bddcd94710bb3cc358c9e78e6fa30f9b6f4373754d\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xdb194e173849ac56dbc15eaf0c01848361748ff8e4679985c3d11013ee4fa4b6\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/ERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC777.sol\\\";\\nimport \\\"./IERC777Recipient.sol\\\";\\nimport \\\"./IERC777Sender.sol\\\";\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../introspection/IERC1820Registry.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory aName,\\n        string memory aSymbol,\\n        address[] memory theDefaultOperators\\n    ) {\\n        _name = aName;\\n        _symbol = aSymbol;\\n\\n        _defaultOperatorsArray = theDefaultOperators;\\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override(IERC777) returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override(IERC777) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20Detailed-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override(IERC777) returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777) {\\n        _send(_msgSender(), _msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777) {\\n        _burn(_msgSender(), _msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        address tokenHolder\\n    ) public view override(IERC777) returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777) {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) external override(IERC777) {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override(IERC777) returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    )\\n    external override(IERC777)\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator\\\");\\n        _send(_msgSender(), sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData)\\n    external override(IERC777) {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator\\\");\\n        _burn(_msgSender(), account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender)\\n    public view override(IERC20) returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) external override(IERC20) returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {Transfer} and {Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount)\\n    external override(IERC20) returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: transfer amount exceeds allowance\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n    internal\\n    {\\n        require(account != address(0), \\\"ERC777: mint to zero address\\\");\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n    {\\n        require(from != address(0), \\\"ERC777: send from zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to zero address\\\");\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param operator address operator requesting the operation\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address operator,\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal\\n    {\\n        require(from != address(0), \\\"ERC777: burn from zero address\\\");\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n    {\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\\n        // currently unnecessary.\\n        //require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n    {\\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n         address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf18fbdee798b2c3dd6b87d4e9e3d1486b7ab03a2380b253026db9ada3114fe4a\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * [ERC1820 registry standard](https://eips.ethereum.org/EIPS/eip-1820) to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See `IERC1820Registry` and\\n * `ERC1820Implementer`.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n     *\\n     * Emits a `Sent` event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the `tokensReceived`\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See `IERC777Sender`.\\n     *\\n     * Emits a `Burned` event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See `operatorSend` and `operatorBurn`.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See `isOperatorFor`.\\n     *\\n     * Emits an `AuthorizedOperator` event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See `isOperatorFor` and `defaultOperators`.\\n     *\\n     * Emits a `RevokedOperator` event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if `authorizeOperator` was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * `revokeOperator`, in which case `isOperatorFor` will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n     *\\n     * Emits a `Sent` event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the `tokensReceived`\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See `IERC777Sender`.\\n     *\\n     * Emits a `Burned` event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    function decimals() external returns (uint8);\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xd8fb2f5bda9acc32af1bc5ed8a64c67a42ac7f32dd1195387535e8e148d40421\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of `IERC777` tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\\n *\\n * See `IERC1820Registry` and `ERC1820Implementer`.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an `IERC777` token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * `IERC777.balanceOf`, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc1e6f2d257d4973a27a86e590e01a3289317bd4b44ea040a622b4823c7793875\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * `IERC777` Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\\n *\\n * See `IERC1820Registry` and `ERC1820Implementer`.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an `IERC777` token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * `IERC777.balanceOf`, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8707e3440e84839e68a5ff455f9fbd74f6a313111197493911fd100f436f1937\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04801fc2398ee3370f3903f95389ea3a8da65a8df01f24b352e499e44d492e9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811790915560408051918252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99181900360200190a161258f806100676000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80632348238c146200004b578063bb3a39ee1462000064578063c6dbdf611462000097575b600080fd5b620000626200005c36600462000289565b620000a9565b005b6200007b6200007536600462000307565b620001a7565b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b03166200007b565b6000546001600160a01b0316336001600160a01b031614620000e85760405162461bcd60e51b8152600401620000df906200037a565b60405180910390fd5b6001600160a01b038116620001535760405162461bcd60e51b815260206004820152602a60248201527f5365636f6e646172793a206e6577207072696d61727920697320746865207a65604482015269726f206164647265737360b01b6064820152608401620000df565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99060200160405180910390a150565b600080546001600160a01b0316336001600160a01b031614620001de5760405162461bcd60e51b8152600401620000df906200037a565b600085858585620001f76000546001600160a01b031690565b60405162000205906200027b565b62000215959493929190620003ef565b604051809103906000f08015801562000232573d6000803e3d6000fd5b5090507f316f047f5c065537114379c7b7365dadd3cdf36ec1c32b528520bb31beaf37178185856040516200026a9392919062000435565b60405180910390a195945050505050565b6120f4806200046683390190565b6000602082840312156200029c57600080fd5b81356001600160a01b0381168114620002b457600080fd5b9392505050565b60008083601f840112620002ce57600080fd5b50813567ffffffffffffffff811115620002e757600080fd5b6020830191508360208285010111156200030057600080fd5b9250929050565b600080600080604085870312156200031e57600080fd5b843567ffffffffffffffff808211156200033757600080fd5b6200034588838901620002bb565b909650945060208701359150808211156200035f57600080fd5b506200036e87828801620002bb565b95989497509550505050565b6020808252602c908201527f5365636f6e646172793a2063616c6c6572206973206e6f74207468652070726960408201526b1b585c9e481858d8dbdd5b9d60a21b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062000405606083018789620003c6565b82810360208401526200041a818688620003c6565b91505060018060a01b03831660408301529695505050505050565b6001600160a01b03841681526040602082018190526000906200045c9083018486620003c6565b9594505050505056fe60806040523480156200001157600080fd5b50604051620020f4380380620020f4833981016040819052620000349162000484565b60408051600081526020808201909252845185928592916200005d9160029190860190620002b9565b50815162000073906003906020850190620002b9565b5080516200008990600490602084019062000348565b5060005b600454811015620000fd5760016005600060048481548110620000b457620000b462000511565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905580620000f48162000527565b9150506200008d565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200017857600080fd5b505af11580156200018d573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b1580156200020b57600080fd5b505af115801562000220573d6000803e3d6000fd5b50505050506001600160a01b038316151591506200029090505760405162461bcd60e51b815260206004820152602160248201527f53696465546f6b656e3a204d696e7465722061646472657373206973206e756c6044820152601b60fa1b606482015260840160405180910390fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055506200058e9050565b828054620002c79062000551565b90600052602060002090601f016020900481019282620002eb576000855562000336565b82601f106200030657805160ff191683800117855562000336565b8280016001018555821562000336579182015b828111156200033657825182559160200191906001019062000319565b5062000344929150620003a0565b5090565b82805482825590600052602060002090810192821562000336579160200282015b828111156200033657825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000369565b5b80821115620003445760008155600101620003a1565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620003df57600080fd5b81516001600160401b0380821115620003fc57620003fc620003b7565b604051601f8301601f19908116603f01168101908282118183101715620004275762000427620003b7565b816040528381526020925086838588010111156200044457600080fd5b600091505b8382101562000468578582018301518183018401529082019062000449565b838211156200047a5760008385830101525b9695505050505050565b6000806000606084860312156200049a57600080fd5b83516001600160401b0380821115620004b257600080fd5b620004c087838801620003cd565b94506020860151915080821115620004d757600080fd5b50620004e686828701620003cd565b604086015190935090506001600160a01b03811681146200050657600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200054a57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200056657607f821691505b602082108114156200058857634e487b7160e01b600052602260045260246000fd5b50919050565b611b56806200059e6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063959b8c3f116100ad578063dcdc7dd011610071578063dcdc7dd01461027f578063dd62ed3e14610292578063fad8b32a146102cb578063fc673c4f146102de578063fe9d9303146102f157600080fd5b8063959b8c3f1461022b57806395d89b411461023e5780639bd9bbc614610246578063a9059cbb14610259578063d95b63711461026c57600080fd5b806323b872dd116100f457806323b872dd146101c4578063313ce567146101d7578063556f0dc7146101e657806362ad1b83146101ed57806370a082311461020257600080fd5b806306e485381461013157806306fdde031461014f5780630754617214610164578063095ea7b31461018f57806318160ddd146101b2575b600080fd5b610139610304565b604051610146919061159c565b60405180910390f35b610157610366565b6040516101469190611636565b600954610177906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b6101a261019d366004611661565b6103ef565b6040519015158152602001610146565b6001545b604051908152602001610146565b6101a26101d236600461168d565b610407565b60405160128152602001610146565b60016101b6565b6102006101fb366004611717565b6105af565b005b6101b66102103660046117b6565b6001600160a01b031660009081526020819052604090205490565b6102006102393660046117b6565b610658565b610157610776565b6102006102543660046117d3565b610785565b6101a2610267366004611661565b6107df565b6101a261027a36600461182f565b6108c2565b61020061028d366004611868565b610964565b6101b66102a036600461182f565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6102006102d93660046117b6565b610a51565b6102006102ec366004611868565b610b6d565b6102006102ff3660046118f4565b610c09565b6060600480548060200260200160405190810160405280929190818152602001828054801561035c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161033e575b5050505050905090565b60606002805461037590611940565b80601f01602080910402602001604051908101604052809291908181526020018280546103a190611940565b801561035c5780601f106103c35761010080835404028352916020019161035c565b820191906000526020600020905b8154815290600101906020018083116103d157509395945050505050565b6000336103fd818585610c5e565b5060019392505050565b60006001600160a01b0383166104645760405162461bcd60e51b815260206004820181905260248201527f4552433737373a207472616e7366657220746f207a65726f206164647265737360448201526064015b60405180910390fd5b6001600160a01b0384166104c55760405162461bcd60e51b815260206004820152602260248201527f4552433737373a207472616e736665722066726f6d207a65726f206164647265604482015261737360f01b606482015260840161045b565b60003390506104f6818686866040518060200160405280600081525060405180602001604052806000815250610d15565b610522818686866040518060200160405280600081525060405180602001604052806000815250610e4b565b610576858261057186604051806060016040528060298152602001611ad5602991396001600160a01b03808c166000908152600860209081526040808320938b16835292905220549190610f6d565b610c5e565b6105a48186868660405180602001604052806000815250604051806020016040528060008152506000610fa7565b506001949350505050565b6105b933886108c2565b6105d55760405162461bcd60e51b815260040161045b9061197b565b61064f3388888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152506001925061117b915050565b50505050505050565b336001600160a01b03821614156106bd5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b606482015260840161045b565b6001600160a01b03811660009081526005602052604090205460ff161561070e573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916905561073d565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606003805461037590611940565b6107d93333868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292506001915061117b9050565b50505050565b60006001600160a01b0383166108375760405162461bcd60e51b815260206004820181905260248201527f4552433737373a207472616e7366657220746f207a65726f2061646472657373604482015260640161045b565b6000339050610868818286866040518060200160405280600081525060405180602001604052806000815250610d15565b610894818286866040518060200160405280600081525060405180602001604052806000815250610e4b565b6103fd8182868660405180602001604052806000815250604051806020016040528060008152506000610fa7565b6000816001600160a01b0316836001600160a01b0316148061092d57506001600160a01b03831660009081526005602052604090205460ff16801561092d57506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b8061095d57506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b6009546001600160a01b0316336001600160a01b0316146109d35760405162461bcd60e51b815260206004820152602360248201527f53696465546f6b656e3a2043616c6c6572206973206e6f7420746865206d696e6044820152623a32b960e91b606482015260840161045b565b610a4933878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061125292505050565b505050505050565b6001600160a01b038116331415610ab45760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b606482015260840161045b565b6001600160a01b03811660009081526005602052604090205460ff1615610b08573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610b34565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610b7733876108c2565b610b935760405162461bcd60e51b815260040161045b9061197b565b610a4933878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506113a092505050565b610c5933338585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292506113a0915050565b505050565b6001600160a01b038216610cb45760405162461bcd60e51b815260206004820152601f60248201527f4552433737373a20617070726f766520746f207a65726f206164647265737300604482015260640161045b565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b158015610d9157600080fd5b505afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc991906119bc565b90506001600160a01b0381161561064f57604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610e10908a908a908a908a908a908a906004016119d9565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b5050505050505050505050565b610e8883604051806060016040528060278152602001611aae602791396001600160a01b0388166000908152602081905260409020549190610f6d565b6001600160a01b038087166000908152602081905260408082209390935590861681522054610eb790846114fb565b6001600160a01b0380861660008181526020819052604090819020939093559151878216918916907f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798790610f1090889088908890611a33565b60405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610f5d91815260200190565b60405180910390a3505050505050565b60008184841115610f915760405162461bcd60e51b815260040161045b9190611636565b506000610f9e8486611a7e565b95945050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b91906119bc565b90506001600160a01b038116156110d7576040516223de2960e01b81526001600160a01b038216906223de29906110a0908b908b908b908b908b908b906004016119d9565b600060405180830381600087803b1580156110ba57600080fd5b505af11580156110ce573d6000803e3d6000fd5b50505050611171565b8115611171576001600160a01b0386163b156111715760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a40161045b565b5050505050505050565b6001600160a01b0386166111d15760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a2073656e642066726f6d207a65726f20616464726573730000604482015260640161045b565b6001600160a01b0385166112275760405162461bcd60e51b815260206004820152601c60248201527f4552433737373a2073656e6420746f207a65726f206164647265737300000000604482015260640161045b565b611235878787878787610d15565b611243878787878787610e4b565b61064f87878787878787610fa7565b6001600160a01b0384166112a85760405162461bcd60e51b815260206004820152601c60248201527f4552433737373a206d696e7420746f207a65726f206164647265737300000000604482015260640161045b565b6001546112b590846114fb565b6001556001600160a01b0384166000908152602081905260409020546112db90846114fb565b6001600160a01b038516600090815260208190526040812091909155611308908690868686866001610fa7565b836001600160a01b0316856001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d85858560405161134f93929190611a33565b60405180910390a36040518381526001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050505050565b6001600160a01b0384166113f65760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a206275726e2066726f6d207a65726f20616464726573730000604482015260640161045b565b61140585856000868686610d15565b61144283604051806060016040528060238152602001611afe602391396001600160a01b0387166000908152602081905260409020549190610f6d565b6001600160a01b038516600090815260208190526040902055600154611468908461155a565b600181905550836001600160a01b0316856001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a40988585856040516114b593929190611a33565b60405180910390a36040518381526000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611391565b6000806115088385611a95565b90508381101561095d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161045b565b600061095d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f6d565b6020808252825182820181905260009190848201906040850190845b818110156115dd5783516001600160a01b0316835292840192918401916001016115b8565b50909695505050505050565b6000815180845260005b8181101561160f576020818501810151868301820152016115f3565b81811115611621576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061095d60208301846115e9565b6001600160a01b038116811461165e57600080fd5b50565b6000806040838503121561167457600080fd5b823561167f81611649565b946020939093013593505050565b6000806000606084860312156116a257600080fd5b83356116ad81611649565b925060208401356116bd81611649565b929592945050506040919091013590565b60008083601f8401126116e057600080fd5b50813567ffffffffffffffff8111156116f857600080fd5b60208301915083602082850101111561171057600080fd5b9250929050565b600080600080600080600060a0888a03121561173257600080fd5b873561173d81611649565b9650602088013561174d81611649565b955060408801359450606088013567ffffffffffffffff8082111561177157600080fd5b61177d8b838c016116ce565b909650945060808a013591508082111561179657600080fd5b506117a38a828b016116ce565b989b979a50959850939692959293505050565b6000602082840312156117c857600080fd5b813561095d81611649565b600080600080606085870312156117e957600080fd5b84356117f481611649565b935060208501359250604085013567ffffffffffffffff81111561181757600080fd5b611823878288016116ce565b95989497509550505050565b6000806040838503121561184257600080fd5b823561184d81611649565b9150602083013561185d81611649565b809150509250929050565b6000806000806000806080878903121561188157600080fd5b863561188c81611649565b955060208701359450604087013567ffffffffffffffff808211156118b057600080fd5b6118bc8a838b016116ce565b909650945060608901359150808211156118d557600080fd5b506118e289828a016116ce565b979a9699509497509295939492505050565b60008060006040848603121561190957600080fd5b83359250602084013567ffffffffffffffff81111561192757600080fd5b611933868287016116ce565b9497909650939450505050565b600181811c9082168061195457607f821691505b6020821081141561197557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f6040820152603960f91b606082015260800190565b6000602082840312156119ce57600080fd5b815161095d81611649565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090611a14908301856115e9565b82810360a0840152611a2681856115e9565b9998505050505050505050565b838152606060208201526000611a4c60608301856115e9565b8281036040840152611a5e81856115e9565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611a9057611a90611a68565b500390565b60008219821115611aa857611aa8611a68565b50019056fe4552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a206275726e20616d6f756e7420657863656564732062616c616e6365a2646970667358221220d599207468b3ad7662c75ca9bc158bdcb36544458e22bf99af0889486fb8b0a464736f6c63430008090033a2646970667358221220b9ce5ea052dbc591f06afbe7425fd3d24ea8414050ee0193959c313433d2d31764736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80632348238c146200004b578063bb3a39ee1462000064578063c6dbdf611462000097575b600080fd5b620000626200005c36600462000289565b620000a9565b005b6200007b6200007536600462000307565b620001a7565b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b03166200007b565b6000546001600160a01b0316336001600160a01b031614620000e85760405162461bcd60e51b8152600401620000df906200037a565b60405180910390fd5b6001600160a01b038116620001535760405162461bcd60e51b815260206004820152602a60248201527f5365636f6e646172793a206e6577207072696d61727920697320746865207a65604482015269726f206164647265737360b01b6064820152608401620000df565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99060200160405180910390a150565b600080546001600160a01b0316336001600160a01b031614620001de5760405162461bcd60e51b8152600401620000df906200037a565b600085858585620001f76000546001600160a01b031690565b60405162000205906200027b565b62000215959493929190620003ef565b604051809103906000f08015801562000232573d6000803e3d6000fd5b5090507f316f047f5c065537114379c7b7365dadd3cdf36ec1c32b528520bb31beaf37178185856040516200026a9392919062000435565b60405180910390a195945050505050565b6120f4806200046683390190565b6000602082840312156200029c57600080fd5b81356001600160a01b0381168114620002b457600080fd5b9392505050565b60008083601f840112620002ce57600080fd5b50813567ffffffffffffffff811115620002e757600080fd5b6020830191508360208285010111156200030057600080fd5b9250929050565b600080600080604085870312156200031e57600080fd5b843567ffffffffffffffff808211156200033757600080fd5b6200034588838901620002bb565b909650945060208701359150808211156200035f57600080fd5b506200036e87828801620002bb565b95989497509550505050565b6020808252602c908201527f5365636f6e646172793a2063616c6c6572206973206e6f74207468652070726960408201526b1b585c9e481858d8dbdd5b9d60a21b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062000405606083018789620003c6565b82810360208401526200041a818688620003c6565b91505060018060a01b03831660408301529695505050505050565b6001600160a01b03841681526040602082018190526000906200045c9083018486620003c6565b9594505050505056fe60806040523480156200001157600080fd5b50604051620020f4380380620020f4833981016040819052620000349162000484565b60408051600081526020808201909252845185928592916200005d9160029190860190620002b9565b50815162000073906003906020850190620002b9565b5080516200008990600490602084019062000348565b5060005b600454811015620000fd5760016005600060048481548110620000b457620000b462000511565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905580620000f48162000527565b9150506200008d565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200017857600080fd5b505af11580156200018d573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b1580156200020b57600080fd5b505af115801562000220573d6000803e3d6000fd5b50505050506001600160a01b038316151591506200029090505760405162461bcd60e51b815260206004820152602160248201527f53696465546f6b656e3a204d696e7465722061646472657373206973206e756c6044820152601b60fa1b606482015260840160405180910390fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055506200058e9050565b828054620002c79062000551565b90600052602060002090601f016020900481019282620002eb576000855562000336565b82601f106200030657805160ff191683800117855562000336565b8280016001018555821562000336579182015b828111156200033657825182559160200191906001019062000319565b5062000344929150620003a0565b5090565b82805482825590600052602060002090810192821562000336579160200282015b828111156200033657825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000369565b5b80821115620003445760008155600101620003a1565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620003df57600080fd5b81516001600160401b0380821115620003fc57620003fc620003b7565b604051601f8301601f19908116603f01168101908282118183101715620004275762000427620003b7565b816040528381526020925086838588010111156200044457600080fd5b600091505b8382101562000468578582018301518183018401529082019062000449565b838211156200047a5760008385830101525b9695505050505050565b6000806000606084860312156200049a57600080fd5b83516001600160401b0380821115620004b257600080fd5b620004c087838801620003cd565b94506020860151915080821115620004d757600080fd5b50620004e686828701620003cd565b604086015190935090506001600160a01b03811681146200050657600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200054a57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200056657607f821691505b602082108114156200058857634e487b7160e01b600052602260045260246000fd5b50919050565b611b56806200059e6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063959b8c3f116100ad578063dcdc7dd011610071578063dcdc7dd01461027f578063dd62ed3e14610292578063fad8b32a146102cb578063fc673c4f146102de578063fe9d9303146102f157600080fd5b8063959b8c3f1461022b57806395d89b411461023e5780639bd9bbc614610246578063a9059cbb14610259578063d95b63711461026c57600080fd5b806323b872dd116100f457806323b872dd146101c4578063313ce567146101d7578063556f0dc7146101e657806362ad1b83146101ed57806370a082311461020257600080fd5b806306e485381461013157806306fdde031461014f5780630754617214610164578063095ea7b31461018f57806318160ddd146101b2575b600080fd5b610139610304565b604051610146919061159c565b60405180910390f35b610157610366565b6040516101469190611636565b600954610177906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b6101a261019d366004611661565b6103ef565b6040519015158152602001610146565b6001545b604051908152602001610146565b6101a26101d236600461168d565b610407565b60405160128152602001610146565b60016101b6565b6102006101fb366004611717565b6105af565b005b6101b66102103660046117b6565b6001600160a01b031660009081526020819052604090205490565b6102006102393660046117b6565b610658565b610157610776565b6102006102543660046117d3565b610785565b6101a2610267366004611661565b6107df565b6101a261027a36600461182f565b6108c2565b61020061028d366004611868565b610964565b6101b66102a036600461182f565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6102006102d93660046117b6565b610a51565b6102006102ec366004611868565b610b6d565b6102006102ff3660046118f4565b610c09565b6060600480548060200260200160405190810160405280929190818152602001828054801561035c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161033e575b5050505050905090565b60606002805461037590611940565b80601f01602080910402602001604051908101604052809291908181526020018280546103a190611940565b801561035c5780601f106103c35761010080835404028352916020019161035c565b820191906000526020600020905b8154815290600101906020018083116103d157509395945050505050565b6000336103fd818585610c5e565b5060019392505050565b60006001600160a01b0383166104645760405162461bcd60e51b815260206004820181905260248201527f4552433737373a207472616e7366657220746f207a65726f206164647265737360448201526064015b60405180910390fd5b6001600160a01b0384166104c55760405162461bcd60e51b815260206004820152602260248201527f4552433737373a207472616e736665722066726f6d207a65726f206164647265604482015261737360f01b606482015260840161045b565b60003390506104f6818686866040518060200160405280600081525060405180602001604052806000815250610d15565b610522818686866040518060200160405280600081525060405180602001604052806000815250610e4b565b610576858261057186604051806060016040528060298152602001611ad5602991396001600160a01b03808c166000908152600860209081526040808320938b16835292905220549190610f6d565b610c5e565b6105a48186868660405180602001604052806000815250604051806020016040528060008152506000610fa7565b506001949350505050565b6105b933886108c2565b6105d55760405162461bcd60e51b815260040161045b9061197b565b61064f3388888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152506001925061117b915050565b50505050505050565b336001600160a01b03821614156106bd5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b606482015260840161045b565b6001600160a01b03811660009081526005602052604090205460ff161561070e573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff1916905561073d565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606003805461037590611940565b6107d93333868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292506001915061117b9050565b50505050565b60006001600160a01b0383166108375760405162461bcd60e51b815260206004820181905260248201527f4552433737373a207472616e7366657220746f207a65726f2061646472657373604482015260640161045b565b6000339050610868818286866040518060200160405280600081525060405180602001604052806000815250610d15565b610894818286866040518060200160405280600081525060405180602001604052806000815250610e4b565b6103fd8182868660405180602001604052806000815250604051806020016040528060008152506000610fa7565b6000816001600160a01b0316836001600160a01b0316148061092d57506001600160a01b03831660009081526005602052604090205460ff16801561092d57506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b8061095d57506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b6009546001600160a01b0316336001600160a01b0316146109d35760405162461bcd60e51b815260206004820152602360248201527f53696465546f6b656e3a2043616c6c6572206973206e6f7420746865206d696e6044820152623a32b960e91b606482015260840161045b565b610a4933878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061125292505050565b505050505050565b6001600160a01b038116331415610ab45760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b606482015260840161045b565b6001600160a01b03811660009081526005602052604090205460ff1615610b08573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610b34565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610b7733876108c2565b610b935760405162461bcd60e51b815260040161045b9061197b565b610a4933878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506113a092505050565b610c5933338585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292506113a0915050565b505050565b6001600160a01b038216610cb45760405162461bcd60e51b815260206004820152601f60248201527f4552433737373a20617070726f766520746f207a65726f206164647265737300604482015260640161045b565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b158015610d9157600080fd5b505afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc991906119bc565b90506001600160a01b0381161561064f57604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610e10908a908a908a908a908a908a906004016119d9565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b5050505050505050505050565b610e8883604051806060016040528060278152602001611aae602791396001600160a01b0388166000908152602081905260409020549190610f6d565b6001600160a01b038087166000908152602081905260408082209390935590861681522054610eb790846114fb565b6001600160a01b0380861660008181526020819052604090819020939093559151878216918916907f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798790610f1090889088908890611a33565b60405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610f5d91815260200190565b60405180910390a3505050505050565b60008184841115610f915760405162461bcd60e51b815260040161045b9190611636565b506000610f9e8486611a7e565b95945050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b91906119bc565b90506001600160a01b038116156110d7576040516223de2960e01b81526001600160a01b038216906223de29906110a0908b908b908b908b908b908b906004016119d9565b600060405180830381600087803b1580156110ba57600080fd5b505af11580156110ce573d6000803e3d6000fd5b50505050611171565b8115611171576001600160a01b0386163b156111715760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a40161045b565b5050505050505050565b6001600160a01b0386166111d15760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a2073656e642066726f6d207a65726f20616464726573730000604482015260640161045b565b6001600160a01b0385166112275760405162461bcd60e51b815260206004820152601c60248201527f4552433737373a2073656e6420746f207a65726f206164647265737300000000604482015260640161045b565b611235878787878787610d15565b611243878787878787610e4b565b61064f87878787878787610fa7565b6001600160a01b0384166112a85760405162461bcd60e51b815260206004820152601c60248201527f4552433737373a206d696e7420746f207a65726f206164647265737300000000604482015260640161045b565b6001546112b590846114fb565b6001556001600160a01b0384166000908152602081905260409020546112db90846114fb565b6001600160a01b038516600090815260208190526040812091909155611308908690868686866001610fa7565b836001600160a01b0316856001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d85858560405161134f93929190611a33565b60405180910390a36040518381526001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050505050565b6001600160a01b0384166113f65760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a206275726e2066726f6d207a65726f20616464726573730000604482015260640161045b565b61140585856000868686610d15565b61144283604051806060016040528060238152602001611afe602391396001600160a01b0387166000908152602081905260409020549190610f6d565b6001600160a01b038516600090815260208190526040902055600154611468908461155a565b600181905550836001600160a01b0316856001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a40988585856040516114b593929190611a33565b60405180910390a36040518381526000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611391565b6000806115088385611a95565b90508381101561095d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161045b565b600061095d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f6d565b6020808252825182820181905260009190848201906040850190845b818110156115dd5783516001600160a01b0316835292840192918401916001016115b8565b50909695505050505050565b6000815180845260005b8181101561160f576020818501810151868301820152016115f3565b81811115611621576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061095d60208301846115e9565b6001600160a01b038116811461165e57600080fd5b50565b6000806040838503121561167457600080fd5b823561167f81611649565b946020939093013593505050565b6000806000606084860312156116a257600080fd5b83356116ad81611649565b925060208401356116bd81611649565b929592945050506040919091013590565b60008083601f8401126116e057600080fd5b50813567ffffffffffffffff8111156116f857600080fd5b60208301915083602082850101111561171057600080fd5b9250929050565b600080600080600080600060a0888a03121561173257600080fd5b873561173d81611649565b9650602088013561174d81611649565b955060408801359450606088013567ffffffffffffffff8082111561177157600080fd5b61177d8b838c016116ce565b909650945060808a013591508082111561179657600080fd5b506117a38a828b016116ce565b989b979a50959850939692959293505050565b6000602082840312156117c857600080fd5b813561095d81611649565b600080600080606085870312156117e957600080fd5b84356117f481611649565b935060208501359250604085013567ffffffffffffffff81111561181757600080fd5b611823878288016116ce565b95989497509550505050565b6000806040838503121561184257600080fd5b823561184d81611649565b9150602083013561185d81611649565b809150509250929050565b6000806000806000806080878903121561188157600080fd5b863561188c81611649565b955060208701359450604087013567ffffffffffffffff808211156118b057600080fd5b6118bc8a838b016116ce565b909650945060608901359150808211156118d557600080fd5b506118e289828a016116ce565b979a9699509497509295939492505050565b60008060006040848603121561190957600080fd5b83359250602084013567ffffffffffffffff81111561192757600080fd5b611933868287016116ce565b9497909650939450505050565b600181811c9082168061195457607f821691505b6020821081141561197557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f6040820152603960f91b606082015260800190565b6000602082840312156119ce57600080fd5b815161095d81611649565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090611a14908301856115e9565b82810360a0840152611a2681856115e9565b9998505050505050505050565b838152606060208201526000611a4c60608301856115e9565b8281036040840152611a5e81856115e9565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611a9057611a90611a68565b500390565b60008219821115611aa857611aa8611a68565b50019056fe4552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a206275726e20616d6f756e7420657863656564732062616c616e6365a2646970667358221220d599207468b3ad7662c75ca9bc158bdcb36544458e22bf99af0889486fb8b0a464736f6c63430008090033a2646970667358221220b9ce5ea052dbc591f06afbe7425fd3d24ea8414050ee0193959c313433d2d31764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "primary()": {
        "returns": {
          "_0": "the address of the primary."
        }
      },
      "transferPrimary(address)": {
        "details": "Transfers contract to a new primary.",
        "params": {
          "recipient": "The address of new primary."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12884,
        "contract": "contracts/SideTokenFactory/SideTokenFactoryV1.sol:SideTokenFactoryV1",
        "label": "_primary",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}