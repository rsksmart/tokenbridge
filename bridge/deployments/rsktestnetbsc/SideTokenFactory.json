{
  "address": "0xbB74098e1F6F95198209bA30BA92725a6CCd5eab",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimaryTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sideToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "granularity",
          "type": "uint256"
        }
      ],
      "name": "SideTokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "granularity",
          "type": "uint256"
        }
      ],
      "name": "createSideToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferPrimary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf071cbcee4df45bf0ae491286231caef0506950be07a1abcbc958b9fd4f2a393",
  "receipt": {
    "to": null,
    "from": "0xEAC27e59F8a71613137E9C5D475D05c7D4d198e8",
    "contractAddress": "0xbB74098e1F6F95198209bA30BA92725a6CCd5eab",
    "transactionIndex": 0,
    "gasUsed": "3175216",
    "logsBloom": "0x
    "blockHash": "0x79b80ecb04e871e6dfecafd5fe3a5df3b027a87a2268ac97a843fcdea8e78280",
    "transactionHash": "0xf071cbcee4df45bf0ae491286231caef0506950be07a1abcbc958b9fd4f2a393",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2152177,
        "transactionHash": "0xf071cbcee4df45bf0ae491286231caef0506950be07a1abcbc958b9fd4f2a393",
        "address": "0xbB74098e1F6F95198209bA30BA92725a6CCd5eab",
        "topics": [
          "0x4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9"
        ],
        "data": "0x000000000000000000000000eac27e59f8a71613137e9c5d475d05c7d4d198e8",
        "logIndex": 0,
        "blockHash": "0x79b80ecb04e871e6dfecafd5fe3a5df3b027a87a2268ac97a843fcdea8e78280"
      }
    ],
    "blockNumber": 2152177,
    "cumulativeGasUsed": "3175216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c9c50994c7f4ed6c6a7c2f652aca7adb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sideToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"SideTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"createSideToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"primary()\":{\"returns\":{\"_0\":\"the address of the primary.\"}},\"transferPrimary(address)\":{\"details\":\"Transfers contract to a new primary.\",\"params\":{\"recipient\":\"The address of new primary.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SideTokenFactory/SideTokenFactory.sol\":\"SideTokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SideToken/SideToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../zeppelin/token/ERC777/ERC777.sol\\\";\\nimport \\\"../interface/IERC677Receiver.sol\\\";\\nimport \\\"../interface/ISideToken.sol\\\";\\nimport \\\"../lib/LibEIP712.sol\\\";\\n\\ncontract SideToken is ISideToken, ERC777 {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public minter;\\n    uint256 private _granularity;\\n\\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2612.md\\n    bytes32 public domainSeparator;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    // ERC677 Transfer Event\\n    event Transfer(address,address,uint256,bytes);\\n\\n    constructor(string memory _tokenName, string memory _tokenSymbol, address _minterAddr, uint256 _newGranularity)\\n    ERC777(_tokenName, _tokenSymbol, new address[](0)) {\\n        require(_minterAddr != address(0), \\\"SideToken: Empty Minter\\\");\\n        require(_newGranularity >= 1, \\\"SideToken: Granularity < 1\\\");\\n        minter = _minterAddr;\\n        _granularity = _newGranularity;\\n\\n        uint chainId;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        domainSeparator = LibEIP712.hashEIP712Domain(\\n            name(),\\n            \\\"1\\\",\\n            chainId,\\n            address(this)\\n        );\\n    }\\n\\n    modifier onlyMinter() {\\n      require(_msgSender() == minter, \\\"SideToken: Caller is not the minter\\\");\\n      _;\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    )\\n    external onlyMinter override\\n    {\\n        _mint(_msgSender(), account, amount, userData, operatorData);\\n    }\\n\\n    /**\\n    * @dev ERC677 transfer token with additional data if the recipient is a contact.\\n    * @param recipient The address to transfer to.\\n    * @param amount The amount to be transferred.\\n    * @param data The extra data to be passed to the receiving contract.\\n    */\\n    function transferAndCall(address recipient, uint amount, bytes calldata data)\\n        external returns (bool success)\\n    {\\n        address from = _msgSender();\\n\\n        _send(from, from, recipient, amount, data, \\\"\\\", false);\\n        emit Transfer(from, recipient, amount, data);\\n        IERC677Receiver(recipient).onTokenTransfer(from, amount, data);\\n        return true;\\n    }\\n\\n    function granularity() public view override returns (uint256) {\\n        return _granularity;\\n    }\\n\\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2612.md\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"SideToken: EXPIRED\\\"); // solhint-disable-line not-rely-on-time\\n        bytes32 digest = LibEIP712.hashEIP712Message(\\n            domainSeparator,\\n            keccak256(\\n                abi.encode(\\n                    PERMIT_TYPEHASH,\\n                    owner,\\n                    spender,\\n                    value,\\n                    nonces[owner]++,\\n                    deadline\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"SideToken: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n\\n}\",\"keccak256\":\"0x4f6915fef50725cfde92986c2e2c83c80758b7de6d863d125974c1e1b5c47c82\",\"license\":\"MIT\"},\"contracts/SideTokenFactory/SideTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../zeppelin/ownership/Secondary.sol\\\";\\nimport \\\"../interface/ISideTokenFactory.sol\\\";\\nimport \\\"../SideToken/SideToken.sol\\\";\\n\\ncontract SideTokenFactory is ISideTokenFactory, Secondary {\\n\\n    function createSideToken(string calldata name, string calldata symbol, uint256 granularity)\\n    external onlyPrimary override returns(address) {\\n        address sideToken = address(new SideToken(name, symbol, primary(), granularity));\\n        emit SideTokenCreated(sideToken, symbol, granularity);\\n        return sideToken;\\n    }\\n}\",\"keccak256\":\"0xd777e928d953e0bc0f31cbcaa50b9e10eb501fd580fe7b32da279833824def44\",\"license\":\"MIT\"},\"contracts/interface/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address _sender, uint _value, bytes calldata _data) external;\\n}\",\"keccak256\":\"0xea0204863235cba5119f6c54b594ea1eefa84e4741ee607ed7ee05f62cb2d9e0\",\"license\":\"MIT\"},\"contracts/interface/ISideToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface ISideToken {\\n    function mint(address account, uint256 amount, bytes calldata userData, bytes calldata operatorData) external;\\n}\",\"keccak256\":\"0xf01477bc820f57970d7d8384417ac0aead22bd336077e371c48da917270013b4\",\"license\":\"MIT\"},\"contracts/interface/ISideTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface ISideTokenFactory {\\n\\n    function createSideToken(string calldata name, string calldata symbol, uint256 granularity) external returns(address);\\n\\n    event SideTokenCreated(address indexed sideToken, string symbol, uint256 granularity);\\n}\",\"keccak256\":\"0x550c1af5fa52739ac28f58c36f04ba634213c5307ae95b412e41f3ee1d2e7217\",\"license\":\"MIT\"},\"contracts/lib/LibEIP712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n// https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\nlibrary LibEIP712 {\\n\\n    // Hash of the EIP712 Domain Separator Schema\\n    // keccak256(abi.encodePacked(\\n    //     \\\"EIP712Domain(\\\",\\n    //     \\\"string name,\\\",\\n    //     \\\"string version,\\\",\\n    //     \\\"uint256 chainId,\\\",\\n    //     \\\"address verifyingContract\\\",\\n    //     \\\")\\\"\\n    // ))\\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev Calculates a EIP712 domain separator.\\n    /// @param name The EIP712 domain name.\\n    /// @param version The EIP712 domain version.\\n    /// @param verifyingContract The EIP712 verifying contract.\\n    /// @return result EIP712 domain separator.\\n    function hashEIP712Domain(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n        //     keccak256(bytes(name)),\\n        //     keccak256(bytes(version)),\\n        //     chainId,\\n        //     uint256(verifyingContract)\\n        // ))\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // Calculate hashes of dynamic data\\n            let nameHash := keccak256(add(name, 32), mload(name))\\n            let versionHash := keccak256(add(version, 32), mload(version))\\n\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // Store params in memory\\n            mstore(memPtr, schemaHash)\\n            mstore(add(memPtr, 32), nameHash)\\n            mstore(add(memPtr, 64), versionHash)\\n            mstore(add(memPtr, 96), chainId)\\n            mstore(add(memPtr, 128), verifyingContract)\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 160)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\n    ///                         with getDomainHash().\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return result EIP712 hash applied to the given EIP712 Domain.\\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x6116e22c413fc65e87bf7db958d5c1f301b493494813f76dce512f8254c3b012\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xbc43be9319c563253600d0a1d7106572c9bfc1fbb623d133a1edfb7e60c845c4\",\"license\":\"MIT\"},\"contracts/zeppelin/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as `account`'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `_account`.\\n     * - `_interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `_implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address _account, bytes32 _interfaceHash, address _implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `_interfaceHash` for `_account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `_interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `_account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address _account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x1b44f619ae588fd201e93b126b80576e1244ef468e8b4e54e62fbad6a805cc87\",\"license\":\"MIT\"},\"contracts/zeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x09ca2716452528a6e69ac9f83f874292a1e547630473f3133038314a2f16029e\",\"license\":\"MIT\"},\"contracts/zeppelin/ownership/Secondary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\\n */\\nabstract contract Secondary is Context {\\n    address private _primary;\\n\\n    /**\\n     * @dev Emitted when the primary contract changes.\\n     */\\n    event PrimaryTransferred(\\n        address recipient\\n    );\\n\\n    /**\\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\\n     */\\n    constructor () {\\n        _primary = _msgSender();\\n        emit PrimaryTransferred(_primary);\\n    }\\n\\n    /**\\n     * @dev Reverts if called from any account other than the primary.\\n     */\\n    modifier onlyPrimary() {\\n        require(_msgSender() == _primary, \\\"Secondary: caller is not the primary account\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return the address of the primary.\\n     */\\n    function primary() public view returns (address) {\\n        return _primary;\\n    }\\n\\n    /**\\n     * @dev Transfers contract to a new primary.\\n     * @param recipient The address of new primary.\\n     */\\n    function transferPrimary(address recipient) public onlyPrimary {\\n        require(recipient != address(0), \\\"Secondary: new primary is the zero address\\\");\\n        _primary = recipient;\\n        emit PrimaryTransferred(_primary);\\n    }\\n}\\n\",\"keccak256\":\"0x79b3afb98ca1e12e33c63da57ca460fc217f2110a4fa1c18c67a7d84e048d285\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x1bc9527655c4be58541c2fb90c0a05952938961c289f505c70160f87e08aef33\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/ERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC777.sol\\\";\\nimport \\\"./IERC777Recipient.sol\\\";\\nimport \\\"./IERC777Sender.sol\\\";\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../introspection/IERC1820Registry.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory aName,\\n        string memory aSymbol,\\n        address[] memory theDefaultOperators\\n    ) {\\n        _name = aName;\\n        _symbol = aSymbol;\\n\\n        _defaultOperatorsArray = theDefaultOperators;\\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override(IERC777) returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override(IERC777) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20Detailed-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override(IERC777) returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777) {\\n        _send(_msgSender(), _msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777) {\\n        _burn(_msgSender(), _msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        address tokenHolder\\n    ) public view override(IERC777) returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777) {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) external override(IERC777) {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override(IERC777) returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    )\\n    external override(IERC777)\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator\\\");\\n        _send(_msgSender(), sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData)\\n    external override(IERC777) {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator\\\");\\n        _burn(_msgSender(), account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender)\\n    public view override(IERC20) returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) external override(IERC20) returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {Transfer} and {Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount)\\n    external override(IERC20) returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: transfer amount exceeds allowance\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n    internal\\n    {\\n        require(account != address(0), \\\"ERC777: mint to zero address\\\");\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n    {\\n        require(from != address(0), \\\"ERC777: send from zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to zero address\\\");\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param operator address operator requesting the operation\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address operator,\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal\\n    {\\n        require(from != address(0), \\\"ERC777: burn from zero address\\\");\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n    {\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\\n        // currently unnecessary.\\n        //require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n    {\\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n         address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcde4544ee18969a20b184e0acccecfa116a5abbfd9c2a1ebd4dcafc7b65cfc86\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * [ERC1820 registry standard](https://eips.ethereum.org/EIPS/eip-1820) to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See `IERC1820Registry` and\\n * `ERC1820Implementer`.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n     *\\n     * Emits a `Sent` event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the `tokensReceived`\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See `IERC777Sender`.\\n     *\\n     * Emits a `Burned` event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See `operatorSend` and `operatorBurn`.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See `isOperatorFor`.\\n     *\\n     * Emits an `AuthorizedOperator` event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See `isOperatorFor` and `defaultOperators`.\\n     *\\n     * Emits a `RevokedOperator` event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if `authorizeOperator` was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * `revokeOperator`, in which case `isOperatorFor` will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n     *\\n     * Emits a `Sent` event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the `tokensReceived`\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See `IERC777Sender`.\\n     *\\n     * Emits a `Burned` event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    function decimals() external returns (uint8);\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x9ace3cf83443ae90a995a8e33652238fa2b5afb258897757f85467d5fb437c1a\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of `IERC777` tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\\n *\\n * See `IERC1820Registry` and `ERC1820Implementer`.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an `IERC777` token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * `IERC777.balanceOf`, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc8dae3544a459d13f23ba0c7737f6e279e06d83ef86b8f7a0318d83bcf4147e3\",\"license\":\"MIT\"},\"contracts/zeppelin/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * `IERC777` Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\\n *\\n * See `IERC1820Registry` and `ERC1820Implementer`.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an `IERC777` token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * `IERC777.balanceOf`, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x222036566a212defc97ef08e8f41f08dbc4880c69839f0e8d76f4d4d2406c862\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc67d0428addcf1cbef937166a7b8f28d4e1d6ecf0eaaff683501d25e8593dc28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610019610074565b600080546001600160a01b0319166001600160a01b0392831617908190556040517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d992610067921690610078565b60405180910390a161008c565b3390565b6001600160a01b0391909116815260200190565b612d628061009b6000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80632348238c146200004b57806326d9e9631462000064578063c6dbdf611462000093575b600080fd5b620000626200005c366004620002b8565b6200009d565b005b6200007b62000075366004620002e8565b6200016c565b6040516200008a91906200038a565b60405180910390f35b6200007b6200024d565b6000546001600160a01b0316620000b36200025c565b6001600160a01b031614620000e55760405162461bcd60e51b8152600401620000dc9062000458565b60405180910390fd5b6001600160a01b0381166200010e5760405162461bcd60e51b8152600401620000dc906200040e565b600080546001600160a01b0319166001600160a01b0383811691909117918290556040517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d992620001619216906200038a565b60405180910390a150565b600080546001600160a01b0316620001836200025c565b6001600160a01b031614620001ac5760405162461bcd60e51b8152600401620000dc9062000458565b600086868686620001bc6200024d565b87604051620001cb9062000260565b620001dc969594939291906200039e565b604051809103906000f080158015620001f9573d6000803e3d6000fd5b509050806001600160a01b03167ff57d2ded8330a4affd2fa52378069be534fe22288536537d1a1cfc06151845078686866040516200023b93929190620003e8565b60405180910390a29695505050505050565b6000546001600160a01b031690565b3390565b61288880620004a583390190565b60008083601f84011262000280578182fd5b50813567ffffffffffffffff81111562000298578182fd5b602083019150836020828501011115620002b157600080fd5b9250929050565b600060208284031215620002ca578081fd5b81356001600160a01b0381168114620002e1578182fd5b9392505050565b60008060008060006060868803121562000300578081fd5b853567ffffffffffffffff8082111562000318578283fd5b6200032689838a016200026e565b909750955060208801359150808211156200033f578283fd5b506200034e888289016200026e565b96999598509660400135949350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b600060808252620003b460808301888a62000360565b8281036020840152620003c981878962000360565b6001600160a01b03959095166040840152505060600152949350505050565b600060408252620003fe60408301858762000360565b9050826020830152949350505050565b6020808252602a908201527f5365636f6e646172793a206e6577207072696d61727920697320746865207a65604082015269726f206164647265737360b01b606082015260800190565b6020808252602c908201527f5365636f6e646172793a2063616c6c6572206973206e6f74207468652070726960408201526b1b585c9e481858d8dbdd5b9d60a21b60608201526080019056fe60806040523480156200001157600080fd5b506040516200288838038062002888833981016040819052620000349162000561565b60408051600081526020808201909252855186928692916200005d9160029190860190620003c2565b50815162000073906003906020850190620003c2565b5080516200008990600490602084019062000457565b5060005b600454811015620000e95760016005600060048481548110620000ac57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016200008d565b506040516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90620001479030907fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054908290600401620005f0565b600060405180830381600087803b1580156200016257600080fd5b505af115801562000177573d6000803e3d6000fd5b50506040516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150620001d89030907faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a908290600401620005f0565b600060405180830381600087803b158015620001f357600080fd5b505af115801562000208573d6000803e3d6000fd5b50505050506001600160a01b038416151591506200024590505760405162461bcd60e51b81526004016200023c9062000613565b60405180910390fd5b6001811015620002695760405162461bcd60e51b81526004016200023c906200064a565b600980546001600160a01b0319166001600160a01b038416179055600a81905546620002c562000298620002d4565b604051806040016040528060018152602001603160f81b81525083306200036b60201b62000fa41760201c565b600b5550620006819350505050565b60028054604080516020601f6000196101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015620003615780601f10620003355761010080835404028352916020019162000361565b820191906000526020600020905b8154815290600101906020018083116200034357829003601f168201915b5050505050905090565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003fa576000855562000445565b82601f106200041557805160ff191683800117855562000445565b8280016001018555821562000445579182015b828111156200044557825182559160200191906001019062000428565b5062000453929150620004af565b5090565b82805482825590600052602060002090810192821562000445579160200282015b828111156200044557825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000478565b5b80821115620004535760008155600101620004b0565b600082601f830112620004d7578081fd5b81516001600160401b0380821115620004ec57fe5b6040516020601f8401601f19168201810183811183821017156200050c57fe5b604052838252858401810187101562000523578485fd5b8492505b8383101562000546578583018101518284018201529182019162000527565b838311156200055757848185840101525b5095945050505050565b6000806000806080858703121562000577578384fd5b84516001600160401b03808211156200058e578586fd5b6200059c88838901620004c6565b95506020870151915080821115620005b2578485fd5b50620005c187828801620004c6565b604087015190945090506001600160a01b0381168114620005e0578283fd5b6060959095015193969295505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60208082526017908201527f53696465546f6b656e3a20456d707479204d696e746572000000000000000000604082015260600190565b6020808252601a908201527f53696465546f6b656e3a204772616e756c6172697479203c2031000000000000604082015260600190565b6121f780620006916000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637ecebe00116100de578063d95b637111610097578063f698da2511610071578063f698da2514610308578063fad8b32a14610310578063fc673c4f14610323578063fe9d93031461033657610173565b8063d95b6371146102cf578063dcdc7dd0146102e2578063dd62ed3e146102f557610173565b80637ecebe0014610268578063959b8c3f1461027b57806395d89b411461028e5780639bd9bbc614610296578063a9059cbb146102a9578063d505accf146102bc57610173565b806330adf81f1161013057806330adf81f14610208578063313ce567146102105780634000aea014610225578063556f0dc71461023857806362ad1b831461024057806370a082311461025557610173565b806306e485381461017857806306fdde031461019657806307546172146101ab578063095ea7b3146101c057806318160ddd146101e057806323b872dd146101f5575b600080fd5b610180610349565b60405161018d9190611c97565b60405180910390f35b61019e6103ab565b60405161018d9190611d4a565b6101b3610435565b60405161018d9190611b9f565b6101d36101ce3660046119d2565b610444565b60405161018d9190611ce4565b6101e8610466565b60405161018d9190611cef565b6101d3610203366004611881565b61046c565b6101e86105b4565b6102186105d8565b60405161018d9190612128565b6101d36102333660046119fd565b6105dd565b6101e86106eb565b61025361024e3660046118c1565b6106f1565b005b6101e8610263366004611811565b6107a8565b6101e8610276366004611811565b6107c3565b610253610289366004611811565b6107d5565b61019e610902565b6102536102a43660046119fd565b610963565b6101d36102b73660046119d2565b6109cb565b6102536102ca36600461195d565b610a85565b6101d36102dd366004611849565b610bd8565b6102536102f0366004611a57565b610c7a565b6101e8610303366004611849565b610d39565b6101e8610d64565b61025361031e366004611811565b610d6a565b610253610331366004611a57565b610e97565b610253610344366004611ae0565b610f41565b606060048054806020026020016040519081016040528092919081815260200182805480156103a157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610383575b5050505050905090565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103a15780601f10610409576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161041757509395945050505050565b6009546001600160a01b031681565b60008061044f610ffb565b905061045c818585610fff565b5060019392505050565b60015490565b60006001600160a01b03831661049d5760405162461bcd60e51b815260040161049490611e50565b60405180910390fd5b6001600160a01b0384166104c35760405162461bcd60e51b815260040161049490612043565b60006104cd610ffb565b90506104fb81868686604051806020016040528060008152506040518060200160405280600081525061108d565b6105278186868660405180602001604052806000815250604051806020016040528060008152506111bb565b61057b858261057686604051806060016040528060298152602001612176602991396001600160a01b03808c166000908152600860209081526040808320938b168352929052205491906112db565b610fff565b6105a98186868660405180602001604052806000815250604051806020016040528060008152506000611307565b506001949350505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601290565b6000806105e8610ffb565b905061063c8182888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091528181529350915061146e9050565b7fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168187878787604051610673959493929190611c0d565b60405180910390a1604051635260769b60e11b81526001600160a01b0387169063a4c0ed36906106ad908490899089908990600401611c65565b600060405180830381600087803b1580156106c757600080fd5b505af11580156106db573d6000803e3d6000fd5b5060019998505050505050505050565b600a5490565b6107026106fc610ffb565b88610bd8565b61071e5760405162461bcd60e51b815260040161049490612085565b61079f610729610ffb565b88888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152506001925061146e915050565b50505050505050565b6001600160a01b031660009081526020819052604090205490565b600c6020526000908152604090205481565b806001600160a01b03166107e7610ffb565b6001600160a01b0316141561080e5760405162461bcd60e51b815260040161049490611dcb565b6001600160a01b03811660009081526005602052604090205460ff1615610871576007600061083b610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff191690556108b8565b60016006600061087f610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790555b6108c0610ffb565b6001600160a01b0316816001600160a01b03167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103a15780601f10610409576101008083540402835291602001916103a1565b6109c561096e610ffb565b610976610ffb565b868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292506001915061146e9050565b50505050565b60006001600160a01b0383166109f35760405162461bcd60e51b815260040161049490611e50565b60006109fd610ffb565b9050610a2b81828686604051806020016040528060008152506040518060200160405280600081525061108d565b610a578182868660405180602001604052806000815250604051806020016040528060008152506111bb565b61045c8182868660405180602001604052806000815250604051806020016040528060008152506000611307565b42841015610aa55760405162461bcd60e51b815260040161049490611fa9565b600b546001600160a01b0388166000908152600c6020908152604080832080546001810190915590519293610b27939092610b0c927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e9290918e9101611cf8565b604051602081830303815290604052805190602001206114e5565b9050600060018286868660405160008152602001604052604051610b4e9493929190611d2c565b6020604051602081039080840390855afa158015610b70573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610ba65750886001600160a01b0316816001600160a01b0316145b610bc25760405162461bcd60e51b815260040161049490611f2f565b610bcd898989610fff565b505050505050505050565b6000816001600160a01b0316836001600160a01b03161480610c4357506001600160a01b03831660009081526005602052604090205460ff168015610c4357506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b80610c7357506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b6009546001600160a01b0316610c8e610ffb565b6001600160a01b031614610cb45760405162461bcd60e51b815260040161049490611f66565b610d31610cbf610ffb565b878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061150492505050565b505050505050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b600b5481565b610d72610ffb565b6001600160a01b0316816001600160a01b03161415610da35760405162461bcd60e51b815260040161049490611e0f565b6001600160a01b03811660009081526005602052604090205460ff1615610e0f57600160076000610dd2610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff1916911515919091179055610e4d565b60066000610e1b610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff191690555b610e55610ffb565b6001600160a01b0316816001600160a01b03167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b610ea8610ea2610ffb565b87610bd8565b610ec45760405162461bcd60e51b815260040161049490612085565b610d31610ecf610ffb565b878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061162c92505050565b610f9f610f4c610ffb565b610f54610ffb565b8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805160208101909152908152925061162c915050565b505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b3390565b6001600160a01b0382166110255760405162461bcd60e51b8152600401610494906120c6565b6001600160a01b0380841660008181526008602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611080908590611cef565b60405180910390a3505050565b60405163555ddc6560e11b8152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca906110e99089907f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89590600401611c4c565b60206040518083038186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611139919061182d565b90506001600160a01b0381161561079f57604051633ad5cbc160e11b81526001600160a01b038216906375ab978290611180908a908a908a908a908a908a90600401611bb3565b600060405180830381600087803b15801561119a57600080fd5b505af11580156111ae573d6000803e3d6000fd5b5050505050505050505050565b6111f88360405180606001604052806027815260200161214f602791396001600160a01b03881660009081526020819052604090205491906112db565b6001600160a01b038087166000908152602081905260408082209390935590861681522054611227908461175d565b6001600160a01b0380861660008181526020819052604090819020939093559151878216918916907f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798790611280908890889088906120fd565b60405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516112cb9190611cef565b60405180910390a3505050505050565b600081848411156112ff5760405162461bcd60e51b81526004016104949190611d4a565b505050900390565b60405163555ddc6560e11b8152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca906113639089907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b90600401611c4c565b60206040518083038186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b3919061182d565b90506001600160a01b0381161561142f576040516223de2960e01b81526001600160a01b038216906223de29906113f8908b908b908b908b908b908b90600401611bb3565b600060405180830381600087803b15801561141257600080fd5b505af1158015611426573d6000803e3d6000fd5b50505050611464565b811561146457611447866001600160a01b0316611782565b156114645760405162461bcd60e51b815260040161049490611ebc565b5050505050505050565b6001600160a01b0386166114945760405162461bcd60e51b815260040161049490611fd5565b6001600160a01b0385166114ba5760405162461bcd60e51b81526004016104949061200c565b6114c887878787878761108d565b6114d68787878787876111bb565b61079f87878787878787611307565b60405161190160f01b8152600281019290925260228201526042902090565b6001600160a01b03841661152a5760405162461bcd60e51b815260040161049490611e85565b600154611537908461175d565b6001556001600160a01b03841660009081526020819052604090205461155d908461175d565b6001600160a01b03851660009081526020819052604081209190915561158a908690868686866001611307565b836001600160a01b0316856001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8585856040516115d1939291906120fd565b60405180910390a3836001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161161d9190611cef565b60405180910390a35050505050565b6001600160a01b0384166116525760405162461bcd60e51b815260040161049490611d94565b6116618585600086868661108d565b61169e8360405180606001604052806023815260200161219f602391396001600160a01b03871660009081526020819052604090205491906112db565b6001600160a01b0385166000908152602081905260409020556001546116c49084611788565b600181905550836001600160a01b0316856001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098858585604051611711939291906120fd565b60405180910390a360006001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161161d9190611cef565b600082820183811015610c735760405162461bcd60e51b815260040161049490611d5d565b3b151590565b6000610c7383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112db565b60008083601f8401126117db578182fd5b50813567ffffffffffffffff8111156117f2578182fd5b60208301915083602082850101111561180a57600080fd5b9250929050565b600060208284031215611822578081fd5b8135610c7381612136565b60006020828403121561183e578081fd5b8151610c7381612136565b6000806040838503121561185b578081fd5b823561186681612136565b9150602083013561187681612136565b809150509250929050565b600080600060608486031215611895578081fd5b83356118a081612136565b925060208401356118b081612136565b929592945050506040919091013590565b600080600080600080600060a0888a0312156118db578283fd5b87356118e681612136565b965060208801356118f681612136565b955060408801359450606088013567ffffffffffffffff80821115611919578485fd5b6119258b838c016117ca565b909650945060808a013591508082111561193d578384fd5b5061194a8a828b016117ca565b989b979a50959850939692959293505050565b600080600080600080600060e0888a031215611977578283fd5b873561198281612136565b9650602088013561199281612136565b95506040880135945060608801359350608088013560ff811681146119b5578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156119e4578182fd5b82356119ef81612136565b946020939093013593505050565b60008060008060608587031215611a12578384fd5b8435611a1d81612136565b935060208501359250604085013567ffffffffffffffff811115611a3f578283fd5b611a4b878288016117ca565b95989497509550505050565b60008060008060008060808789031215611a6f578182fd5b8635611a7a81612136565b955060208701359450604087013567ffffffffffffffff80821115611a9d578384fd5b611aa98a838b016117ca565b90965094506060890135915080821115611ac1578384fd5b50611ace89828a016117ca565b979a9699509497509295939492505050565b600080600060408486031215611af4578283fd5b83359250602084013567ffffffffffffffff811115611b11578283fd5b611b1d868287016117ca565b9497909650939450505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452815b81811015611b7957602081850181015186830182015201611b5d565b81811115611b8a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090611bee90830185611b54565b82810360a0840152611c008185611b54565b9998505050505050505050565b6001600160a01b0386811682528516602082015260408101849052608060608201819052600090611c419083018486611b2a565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038616825284602083015260606040830152611c8d606083018486611b2a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611cd85783516001600160a01b031683529284019291840191600101611cb3565b50909695505050505050565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610c736020830184611b54565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f4552433737373a206275726e2066726f6d207a65726f20616464726573730000604082015260600190565b60208082526024908201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260408201526330ba37b960e11b606082015260800190565b60208082526021908201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6040820152603960f91b606082015260800190565b6020808252818101527f4552433737373a207472616e7366657220746f207a65726f2061646472657373604082015260600190565b6020808252601c908201527f4552433737373a206d696e7420746f207a65726f206164647265737300000000604082015260600190565b6020808252604d908201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460408201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60608201526c1ad95b9cd49958da5c1a595b9d609a1b608082015260a00190565b6020808252601c908201527f53696465546f6b656e3a20494e56414c49445f5349474e415455524500000000604082015260600190565b60208082526023908201527f53696465546f6b656e3a2043616c6c6572206973206e6f7420746865206d696e6040820152623a32b960e91b606082015260800190565b60208082526012908201527114da5919551bdad95b8e881156141254915160721b604082015260600190565b6020808252601e908201527f4552433737373a2073656e642066726f6d207a65726f20616464726573730000604082015260600190565b6020808252601c908201527f4552433737373a2073656e6420746f207a65726f206164647265737300000000604082015260600190565b60208082526022908201527f4552433737373a207472616e736665722066726f6d207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f6040820152603960f91b606082015260800190565b6020808252601f908201527f4552433737373a20617070726f766520746f207a65726f206164647265737300604082015260600190565b6000848252606060208301526121166060830185611b54565b8281036040840152611c8d8185611b54565b60ff91909116815260200190565b6001600160a01b038116811461214b57600080fd5b5056fe4552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a206275726e20616d6f756e7420657863656564732062616c616e6365a2646970667358221220e96305596548c1ccf5a73d7bede36fbfaeee3f672cbf14157179325f27c57bf764736f6c63430007060033a26469706673582212204cc330cf5079dbaee9f34fb1607540a3d5891d5eeb955ff8beaa47811a8c189964736f6c63430007060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80632348238c146200004b57806326d9e9631462000064578063c6dbdf611462000093575b600080fd5b620000626200005c366004620002b8565b6200009d565b005b6200007b62000075366004620002e8565b6200016c565b6040516200008a91906200038a565b60405180910390f35b6200007b6200024d565b6000546001600160a01b0316620000b36200025c565b6001600160a01b031614620000e55760405162461bcd60e51b8152600401620000dc9062000458565b60405180910390fd5b6001600160a01b0381166200010e5760405162461bcd60e51b8152600401620000dc906200040e565b600080546001600160a01b0319166001600160a01b0383811691909117918290556040517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d992620001619216906200038a565b60405180910390a150565b600080546001600160a01b0316620001836200025c565b6001600160a01b031614620001ac5760405162461bcd60e51b8152600401620000dc9062000458565b600086868686620001bc6200024d565b87604051620001cb9062000260565b620001dc969594939291906200039e565b604051809103906000f080158015620001f9573d6000803e3d6000fd5b509050806001600160a01b03167ff57d2ded8330a4affd2fa52378069be534fe22288536537d1a1cfc06151845078686866040516200023b93929190620003e8565b60405180910390a29695505050505050565b6000546001600160a01b031690565b3390565b61288880620004a583390190565b60008083601f84011262000280578182fd5b50813567ffffffffffffffff81111562000298578182fd5b602083019150836020828501011115620002b157600080fd5b9250929050565b600060208284031215620002ca578081fd5b81356001600160a01b0381168114620002e1578182fd5b9392505050565b60008060008060006060868803121562000300578081fd5b853567ffffffffffffffff8082111562000318578283fd5b6200032689838a016200026e565b909750955060208801359150808211156200033f578283fd5b506200034e888289016200026e565b96999598509660400135949350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b600060808252620003b460808301888a62000360565b8281036020840152620003c981878962000360565b6001600160a01b03959095166040840152505060600152949350505050565b600060408252620003fe60408301858762000360565b9050826020830152949350505050565b6020808252602a908201527f5365636f6e646172793a206e6577207072696d61727920697320746865207a65604082015269726f206164647265737360b01b606082015260800190565b6020808252602c908201527f5365636f6e646172793a2063616c6c6572206973206e6f74207468652070726960408201526b1b585c9e481858d8dbdd5b9d60a21b60608201526080019056fe60806040523480156200001157600080fd5b506040516200288838038062002888833981016040819052620000349162000561565b60408051600081526020808201909252855186928692916200005d9160029190860190620003c2565b50815162000073906003906020850190620003c2565b5080516200008990600490602084019062000457565b5060005b600454811015620000e95760016005600060048481548110620000ac57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016200008d565b506040516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90620001479030907fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054908290600401620005f0565b600060405180830381600087803b1580156200016257600080fd5b505af115801562000177573d6000803e3d6000fd5b50506040516329965a1d60e01b8152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150620001d89030907faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a908290600401620005f0565b600060405180830381600087803b158015620001f357600080fd5b505af115801562000208573d6000803e3d6000fd5b50505050506001600160a01b038416151591506200024590505760405162461bcd60e51b81526004016200023c9062000613565b60405180910390fd5b6001811015620002695760405162461bcd60e51b81526004016200023c906200064a565b600980546001600160a01b0319166001600160a01b038416179055600a81905546620002c562000298620002d4565b604051806040016040528060018152602001603160f81b81525083306200036b60201b62000fa41760201c565b600b5550620006819350505050565b60028054604080516020601f6000196101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015620003615780601f10620003355761010080835404028352916020019162000361565b820191906000526020600020905b8154815290600101906020018083116200034357829003601f168201915b5050505050905090565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003fa576000855562000445565b82601f106200041557805160ff191683800117855562000445565b8280016001018555821562000445579182015b828111156200044557825182559160200191906001019062000428565b5062000453929150620004af565b5090565b82805482825590600052602060002090810192821562000445579160200282015b828111156200044557825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000478565b5b80821115620004535760008155600101620004b0565b600082601f830112620004d7578081fd5b81516001600160401b0380821115620004ec57fe5b6040516020601f8401601f19168201810183811183821017156200050c57fe5b604052838252858401810187101562000523578485fd5b8492505b8383101562000546578583018101518284018201529182019162000527565b838311156200055757848185840101525b5095945050505050565b6000806000806080858703121562000577578384fd5b84516001600160401b03808211156200058e578586fd5b6200059c88838901620004c6565b95506020870151915080821115620005b2578485fd5b50620005c187828801620004c6565b604087015190945090506001600160a01b0381168114620005e0578283fd5b6060959095015193969295505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60208082526017908201527f53696465546f6b656e3a20456d707479204d696e746572000000000000000000604082015260600190565b6020808252601a908201527f53696465546f6b656e3a204772616e756c6172697479203c2031000000000000604082015260600190565b6121f780620006916000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637ecebe00116100de578063d95b637111610097578063f698da2511610071578063f698da2514610308578063fad8b32a14610310578063fc673c4f14610323578063fe9d93031461033657610173565b8063d95b6371146102cf578063dcdc7dd0146102e2578063dd62ed3e146102f557610173565b80637ecebe0014610268578063959b8c3f1461027b57806395d89b411461028e5780639bd9bbc614610296578063a9059cbb146102a9578063d505accf146102bc57610173565b806330adf81f1161013057806330adf81f14610208578063313ce567146102105780634000aea014610225578063556f0dc71461023857806362ad1b831461024057806370a082311461025557610173565b806306e485381461017857806306fdde031461019657806307546172146101ab578063095ea7b3146101c057806318160ddd146101e057806323b872dd146101f5575b600080fd5b610180610349565b60405161018d9190611c97565b60405180910390f35b61019e6103ab565b60405161018d9190611d4a565b6101b3610435565b60405161018d9190611b9f565b6101d36101ce3660046119d2565b610444565b60405161018d9190611ce4565b6101e8610466565b60405161018d9190611cef565b6101d3610203366004611881565b61046c565b6101e86105b4565b6102186105d8565b60405161018d9190612128565b6101d36102333660046119fd565b6105dd565b6101e86106eb565b61025361024e3660046118c1565b6106f1565b005b6101e8610263366004611811565b6107a8565b6101e8610276366004611811565b6107c3565b610253610289366004611811565b6107d5565b61019e610902565b6102536102a43660046119fd565b610963565b6101d36102b73660046119d2565b6109cb565b6102536102ca36600461195d565b610a85565b6101d36102dd366004611849565b610bd8565b6102536102f0366004611a57565b610c7a565b6101e8610303366004611849565b610d39565b6101e8610d64565b61025361031e366004611811565b610d6a565b610253610331366004611a57565b610e97565b610253610344366004611ae0565b610f41565b606060048054806020026020016040519081016040528092919081815260200182805480156103a157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610383575b5050505050905090565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103a15780601f10610409576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161041757509395945050505050565b6009546001600160a01b031681565b60008061044f610ffb565b905061045c818585610fff565b5060019392505050565b60015490565b60006001600160a01b03831661049d5760405162461bcd60e51b815260040161049490611e50565b60405180910390fd5b6001600160a01b0384166104c35760405162461bcd60e51b815260040161049490612043565b60006104cd610ffb565b90506104fb81868686604051806020016040528060008152506040518060200160405280600081525061108d565b6105278186868660405180602001604052806000815250604051806020016040528060008152506111bb565b61057b858261057686604051806060016040528060298152602001612176602991396001600160a01b03808c166000908152600860209081526040808320938b168352929052205491906112db565b610fff565b6105a98186868660405180602001604052806000815250604051806020016040528060008152506000611307565b506001949350505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601290565b6000806105e8610ffb565b905061063c8182888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091528181529350915061146e9050565b7fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168187878787604051610673959493929190611c0d565b60405180910390a1604051635260769b60e11b81526001600160a01b0387169063a4c0ed36906106ad908490899089908990600401611c65565b600060405180830381600087803b1580156106c757600080fd5b505af11580156106db573d6000803e3d6000fd5b5060019998505050505050505050565b600a5490565b6107026106fc610ffb565b88610bd8565b61071e5760405162461bcd60e51b815260040161049490612085565b61079f610729610ffb565b88888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152506001925061146e915050565b50505050505050565b6001600160a01b031660009081526020819052604090205490565b600c6020526000908152604090205481565b806001600160a01b03166107e7610ffb565b6001600160a01b0316141561080e5760405162461bcd60e51b815260040161049490611dcb565b6001600160a01b03811660009081526005602052604090205460ff1615610871576007600061083b610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff191690556108b8565b60016006600061087f610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff19169115159190911790555b6108c0610ffb565b6001600160a01b0316816001600160a01b03167ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f960405160405180910390a350565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103a15780601f10610409576101008083540402835291602001916103a1565b6109c561096e610ffb565b610976610ffb565b868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292506001915061146e9050565b50505050565b60006001600160a01b0383166109f35760405162461bcd60e51b815260040161049490611e50565b60006109fd610ffb565b9050610a2b81828686604051806020016040528060008152506040518060200160405280600081525061108d565b610a578182868660405180602001604052806000815250604051806020016040528060008152506111bb565b61045c8182868660405180602001604052806000815250604051806020016040528060008152506000611307565b42841015610aa55760405162461bcd60e51b815260040161049490611fa9565b600b546001600160a01b0388166000908152600c6020908152604080832080546001810190915590519293610b27939092610b0c927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e9290918e9101611cf8565b604051602081830303815290604052805190602001206114e5565b9050600060018286868660405160008152602001604052604051610b4e9493929190611d2c565b6020604051602081039080840390855afa158015610b70573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610ba65750886001600160a01b0316816001600160a01b0316145b610bc25760405162461bcd60e51b815260040161049490611f2f565b610bcd898989610fff565b505050505050505050565b6000816001600160a01b0316836001600160a01b03161480610c4357506001600160a01b03831660009081526005602052604090205460ff168015610c4357506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b80610c7357506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b6009546001600160a01b0316610c8e610ffb565b6001600160a01b031614610cb45760405162461bcd60e51b815260040161049490611f66565b610d31610cbf610ffb565b878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061150492505050565b505050505050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b600b5481565b610d72610ffb565b6001600160a01b0316816001600160a01b03161415610da35760405162461bcd60e51b815260040161049490611e0f565b6001600160a01b03811660009081526005602052604090205460ff1615610e0f57600160076000610dd2610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918616815292529020805460ff1916911515919091179055610e4d565b60066000610e1b610ffb565b6001600160a01b03908116825260208083019390935260409182016000908120918516815292529020805460ff191690555b610e55610ffb565b6001600160a01b0316816001600160a01b03167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a350565b610ea8610ea2610ffb565b87610bd8565b610ec45760405162461bcd60e51b815260040161049490612085565b610d31610ecf610ffb565b878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061162c92505050565b610f9f610f4c610ffb565b610f54610ffb565b8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040805160208101909152908152925061162c915050565b505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b3390565b6001600160a01b0382166110255760405162461bcd60e51b8152600401610494906120c6565b6001600160a01b0380841660008181526008602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611080908590611cef565b60405180910390a3505050565b60405163555ddc6560e11b8152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca906110e99089907f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89590600401611c4c565b60206040518083038186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611139919061182d565b90506001600160a01b0381161561079f57604051633ad5cbc160e11b81526001600160a01b038216906375ab978290611180908a908a908a908a908a908a90600401611bb3565b600060405180830381600087803b15801561119a57600080fd5b505af11580156111ae573d6000803e3d6000fd5b5050505050505050505050565b6111f88360405180606001604052806027815260200161214f602791396001600160a01b03881660009081526020819052604090205491906112db565b6001600160a01b038087166000908152602081905260408082209390935590861681522054611227908461175d565b6001600160a01b0380861660008181526020819052604090819020939093559151878216918916907f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798790611280908890889088906120fd565b60405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516112cb9190611cef565b60405180910390a3505050505050565b600081848411156112ff5760405162461bcd60e51b81526004016104949190611d4a565b505050900390565b60405163555ddc6560e11b8152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca906113639089907fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b90600401611c4c565b60206040518083038186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b3919061182d565b90506001600160a01b0381161561142f576040516223de2960e01b81526001600160a01b038216906223de29906113f8908b908b908b908b908b908b90600401611bb3565b600060405180830381600087803b15801561141257600080fd5b505af1158015611426573d6000803e3d6000fd5b50505050611464565b811561146457611447866001600160a01b0316611782565b156114645760405162461bcd60e51b815260040161049490611ebc565b5050505050505050565b6001600160a01b0386166114945760405162461bcd60e51b815260040161049490611fd5565b6001600160a01b0385166114ba5760405162461bcd60e51b81526004016104949061200c565b6114c887878787878761108d565b6114d68787878787876111bb565b61079f87878787878787611307565b60405161190160f01b8152600281019290925260228201526042902090565b6001600160a01b03841661152a5760405162461bcd60e51b815260040161049490611e85565b600154611537908461175d565b6001556001600160a01b03841660009081526020819052604090205461155d908461175d565b6001600160a01b03851660009081526020819052604081209190915561158a908690868686866001611307565b836001600160a01b0316856001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8585856040516115d1939291906120fd565b60405180910390a3836001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161161d9190611cef565b60405180910390a35050505050565b6001600160a01b0384166116525760405162461bcd60e51b815260040161049490611d94565b6116618585600086868661108d565b61169e8360405180606001604052806023815260200161219f602391396001600160a01b03871660009081526020819052604090205491906112db565b6001600160a01b0385166000908152602081905260409020556001546116c49084611788565b600181905550836001600160a01b0316856001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098858585604051611711939291906120fd565b60405180910390a360006001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161161d9190611cef565b600082820183811015610c735760405162461bcd60e51b815260040161049490611d5d565b3b151590565b6000610c7383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112db565b60008083601f8401126117db578182fd5b50813567ffffffffffffffff8111156117f2578182fd5b60208301915083602082850101111561180a57600080fd5b9250929050565b600060208284031215611822578081fd5b8135610c7381612136565b60006020828403121561183e578081fd5b8151610c7381612136565b6000806040838503121561185b578081fd5b823561186681612136565b9150602083013561187681612136565b809150509250929050565b600080600060608486031215611895578081fd5b83356118a081612136565b925060208401356118b081612136565b929592945050506040919091013590565b600080600080600080600060a0888a0312156118db578283fd5b87356118e681612136565b965060208801356118f681612136565b955060408801359450606088013567ffffffffffffffff80821115611919578485fd5b6119258b838c016117ca565b909650945060808a013591508082111561193d578384fd5b5061194a8a828b016117ca565b989b979a50959850939692959293505050565b600080600080600080600060e0888a031215611977578283fd5b873561198281612136565b9650602088013561199281612136565b95506040880135945060608801359350608088013560ff811681146119b5578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156119e4578182fd5b82356119ef81612136565b946020939093013593505050565b60008060008060608587031215611a12578384fd5b8435611a1d81612136565b935060208501359250604085013567ffffffffffffffff811115611a3f578283fd5b611a4b878288016117ca565b95989497509550505050565b60008060008060008060808789031215611a6f578182fd5b8635611a7a81612136565b955060208701359450604087013567ffffffffffffffff80821115611a9d578384fd5b611aa98a838b016117ca565b90965094506060890135915080821115611ac1578384fd5b50611ace89828a016117ca565b979a9699509497509295939492505050565b600080600060408486031215611af4578283fd5b83359250602084013567ffffffffffffffff811115611b11578283fd5b611b1d868287016117ca565b9497909650939450505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452815b81811015611b7957602081850181015186830182015201611b5d565b81811115611b8a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090611bee90830185611b54565b82810360a0840152611c008185611b54565b9998505050505050505050565b6001600160a01b0386811682528516602082015260408101849052608060608201819052600090611c419083018486611b2a565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038616825284602083015260606040830152611c8d606083018486611b2a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611cd85783516001600160a01b031683529284019291840191600101611cb3565b50909695505050505050565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610c736020830184611b54565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f4552433737373a206275726e2066726f6d207a65726f20616464726573730000604082015260600190565b60208082526024908201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260408201526330ba37b960e11b606082015260800190565b60208082526021908201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6040820152603960f91b606082015260800190565b6020808252818101527f4552433737373a207472616e7366657220746f207a65726f2061646472657373604082015260600190565b6020808252601c908201527f4552433737373a206d696e7420746f207a65726f206164647265737300000000604082015260600190565b6020808252604d908201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460408201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60608201526c1ad95b9cd49958da5c1a595b9d609a1b608082015260a00190565b6020808252601c908201527f53696465546f6b656e3a20494e56414c49445f5349474e415455524500000000604082015260600190565b60208082526023908201527f53696465546f6b656e3a2043616c6c6572206973206e6f7420746865206d696e6040820152623a32b960e91b606082015260800190565b60208082526012908201527114da5919551bdad95b8e881156141254915160721b604082015260600190565b6020808252601e908201527f4552433737373a2073656e642066726f6d207a65726f20616464726573730000604082015260600190565b6020808252601c908201527f4552433737373a2073656e6420746f207a65726f206164647265737300000000604082015260600190565b60208082526022908201527f4552433737373a207472616e736665722066726f6d207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526021908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f6040820152603960f91b606082015260800190565b6020808252601f908201527f4552433737373a20617070726f766520746f207a65726f206164647265737300604082015260600190565b6000848252606060208301526121166060830185611b54565b8281036040840152611c8d8185611b54565b60ff91909116815260200190565b6001600160a01b038116811461214b57600080fd5b5056fe4552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a206275726e20616d6f756e7420657863656564732062616c616e6365a2646970667358221220e96305596548c1ccf5a73d7bede36fbfaeee3f672cbf14157179325f27c57bf764736f6c63430007060033a26469706673582212204cc330cf5079dbaee9f34fb1607540a3d5891d5eeb955ff8beaa47811a8c189964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "primary()": {
        "returns": {
          "_0": "the address of the primary."
        }
      },
      "transferPrimary(address)": {
        "details": "Transfers contract to a new primary.",
        "params": {
          "recipient": "The address of new primary."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11014,
        "contract": "contracts/SideTokenFactory/SideTokenFactory.sol:SideTokenFactory",
        "label": "_primary",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}