{
  "address": "0x3C4EB144a3108162C1700398037d82ac1Cc111b5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "AllowedTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_smallAmountConfirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mediumAmountConfirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_largeAmountConfirmations",
          "type": "uint256"
        }
      ],
      "name": "ConfirmationsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimaryTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        }
      ],
      "name": "SetToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_typeDescription",
          "type": "string"
        }
      ],
      "name": "TokenTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daily",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "largeAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IAllowTokens.Limits",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "name": "TypeLimitsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastDay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_spentToday",
          "type": "uint256"
        }
      ],
      "name": "UpdateTokensTransfered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TYPES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "__Secondary_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daily",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "largeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.Limits",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "name": "addTokenType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spentToday",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "calcMaxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "smallAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mediumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "largeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getInfoAndLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "typeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spentToday",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDay",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.TokenInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daily",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "largeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.Limits",
          "name": "limit",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTypeDescriptions",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTypeDescriptionsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTypesLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daily",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "largeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.Limits[]",
          "name": "limits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_smallAmountConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mediumAmountConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_largeAmountConfirmations",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "min",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "max",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "daily",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediumAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "largeAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAllowTokens.Limits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAllowTokens.TypeInfo[]",
          "name": "typesInfo",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "largeAmountConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediumAmountConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_smallAmountConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mediumAmountConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_largeAmountConfirmations",
          "type": "uint256"
        }
      ],
      "name": "setConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "typeId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.TokensAndType[]",
          "name": "tokensAndTypes",
          "type": "tuple[]"
        }
      ],
      "name": "setMultipleTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daily",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediumAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "largeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.Limits",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "name": "setTypeLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smallAmountConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "typeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spentToday",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDay",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAllowTokens.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferPrimary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "typeDescriptions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "typeLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daily",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mediumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "largeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a1fdbf3de3d19ac51b207695e97db88cde96428a3285bc687231370c33c5cc2",
  "receipt": {
    "to": null,
    "from": "0xa554d96413FF72E93437C4072438302C38350EE3",
    "contractAddress": "0x3C4EB144a3108162C1700398037d82ac1Cc111b5",
    "transactionIndex": 1,
    "gasUsed": "2056299",
    "logsBloom": "0x
    "blockHash": "0xb416a5f09edb6ab533038eab7ac21185a6881f9fafadfbf51dcce7bcc3ba1f6d",
    "transactionHash": "0x5a1fdbf3de3d19ac51b207695e97db88cde96428a3285bc687231370c33c5cc2",
    "logs": [],
    "blockNumber": 7641051,
    "cumulativeGasUsed": "2077299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "caeb40de80c8668828546c6b3fb7fad2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"AllowedTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_smallAmountConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mediumAmountConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_largeAmountConfirmations\",\"type\":\"uint256\"}],\"name\":\"ConfirmationsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"}],\"name\":\"SetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_typeDescription\",\"type\":\"string\"}],\"name\":\"TokenTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IAllowTokens.Limits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"name\":\"TypeLimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_spentToday\",\"type\":\"uint256\"}],\"name\":\"UpdateTokensTransfered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TYPES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"__Secondary_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.Limits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"name\":\"addTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentToday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calcMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"smallAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getInfoAndLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentToday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDay\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.Limits\",\"name\":\"limit\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypeDescriptions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypeDescriptionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypesLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.Limits[]\",\"name\":\"limits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_smallAmountConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mediumAmountConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_largeAmountConfirmations\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.Limits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct IAllowTokens.TypeInfo[]\",\"name\":\"typesInfo\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largeAmountConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediumAmountConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_smallAmountConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mediumAmountConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_largeAmountConfirmations\",\"type\":\"uint256\"}],\"name\":\"setConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.TokensAndType[]\",\"name\":\"tokensAndTypes\",\"type\":\"tuple[]\"}],\"name\":\"setMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.Limits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"name\":\"setTypeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smallAmountConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentToday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDay\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowTokens.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"typeDescriptions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"typeLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__Secondary_init(address)\":{\"details\":\"Sets the primary account to the one that is creating the Secondary contract.\"},\"initialize(address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"primary()\":{\"returns\":{\"_0\":\"the address of the primary.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPrimary(address)\":{\"details\":\"Transfers contract to a new primary.\",\"params\":{\"recipient\":\"The address of new primary.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AllowTokens/AllowTokens.sol\":\"AllowTokens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AllowTokens/AllowTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../zeppelin/math/SafeMath.sol\\\";\\n// Upgradables\\nimport \\\"../zeppelin/upgradable/Initializable.sol\\\";\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableOwnable.sol\\\";\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableSecondary.sol\\\";\\n\\nimport \\\"../interface/IAllowTokens.sol\\\";\\n\\ncontract AllowTokens is Initializable, UpgradableOwnable, UpgradableSecondary, IAllowTokens {\\n\\tusing SafeMath for uint256;\\n\\n\\taddress constant private NULL_ADDRESS = address(0);\\n\\tuint256 constant public MAX_TYPES = 250;\\n\\tmapping (address => TokenInfo) public allowedTokens;\\n\\tmapping (uint256 => Limits) public typeLimits;\\n\\tuint256 public smallAmountConfirmations;\\n\\tuint256 public mediumAmountConfirmations;\\n\\tuint256 public largeAmountConfirmations;\\n\\tstring[] public typeDescriptions;\\n\\n\\tevent SetToken(address indexed _tokenAddress, uint256 _typeId);\\n\\tevent AllowedTokenRemoved(address indexed _tokenAddress);\\n\\tevent TokenTypeAdded(uint256 indexed _typeId, string _typeDescription);\\n\\tevent TypeLimitsChanged(uint256 indexed _typeId, Limits limits);\\n\\tevent UpdateTokensTransfered(address indexed _tokenAddress, uint256 _lastDay, uint256 _spentToday);\\n\\tevent ConfirmationsChanged(uint256 _smallAmountConfirmations, uint256 _mediumAmountConfirmations, uint256 _largeAmountConfirmations);\\n\\n\\tmodifier notNull(address _address) {\\n\\t\\trequire(_address != NULL_ADDRESS, \\\"AllowTokens: Null Address\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress _manager,\\n\\t\\taddress _primary,\\n\\t\\tuint256 _smallAmountConfirmations,\\n\\t\\tuint256 _mediumAmountConfirmations,\\n\\t\\tuint256 _largeAmountConfirmations,\\n\\t\\tTypeInfo[] memory typesInfo) public initializer {\\n\\t\\tUpgradableOwnable.initialize(_manager);\\n\\t\\tUpgradableSecondary.__Secondary_init(_primary);\\n\\t\\t_setConfirmations(_smallAmountConfirmations, _mediumAmountConfirmations, _largeAmountConfirmations);\\n\\t\\tfor(uint i = 0; i < typesInfo.length; i = i + 1) {\\n\\t\\t\\t_addTokenType(typesInfo[i].description, typesInfo[i].limits);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction version() override external pure returns (string memory) {\\n\\t\\treturn \\\"v1\\\";\\n\\t}\\n\\n\\tfunction tokenInfo(address tokenAddress) public view returns(TokenInfo memory) {\\n\\t\\treturn allowedTokens[tokenAddress];\\n\\t}\\n\\n\\tfunction setTokenInfoByTokenAddress(address tokenAddress, TokenInfo memory info) internal {\\n\\t\\trequire(isOwner() || _msgSender() == primary(), \\\"AllowTokens: unauthorized sender\\\");\\n\\t\\tallowedTokens[tokenAddress] = info;\\n\\t}\\n\\n\\tfunction getInfoAndLimits(\\n\\t\\taddress tokenAddress\\n\\t) public view override returns (\\n\\t\\tTokenInfo memory info,\\n\\t\\tLimits memory limit\\n\\t) {\\n\\t\\tinfo = tokenInfo(tokenAddress);\\n\\t\\tlimit = typeLimits[info.typeId];\\n\\t\\treturn (info, limit);\\n\\t}\\n\\n\\tfunction calcMaxWithdraw(address token) public view override returns (uint256 maxWithdraw) {\\n\\t\\t(TokenInfo memory info, Limits memory limits) = getInfoAndLimits(token);\\n\\t\\treturn _calcMaxWithdraw(info, limits);\\n\\t}\\n\\n\\tfunction _calcMaxWithdraw(TokenInfo memory info, Limits memory limits) private view returns (uint256 maxWithdraw) {\\n\\t\\t// solium-disable-next-line security/no-block-members\\n\\t\\tif (block.timestamp > info.lastDay + 24 hours) { // solhint-disable-line not-rely-on-time\\n\\t\\t\\tinfo.spentToday = 0;\\n\\t\\t}\\n\\t\\tif (limits.daily <= info.spentToday) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tmaxWithdraw = limits.daily - info.spentToday;\\n\\t\\tif (maxWithdraw > limits.max) {\\n\\t\\t\\tmaxWithdraw = limits.max;\\n\\t\\t}\\n\\t\\treturn maxWithdraw;\\n\\t}\\n\\n\\tfunction updateTokenTransfer(address token, uint256 amount) override external onlyPrimary {\\n\\t\\t(TokenInfo memory info, Limits memory limit) = getInfoAndLimits(token);\\n\\t\\trequire(isTokenAllowed(token), \\\"AllowTokens: Not whitelisted\\\");\\n\\t\\trequire(amount >= limit.min, \\\"AllowTokens: Lower than limit\\\");\\n\\n\\t\\t// solium-disable-next-line security/no-block-members\\n\\t\\tif (block.timestamp > info.lastDay + 24 hours) { // solhint-disable-line not-rely-on-time\\n\\t\\t\\t// solium-disable-next-line security/no-block-members\\n\\t\\t\\tinfo.lastDay = block.timestamp; // solhint-disable-line not-rely-on-time\\n\\t\\t\\tinfo.spentToday = 0;\\n\\t\\t}\\n\\t\\tuint maxWithdraw = _calcMaxWithdraw(info, limit);\\n\\t\\trequire(amount <= maxWithdraw, \\\"AllowTokens: Exceeded limit\\\");\\n\\t\\tinfo.spentToday = info.spentToday.add(amount);\\n\\t\\tsetTokenInfoByTokenAddress(token, info);\\n\\n\\t\\temit UpdateTokensTransfered(token, info.lastDay, info.spentToday);\\n\\t}\\n\\n\\tfunction _addTokenType(string memory description, Limits memory limits) private returns(uint256 len) {\\n\\t\\trequire(bytes(description).length > 0, \\\"AllowTokens: Empty description\\\");\\n\\t\\tlen = typeDescriptions.length;\\n\\t\\trequire(len + 1 <= MAX_TYPES, \\\"AllowTokens: Reached MAX_TYPES\\\");\\n\\t\\ttypeDescriptions.push(description);\\n\\t\\t_setTypeLimits(len, limits);\\n\\t\\temit TokenTypeAdded(len, description);\\n\\t\\treturn len;\\n\\t}\\n\\n\\tfunction addTokenType(string calldata description, Limits calldata limits) external onlyOwner returns(uint256 len) {\\n\\t\\treturn _addTokenType(description, limits);\\n\\t}\\n\\n\\tfunction _setTypeLimits(uint256 typeId, Limits memory limits) private {\\n\\t\\trequire(typeId < typeDescriptions.length, \\\"AllowTokens: bigger than typeDescriptions\\\");\\n\\t\\trequire(limits.max >= limits.min, \\\"AllowTokens: maxTokens smaller than minTokens\\\");\\n\\t\\trequire(limits.daily >= limits.max, \\\"AllowTokens: dailyLimit smaller than maxTokens\\\");\\n\\t\\trequire(limits.mediumAmount > limits.min, \\\"AllowTokens: limits.mediumAmount smaller than min\\\");\\n\\t\\trequire(limits.largeAmount > limits.mediumAmount, \\\"AllowTokens: limits.largeAmount smaller than mediumAmount\\\");\\n\\t\\ttypeLimits[typeId] = limits;\\n\\t\\temit TypeLimitsChanged(typeId, limits);\\n\\t}\\n\\n\\tfunction setTypeLimits(uint256 typeId, Limits memory limits) public onlyOwner {\\n\\t\\t_setTypeLimits(typeId, limits);\\n\\t}\\n\\n\\tfunction getTypesLimits() external view override returns(Limits[] memory limits) {\\n\\t\\tlimits = new Limits[](typeDescriptions.length);\\n\\t\\tfor (uint256 i = 0; i < typeDescriptions.length; i++) {\\n\\t\\t\\tlimits[i] = typeLimits[i];\\n\\t\\t}\\n\\t\\treturn limits;\\n\\t}\\n\\n\\tfunction getTypeDescriptionsLength() external view override returns(uint256) {\\n\\t\\treturn typeDescriptions.length;\\n\\t}\\n\\n\\tfunction getTypeDescriptions() external view override returns(string[] memory descriptions) {\\n\\t\\tdescriptions = new string[](typeDescriptions.length);\\n\\t\\tfor (uint256 i = 0; i < typeDescriptions.length; i++) {\\n\\t\\t\\tdescriptions[i] = typeDescriptions[i];\\n\\t\\t}\\n\\t\\treturn descriptions;\\n\\t}\\n\\n\\tfunction isTokenAllowed(address token) public view notNull(token) override returns (bool) {\\n\\t\\treturn tokenInfo(token).allowed;\\n\\t}\\n\\n\\tfunction setToken(address token, uint256 typeId) override public notNull(token) {\\n\\t\\trequire(isOwner() || _msgSender() == primary(), \\\"AllowTokens: unauthorized sender\\\");\\n\\t\\trequire(typeId < typeDescriptions.length, \\\"AllowTokens: typeId does not exist\\\");\\n\\t\\tTokenInfo memory info = tokenInfo(token);\\n\\t\\tinfo.allowed = true;\\n\\t\\tinfo.typeId = typeId;\\n\\t\\tsetTokenInfoByTokenAddress(token, info);\\n\\t\\temit SetToken(token, typeId);\\n\\t}\\n\\n\\tfunction setMultipleTokens(TokensAndType[] calldata tokensAndTypes) external onlyOwner {\\n\\t\\trequire(tokensAndTypes.length > 0, \\\"AllowTokens: empty tokens\\\");\\n\\t\\tfor(uint256 i = 0; i < tokensAndTypes.length; i = i + 1) {\\n\\t\\t\\tsetToken(tokensAndTypes[i].token, tokensAndTypes[i].typeId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction removeAllowedToken(address token) external notNull(token) onlyOwner {\\n\\t\\tTokenInfo memory info = tokenInfo(token);\\n\\t\\trequire(info.allowed, \\\"AllowTokens: Not Allowed\\\");\\n\\t\\tinfo.allowed = false;\\n\\t\\tsetTokenInfoByTokenAddress(token, info);\\n\\t\\temit AllowedTokenRemoved(token);\\n\\t}\\n\\n\\tfunction setConfirmations(\\n\\t\\tuint256 _smallAmountConfirmations,\\n\\t\\tuint256 _mediumAmountConfirmations,\\n\\t\\tuint256 _largeAmountConfirmations) external onlyOwner {\\n\\t\\t_setConfirmations(_smallAmountConfirmations, _mediumAmountConfirmations, _largeAmountConfirmations);\\n\\t}\\n\\n\\tfunction _setConfirmations(\\n\\t\\tuint256 _smallAmountConfirmations,\\n\\t\\tuint256 _mediumAmountConfirmations,\\n\\t\\tuint256 _largeAmountConfirmations) private {\\n\\t\\trequire(_smallAmountConfirmations <= _mediumAmountConfirmations, \\\"AllowTokens: small bigger than medium confirmations\\\");\\n\\t\\trequire(_mediumAmountConfirmations <= _largeAmountConfirmations, \\\"AllowTokens: medium bigger than large confirmations\\\");\\n\\t\\tsmallAmountConfirmations = _smallAmountConfirmations;\\n\\t\\tmediumAmountConfirmations = _mediumAmountConfirmations;\\n\\t\\tlargeAmountConfirmations = _largeAmountConfirmations;\\n\\t\\temit ConfirmationsChanged(_smallAmountConfirmations, _mediumAmountConfirmations, _largeAmountConfirmations);\\n\\t}\\n\\n\\tfunction getConfirmations() external view override\\n\\t\\treturns (\\n\\t\\tuint256 smallAmount,\\n\\t\\tuint256 mediumAmount,\\n\\t\\tuint256 largeAmount\\n\\t) {\\n\\t\\treturn (smallAmountConfirmations, mediumAmountConfirmations, largeAmountConfirmations);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x1a797098e5b85585c7386202b0901d86d08dc3d6224d3bae3e650a257a2fcea8\",\"license\":\"MIT\"},\"contracts/interface/IAllowTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\ninterface IAllowTokens {\\n\\n\\tstruct Limits {\\n\\t\\tuint256 min;\\n\\t\\tuint256 max;\\n\\t\\tuint256 daily;\\n\\t\\tuint256 mediumAmount;\\n\\t\\tuint256 largeAmount;\\n\\t}\\n\\n\\tstruct TokenInfo {\\n\\t\\tbool allowed;\\n\\t\\tuint256 typeId;\\n\\t\\tuint256 spentToday;\\n\\t\\tuint256 lastDay;\\n\\t}\\n\\n\\tstruct TypeInfo {\\n\\t\\tstring description;\\n\\t\\tLimits limits;\\n\\t}\\n\\n\\tstruct TokensAndType {\\n\\t\\taddress token;\\n\\t\\tuint256 typeId;\\n\\t}\\n\\n\\tfunction version() external pure returns (string memory);\\n\\n\\tfunction getInfoAndLimits(address token) external view returns (TokenInfo memory info, Limits memory limit);\\n\\n\\tfunction calcMaxWithdraw(address token) external view returns (uint256 maxWithdraw);\\n\\n\\tfunction getTypesLimits() external view returns(Limits[] memory limits);\\n\\n\\tfunction getTypeDescriptionsLength() external view returns(uint256);\\n\\n\\tfunction getTypeDescriptions() external view returns(string[] memory descriptions);\\n\\n\\tfunction setToken(address token, uint256 typeId) external;\\n\\n\\tfunction getConfirmations() external view returns (uint256 smallAmount, uint256 mediumAmount, uint256 largeAmount);\\n\\n\\tfunction isTokenAllowed(address token) external view returns (bool);\\n\\n\\tfunction updateTokenTransfer(address token, uint256 amount) external;\\n}\",\"keccak256\":\"0x7a68f098e5efaad2d9d84314b2df76897fa9dbbe65c64d629b02b1dc4d9d36b5\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6f3f274a2270bfe073339370edfa2485e2d515a2656039937f6b972fae96d297\",\"license\":\"MIT\"},\"contracts/zeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x8038a6eca31e013b0c7f248c7a4eb5846ab0d52bb3f7636fafcf00b075643afe\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || !initialized, \\\"Contract instance is already initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x14063a689bff5eecf0f36cb519feb575f60349ecf0d425ead5b931b77dd599d4\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradableOwnable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdf439a167ae82e7e3dd241ea0c831a1bb0329432ceb4fa889778d1f2d196ce00\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableSecondary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\n\\n/**\\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\\n */\\ncontract UpgradableSecondary is Initializable, Context {\\n    address private _primary;\\n\\n    /**\\n     * @dev Emitted when the primary contract changes.\\n     */\\n    event PrimaryTransferred(\\n        address recipient\\n    );\\n\\n    /**\\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\\n     */\\n    function __Secondary_init(address sender) public initializer {\\n        _primary = sender;\\n        emit PrimaryTransferred(_primary);\\n    }\\n\\n    /**\\n     * @dev Reverts if called from any account other than the primary.\\n     */\\n    modifier onlyPrimary() {\\n        require(_msgSender() == _primary, \\\"Secondary: caller is not the primary account\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return the address of the primary.\\n     */\\n    function primary() public view returns (address) {\\n        return _primary;\\n    }\\n\\n    /**\\n     * @dev Transfers contract to a new primary.\\n     * @param recipient The address of new primary.\\n     */\\n    function transferPrimary(address recipient) public onlyPrimary {\\n        require(recipient != address(0), \\\"Secondary: new primary is the zero address\\\");\\n        _primary = recipient;\\n        emit PrimaryTransferred(recipient);\\n    }\\n\\n}\",\"keccak256\":\"0x3dc61c8d0ab62fff2c3d1c56a5e2dbb20be7d0a11947463d86572afec5a1fe27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061243c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806390469a9d1161010f578063c6dbdf61116100a2578063e744092e11610071578063e744092e14610488578063f2fde38b146104e3578063f5dab711146104f6578063f9eaee0d1461051657600080fd5b8063c6dbdf6114610449578063d4164b5d1461045a578063d7516faa1461046d578063e4f89ae41461047557600080fd5b8063b348a29f116100de578063b348a29f146103ec578063bb698dad146103ff578063c361ce8314610412578063c4d66de81461043657600080fd5b806390469a9d1461039c5780639d27d226146103af578063a81a8b1f146103d0578063adfeb5eb146103d957600080fd5b8063601ad4c9116101875780638c34bc55116101565780638c34bc551461033c5780638da5cb5b1461034f5780638de52dd7146103745780638f32d59b1461037d57600080fd5b8063601ad4c914610305578063715018a61461031857806378bf2b53146103205780637d496be91461033357600080fd5b8063250540cf116101c3578063250540cf146102aa5780633777804f146102bd57806353a8b574146102d257806354fd4d50146102e757600080fd5b806307fc9eb9146101f55780630a9763d71461025f5780631c21a08f146102755780632348238c14610295575b600080fd5b610232610203366004611bad565b603660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61026760fa81565b604051908152602001610256565b610288610283366004611bad565b610529565b6040516102569190611c13565b6102a86102a3366004611c42565b6105d5565b005b6102676102b8366004611c42565b6106ce565b6102c56106f2565b6040516102569190611c5d565b6102da610807565b6040516102569190611cd6565b604080518082019091526002815261763160f01b6020820152610288565b6102a8610313366004611d38565b61093e565b6102a8610978565b6102a861032e366004611d64565b6109ec565b61026760395481565b6102a861034a366004611d64565b610b49565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610256565b61026760385481565b6033546001600160a01b031633145b6040519015158152602001610256565b6102a86103aa366004611c42565b610d27565b6103c26103bd366004611c42565b610e1b565b604051610256929190611d8e565b61026760375481565b6102a86103e7366004611c42565b610ee0565b6102a86103fa366004611eca565b610f9e565b61026761040d366004611ef7565b610fd2565b60375460385460395460408051938452602084019290925290820152606001610256565b6102a8610444366004611c42565b611057565b6034546001600160a01b031661035c565b6102a8610468366004611f86565b61110c565b603a54610267565b6102a8610483366004612164565b6111ff565b6104c1610496366004611c42565b603560205260009081526040902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610256565b6102a86104f1366004611c42565b6112df565b610509610504366004611c42565b611315565b60405161025691906121d9565b61038c610524366004611c42565b611395565b603a818154811061053957600080fd5b90600052602060002001600091509050805461055490612206565b80601f016020809104026020016040519081016040528092919081815260200182805461058090612206565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b6034546001600160a01b0316336001600160a01b0316146106115760405162461bcd60e51b81526004016106089061223b565b60405180910390fd5b6001600160a01b03811661067a5760405162461bcd60e51b815260206004820152602a60248201527f5365636f6e646172793a206e6577207072696d61727920697320746865207a65604482015269726f206164647265737360b01b6064820152608401610608565b603480546001600160a01b0319166001600160a01b0383169081179091556040519081527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99060200160405180910390a150565b60008060006106dc84610e1b565b915091506106ea82826113d1565b949350505050565b603a5460609067ffffffffffffffff81111561071057610710611dea565b60405190808252806020026020018201604052801561077357816020015b6107606040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161072e5790505b50905060005b603a5481101561080357603660008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250508282815181106107e5576107e5612287565b602002602001018190525080806107fb906122b3565b915050610779565b5090565b603a5460609067ffffffffffffffff81111561082557610825611dea565b60405190808252806020026020018201604052801561085857816020015b60608152602001906001900390816108435790505b50905060005b603a5481101561080357603a818154811061087b5761087b612287565b90600052602060002001805461089090612206565b80601f01602080910402602001604051908101604052809291908181526020018280546108bc90612206565b80156109095780601f106108de57610100808354040283529160200191610909565b820191906000526020600020905b8154815290600101906020018083116108ec57829003601f168201915b505050505082828151811061092057610920612287565b60200260200101819052508080610936906122b3565b91505061085e565b6033546001600160a01b031633146109685760405162461bcd60e51b8152600401610608906122ce565b61097383838361143b565b505050565b6033546001600160a01b031633146109a25760405162461bcd60e51b8152600401610608906122ce565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b816001600160a01b038116610a135760405162461bcd60e51b815260040161060890612303565b6033546001600160a01b0316331480610a3657506034546001600160a01b031633145b610a825760405162461bcd60e51b815260206004820181905260248201527f416c6c6f77546f6b656e733a20756e617574686f72697a65642073656e6465726044820152606401610608565b603a548210610ade5760405162461bcd60e51b815260206004820152602260248201527f416c6c6f77546f6b656e733a2074797065496420646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610608565b6000610ae984611315565b60018152602081018490529050610b008482611568565b836001600160a01b03167f720764556647dd167f4229d6a4255ac86018e302a50fc29dd67a70edb7b314d084604051610b3b91815260200190565b60405180910390a250505050565b6034546001600160a01b0316336001600160a01b031614610b7c5760405162461bcd60e51b81526004016106089061223b565b600080610b8884610e1b565b91509150610b9584611395565b610be15760405162461bcd60e51b815260206004820152601c60248201527f416c6c6f77546f6b656e733a204e6f742077686974656c6973746564000000006044820152606401610608565b8051831015610c325760405162461bcd60e51b815260206004820152601d60248201527f416c6c6f77546f6b656e733a204c6f776572207468616e206c696d69740000006044820152606401610608565b6060820151610c44906201518061233a565b421115610c5957426060830152600060408301525b6000610c6583836113d1565b905080841115610cb75760405162461bcd60e51b815260206004820152601b60248201527f416c6c6f77546f6b656e733a204578636565646564206c696d697400000000006044820152606401610608565b6040830151610cc69085611623565b6040840152610cd58584611568565b6060830151604080850151815192835260208301526001600160a01b038716917f84480cc6a063ffd72c3eddf21e3ffd30db3e2b8e386ec3abf09c98ee9e0e8d34910160405180910390a25050505050565b806001600160a01b038116610d4e5760405162461bcd60e51b815260040161060890612303565b6033546001600160a01b03163314610d785760405162461bcd60e51b8152600401610608906122ce565b6000610d8383611315565b8051909150610dd45760405162461bcd60e51b815260206004820152601860248201527f416c6c6f77546f6b656e733a204e6f7420416c6c6f77656400000000000000006044820152606401610608565b60008152610de28382611568565b6040516001600160a01b038416907fbf996b4fd74f0c7159bb017b1db415b0d9a6f13129f46d0b93309d170b78df3190600090a2505050565b610e4860405180608001604052806000151581526020016000815260200160008152602001600081525090565b610e7a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610e8383611315565b915060366000836020015181526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050915091565b600054610100900460ff1680610ef9575060005460ff16155b610f155760405162461bcd60e51b815260040161060890612352565b600054610100900460ff16158015610f37576000805461ffff19166101011790555b603480546001600160a01b0319166001600160a01b0384169081179091556040519081527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99060200160405180910390a18015610f9a576000805461ff00191690555b5050565b6033546001600160a01b03163314610fc85760405162461bcd60e51b8152600401610608906122ce565b610f9a8282611682565b6033546000906001600160a01b03163314610fff5760405162461bcd60e51b8152600401610608906122ce565b61104d84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611048925050503685900385018561239a565b611923565b90505b9392505050565b600054610100900460ff1680611070575060005460ff16155b61108c5760405162461bcd60e51b815260040161060890612352565b600054610100900460ff161580156110ae576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610f9a576000805461ff00191690555050565b600054610100900460ff1680611125575060005460ff16155b6111415760405162461bcd60e51b815260040161060890612352565b600054610100900460ff16158015611163576000805461ffff19166101011790555b61116c87611057565b61117586610ee0565b61118085858561143b565b60005b82518110156111e3576111d08382815181106111a1576111a1612287565b6020026020010151600001518483815181106111bf576111bf612287565b602002602001015160200151611923565b506111dc81600161233a565b9050611183565b5080156111f6576000805461ff00191690555b50505050505050565b6033546001600160a01b031633146112295760405162461bcd60e51b8152600401610608906122ce565b806112765760405162461bcd60e51b815260206004820152601960248201527f416c6c6f77546f6b656e733a20656d70747920746f6b656e73000000000000006044820152606401610608565b60005b81811015610973576112cd83838381811061129657611296612287565b6112ac9260206040909202019081019150611c42565b8484848181106112be576112be612287565b905060400201602001356109ec565b6112d881600161233a565b9050611279565b6033546001600160a01b031633146113095760405162461bcd60e51b8152600401610608906122ce565b61131281611a60565b50565b61134260405180608001604052806000151581526020016000815260200160008152602001600081525090565b506001600160a01b03166000908152603560209081526040918290208251608081018452815460ff1615158152600182015492810192909252600281015492820192909252600390910154606082015290565b6000816001600160a01b0381166113be5760405162461bcd60e51b815260040161060890612303565b6113c783611315565b5191505b50919050565b60008260600151620151806113e6919061233a565b4211156113f557600060408401525b826040015182604001511161140c57506000611435565b8260400151826040015161142091906123b6565b90508160200151811115611435575060208101515b92915050565b818311156114a75760405162461bcd60e51b815260206004820152603360248201527f416c6c6f77546f6b656e733a20736d616c6c20626967676572207468616e206d604482015272656469756d20636f6e6669726d6174696f6e7360681b6064820152608401610608565b808211156115135760405162461bcd60e51b815260206004820152603360248201527f416c6c6f77546f6b656e733a206d656469756d20626967676572207468616e206044820152726c6172676520636f6e6669726d6174696f6e7360681b6064820152608401610608565b60378390556038829055603981905560408051848152602081018490529081018290527ffcc55d4aea72e6d2d439843942c59b3141c952375a217e381f6a40e0b5ac42199060600160405180910390a1505050565b6033546001600160a01b031633148061158b57506034546001600160a01b031633145b6115d75760405162461bcd60e51b815260206004820181905260248201527f416c6c6f77546f6b656e733a20756e617574686f72697a65642073656e6465726044820152606401610608565b6001600160a01b03919091166000908152603560209081526040918290208351815460ff1916901515178155908301516001820155908201516002820155606090910151600390910155565b600080611630838561233a565b9050838110156110505760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610608565b603a5482106116e55760405162461bcd60e51b815260206004820152602960248201527f416c6c6f77546f6b656e733a20626967676572207468616e20747970654465736044820152686372697074696f6e7360b81b6064820152608401610608565b8051602082015110156117505760405162461bcd60e51b815260206004820152602d60248201527f416c6c6f77546f6b656e733a206d6178546f6b656e7320736d616c6c6572207460448201526c68616e206d696e546f6b656e7360981b6064820152608401610608565b8060200151816040015110156117bf5760405162461bcd60e51b815260206004820152602e60248201527f416c6c6f77546f6b656e733a206461696c794c696d697420736d616c6c65722060448201526d7468616e206d6178546f6b656e7360901b6064820152608401610608565b805160608201511161182d5760405162461bcd60e51b815260206004820152603160248201527f416c6c6f77546f6b656e733a206c696d6974732e6d656469756d416d6f756e746044820152701039b6b0b63632b9103a3430b71036b4b760791b6064820152608401610608565b80606001518160800151116118aa5760405162461bcd60e51b815260206004820152603960248201527f416c6c6f77546f6b656e733a206c696d6974732e6c61726765416d6f756e742060448201527f736d616c6c6572207468616e206d656469756d416d6f756e74000000000000006064820152608401610608565b600082815260366020908152604091829020835181559083015160018201558183015160028201556060830151600382015560808301516004909101555182907f1d2b256bb06ebc298b1980410a5e3b1e9bc4be642e8f26a58dc8a97d7fe2bbbb906119179084906123cd565b60405180910390a25050565b6000808351116119755760405162461bcd60e51b815260206004820152601e60248201527f416c6c6f77546f6b656e733a20456d707479206465736372697074696f6e00006044820152606401610608565b50603a5460fa61198682600161233a565b11156119d45760405162461bcd60e51b815260206004820152601e60248201527f416c6c6f77546f6b656e733a2052656163686564204d41585f545950455300006044820152606401610608565b603a80546001810182556000919091528351611a17917fa2999d817b6757290b50e8ecf3fa939673403dd35c97de392fdb343b4015ce9e01906020860190611b1d565b50611a228183611682565b807fb30844b47136a66c1307afd352145423a1c237692b6ba474578f06f4614b35a084604051611a529190611c13565b60405180910390a292915050565b6001600160a01b038116611ac15760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604482015261737360f01b6064820152608401610608565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b828054611b2990612206565b90600052602060002090601f016020900481019282611b4b5760008555611b91565b82601f10611b6457805160ff1916838001178555611b91565b82800160010185558215611b91579182015b82811115611b91578251825591602001919060010190611b76565b506108039291505b808211156108035760008155600101611b99565b600060208284031215611bbf57600080fd5b5035919050565b6000815180845260005b81811015611bec57602081850181015186830182015201611bd0565b81811115611bfe576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110506020830184611bc6565b80356001600160a01b0381168114611c3d57600080fd5b919050565b600060208284031215611c5457600080fd5b61105082611c26565b6020808252825182820181905260009190848201906040850190845b81811015611cca57611cb783855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b9284019260a09290920191600101611c79565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611d2b57603f19888603018452611d19858351611bc6565b94509285019290850190600101611cfd565b5092979650505050505050565b600080600060608486031215611d4d57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611d7757600080fd5b611d8083611c26565b946020939093013593505050565b82511515815260208084015181830152604080850151818401526060808601518185015284516080808601919091529285015160a08501529084015160c084015283015160e08301528201516101008201526101208101611050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611e2357611e23611dea565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e5257611e52611dea565b604052919050565b600060a08284031215611e6c57600080fd5b60405160a0810181811067ffffffffffffffff82111715611e8f57611e8f611dea565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60008060c08385031215611edd57600080fd5b82359150611eee8460208501611e5a565b90509250929050565b600080600083850360c0811215611f0d57600080fd5b843567ffffffffffffffff80821115611f2557600080fd5b818701915087601f830112611f3957600080fd5b813581811115611f4857600080fd5b886020828501011115611f5a57600080fd5b60209290920195509093505060a0601f1982011215611f7857600080fd5b506020840190509250925092565b60008060008060008060c08789031215611f9f57600080fd5b611fa887611c26565b9550611fb660208801611c26565b945060408701359350606087013592506080870135915067ffffffffffffffff60a08801351115611fe657600080fd5b60a0870135870188601f820112611ffc57600080fd5b67ffffffffffffffff8135111561201557612015611dea565b6120256020823560051b01611e29565b81358082526020808301929160051b8401018b101561204357600080fd5b602083015b6020843560051b8501018110156121535767ffffffffffffffff8135111561206f57600080fd5b8035840160c0818e03601f1901121561208757600080fd5b61208f611e00565b67ffffffffffffffff602083013511156120a857600080fd5b8d603f6020840135840101126120bd57600080fd5b6020808301358301013567ffffffffffffffff8111156120df576120df611dea565b6120f2601f8201601f1916602001611e29565b8181528f604083602087013587010101111561210d57600080fd5b8160406020860135860101602083013760006020838301015280835250506121388e60408401611e5a565b60208201528085525050602083019250602081019050612048565b508093505050509295509295509295565b6000806020838503121561217757600080fd5b823567ffffffffffffffff8082111561218f57600080fd5b818501915085601f8301126121a357600080fd5b8135818111156121b257600080fd5b8660208260061b85010111156121c757600080fd5b60209290920196919550909350505050565b81511515815260208083015190820152604080830151908201526060808301519082015260808101611435565b600181811c9082168061221a57607f821691505b602082108114156113cb57634e487b7160e01b600052602260045260246000fd5b6020808252602c908201527f5365636f6e646172793a2063616c6c6572206973206e6f74207468652070726960408201526b1b585c9e481858d8dbdd5b9d60a21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156122c7576122c761229d565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526019908201527f416c6c6f77546f6b656e733a204e756c6c204164647265737300000000000000604082015260600190565b6000821982111561234d5761234d61229d565b500190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b600060a082840312156123ac57600080fd5b6110508383611e5a565b6000828210156123c8576123c861229d565b500390565b60a0810161143582848051825260208101516020830152604081015160408301526060810151606083015260808101516080830152505056fea2646970667358221220523a51d2401e28d050fe1fdfceb55f1ad54b63d70c677f91baa2f885a48ea79b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806390469a9d1161010f578063c6dbdf61116100a2578063e744092e11610071578063e744092e14610488578063f2fde38b146104e3578063f5dab711146104f6578063f9eaee0d1461051657600080fd5b8063c6dbdf6114610449578063d4164b5d1461045a578063d7516faa1461046d578063e4f89ae41461047557600080fd5b8063b348a29f116100de578063b348a29f146103ec578063bb698dad146103ff578063c361ce8314610412578063c4d66de81461043657600080fd5b806390469a9d1461039c5780639d27d226146103af578063a81a8b1f146103d0578063adfeb5eb146103d957600080fd5b8063601ad4c9116101875780638c34bc55116101565780638c34bc551461033c5780638da5cb5b1461034f5780638de52dd7146103745780638f32d59b1461037d57600080fd5b8063601ad4c914610305578063715018a61461031857806378bf2b53146103205780637d496be91461033357600080fd5b8063250540cf116101c3578063250540cf146102aa5780633777804f146102bd57806353a8b574146102d257806354fd4d50146102e757600080fd5b806307fc9eb9146101f55780630a9763d71461025f5780631c21a08f146102755780632348238c14610295575b600080fd5b610232610203366004611bad565b603660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61026760fa81565b604051908152602001610256565b610288610283366004611bad565b610529565b6040516102569190611c13565b6102a86102a3366004611c42565b6105d5565b005b6102676102b8366004611c42565b6106ce565b6102c56106f2565b6040516102569190611c5d565b6102da610807565b6040516102569190611cd6565b604080518082019091526002815261763160f01b6020820152610288565b6102a8610313366004611d38565b61093e565b6102a8610978565b6102a861032e366004611d64565b6109ec565b61026760395481565b6102a861034a366004611d64565b610b49565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610256565b61026760385481565b6033546001600160a01b031633145b6040519015158152602001610256565b6102a86103aa366004611c42565b610d27565b6103c26103bd366004611c42565b610e1b565b604051610256929190611d8e565b61026760375481565b6102a86103e7366004611c42565b610ee0565b6102a86103fa366004611eca565b610f9e565b61026761040d366004611ef7565b610fd2565b60375460385460395460408051938452602084019290925290820152606001610256565b6102a8610444366004611c42565b611057565b6034546001600160a01b031661035c565b6102a8610468366004611f86565b61110c565b603a54610267565b6102a8610483366004612164565b6111ff565b6104c1610496366004611c42565b603560205260009081526040902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610256565b6102a86104f1366004611c42565b6112df565b610509610504366004611c42565b611315565b60405161025691906121d9565b61038c610524366004611c42565b611395565b603a818154811061053957600080fd5b90600052602060002001600091509050805461055490612206565b80601f016020809104026020016040519081016040528092919081815260200182805461058090612206565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b6034546001600160a01b0316336001600160a01b0316146106115760405162461bcd60e51b81526004016106089061223b565b60405180910390fd5b6001600160a01b03811661067a5760405162461bcd60e51b815260206004820152602a60248201527f5365636f6e646172793a206e6577207072696d61727920697320746865207a65604482015269726f206164647265737360b01b6064820152608401610608565b603480546001600160a01b0319166001600160a01b0383169081179091556040519081527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99060200160405180910390a150565b60008060006106dc84610e1b565b915091506106ea82826113d1565b949350505050565b603a5460609067ffffffffffffffff81111561071057610710611dea565b60405190808252806020026020018201604052801561077357816020015b6107606040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161072e5790505b50905060005b603a5481101561080357603660008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250508282815181106107e5576107e5612287565b602002602001018190525080806107fb906122b3565b915050610779565b5090565b603a5460609067ffffffffffffffff81111561082557610825611dea565b60405190808252806020026020018201604052801561085857816020015b60608152602001906001900390816108435790505b50905060005b603a5481101561080357603a818154811061087b5761087b612287565b90600052602060002001805461089090612206565b80601f01602080910402602001604051908101604052809291908181526020018280546108bc90612206565b80156109095780601f106108de57610100808354040283529160200191610909565b820191906000526020600020905b8154815290600101906020018083116108ec57829003601f168201915b505050505082828151811061092057610920612287565b60200260200101819052508080610936906122b3565b91505061085e565b6033546001600160a01b031633146109685760405162461bcd60e51b8152600401610608906122ce565b61097383838361143b565b505050565b6033546001600160a01b031633146109a25760405162461bcd60e51b8152600401610608906122ce565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b816001600160a01b038116610a135760405162461bcd60e51b815260040161060890612303565b6033546001600160a01b0316331480610a3657506034546001600160a01b031633145b610a825760405162461bcd60e51b815260206004820181905260248201527f416c6c6f77546f6b656e733a20756e617574686f72697a65642073656e6465726044820152606401610608565b603a548210610ade5760405162461bcd60e51b815260206004820152602260248201527f416c6c6f77546f6b656e733a2074797065496420646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610608565b6000610ae984611315565b60018152602081018490529050610b008482611568565b836001600160a01b03167f720764556647dd167f4229d6a4255ac86018e302a50fc29dd67a70edb7b314d084604051610b3b91815260200190565b60405180910390a250505050565b6034546001600160a01b0316336001600160a01b031614610b7c5760405162461bcd60e51b81526004016106089061223b565b600080610b8884610e1b565b91509150610b9584611395565b610be15760405162461bcd60e51b815260206004820152601c60248201527f416c6c6f77546f6b656e733a204e6f742077686974656c6973746564000000006044820152606401610608565b8051831015610c325760405162461bcd60e51b815260206004820152601d60248201527f416c6c6f77546f6b656e733a204c6f776572207468616e206c696d69740000006044820152606401610608565b6060820151610c44906201518061233a565b421115610c5957426060830152600060408301525b6000610c6583836113d1565b905080841115610cb75760405162461bcd60e51b815260206004820152601b60248201527f416c6c6f77546f6b656e733a204578636565646564206c696d697400000000006044820152606401610608565b6040830151610cc69085611623565b6040840152610cd58584611568565b6060830151604080850151815192835260208301526001600160a01b038716917f84480cc6a063ffd72c3eddf21e3ffd30db3e2b8e386ec3abf09c98ee9e0e8d34910160405180910390a25050505050565b806001600160a01b038116610d4e5760405162461bcd60e51b815260040161060890612303565b6033546001600160a01b03163314610d785760405162461bcd60e51b8152600401610608906122ce565b6000610d8383611315565b8051909150610dd45760405162461bcd60e51b815260206004820152601860248201527f416c6c6f77546f6b656e733a204e6f7420416c6c6f77656400000000000000006044820152606401610608565b60008152610de28382611568565b6040516001600160a01b038416907fbf996b4fd74f0c7159bb017b1db415b0d9a6f13129f46d0b93309d170b78df3190600090a2505050565b610e4860405180608001604052806000151581526020016000815260200160008152602001600081525090565b610e7a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610e8383611315565b915060366000836020015181526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050915091565b600054610100900460ff1680610ef9575060005460ff16155b610f155760405162461bcd60e51b815260040161060890612352565b600054610100900460ff16158015610f37576000805461ffff19166101011790555b603480546001600160a01b0319166001600160a01b0384169081179091556040519081527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99060200160405180910390a18015610f9a576000805461ff00191690555b5050565b6033546001600160a01b03163314610fc85760405162461bcd60e51b8152600401610608906122ce565b610f9a8282611682565b6033546000906001600160a01b03163314610fff5760405162461bcd60e51b8152600401610608906122ce565b61104d84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611048925050503685900385018561239a565b611923565b90505b9392505050565b600054610100900460ff1680611070575060005460ff16155b61108c5760405162461bcd60e51b815260040161060890612352565b600054610100900460ff161580156110ae576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610f9a576000805461ff00191690555050565b600054610100900460ff1680611125575060005460ff16155b6111415760405162461bcd60e51b815260040161060890612352565b600054610100900460ff16158015611163576000805461ffff19166101011790555b61116c87611057565b61117586610ee0565b61118085858561143b565b60005b82518110156111e3576111d08382815181106111a1576111a1612287565b6020026020010151600001518483815181106111bf576111bf612287565b602002602001015160200151611923565b506111dc81600161233a565b9050611183565b5080156111f6576000805461ff00191690555b50505050505050565b6033546001600160a01b031633146112295760405162461bcd60e51b8152600401610608906122ce565b806112765760405162461bcd60e51b815260206004820152601960248201527f416c6c6f77546f6b656e733a20656d70747920746f6b656e73000000000000006044820152606401610608565b60005b81811015610973576112cd83838381811061129657611296612287565b6112ac9260206040909202019081019150611c42565b8484848181106112be576112be612287565b905060400201602001356109ec565b6112d881600161233a565b9050611279565b6033546001600160a01b031633146113095760405162461bcd60e51b8152600401610608906122ce565b61131281611a60565b50565b61134260405180608001604052806000151581526020016000815260200160008152602001600081525090565b506001600160a01b03166000908152603560209081526040918290208251608081018452815460ff1615158152600182015492810192909252600281015492820192909252600390910154606082015290565b6000816001600160a01b0381166113be5760405162461bcd60e51b815260040161060890612303565b6113c783611315565b5191505b50919050565b60008260600151620151806113e6919061233a565b4211156113f557600060408401525b826040015182604001511161140c57506000611435565b8260400151826040015161142091906123b6565b90508160200151811115611435575060208101515b92915050565b818311156114a75760405162461bcd60e51b815260206004820152603360248201527f416c6c6f77546f6b656e733a20736d616c6c20626967676572207468616e206d604482015272656469756d20636f6e6669726d6174696f6e7360681b6064820152608401610608565b808211156115135760405162461bcd60e51b815260206004820152603360248201527f416c6c6f77546f6b656e733a206d656469756d20626967676572207468616e206044820152726c6172676520636f6e6669726d6174696f6e7360681b6064820152608401610608565b60378390556038829055603981905560408051848152602081018490529081018290527ffcc55d4aea72e6d2d439843942c59b3141c952375a217e381f6a40e0b5ac42199060600160405180910390a1505050565b6033546001600160a01b031633148061158b57506034546001600160a01b031633145b6115d75760405162461bcd60e51b815260206004820181905260248201527f416c6c6f77546f6b656e733a20756e617574686f72697a65642073656e6465726044820152606401610608565b6001600160a01b03919091166000908152603560209081526040918290208351815460ff1916901515178155908301516001820155908201516002820155606090910151600390910155565b600080611630838561233a565b9050838110156110505760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610608565b603a5482106116e55760405162461bcd60e51b815260206004820152602960248201527f416c6c6f77546f6b656e733a20626967676572207468616e20747970654465736044820152686372697074696f6e7360b81b6064820152608401610608565b8051602082015110156117505760405162461bcd60e51b815260206004820152602d60248201527f416c6c6f77546f6b656e733a206d6178546f6b656e7320736d616c6c6572207460448201526c68616e206d696e546f6b656e7360981b6064820152608401610608565b8060200151816040015110156117bf5760405162461bcd60e51b815260206004820152602e60248201527f416c6c6f77546f6b656e733a206461696c794c696d697420736d616c6c65722060448201526d7468616e206d6178546f6b656e7360901b6064820152608401610608565b805160608201511161182d5760405162461bcd60e51b815260206004820152603160248201527f416c6c6f77546f6b656e733a206c696d6974732e6d656469756d416d6f756e746044820152701039b6b0b63632b9103a3430b71036b4b760791b6064820152608401610608565b80606001518160800151116118aa5760405162461bcd60e51b815260206004820152603960248201527f416c6c6f77546f6b656e733a206c696d6974732e6c61726765416d6f756e742060448201527f736d616c6c6572207468616e206d656469756d416d6f756e74000000000000006064820152608401610608565b600082815260366020908152604091829020835181559083015160018201558183015160028201556060830151600382015560808301516004909101555182907f1d2b256bb06ebc298b1980410a5e3b1e9bc4be642e8f26a58dc8a97d7fe2bbbb906119179084906123cd565b60405180910390a25050565b6000808351116119755760405162461bcd60e51b815260206004820152601e60248201527f416c6c6f77546f6b656e733a20456d707479206465736372697074696f6e00006044820152606401610608565b50603a5460fa61198682600161233a565b11156119d45760405162461bcd60e51b815260206004820152601e60248201527f416c6c6f77546f6b656e733a2052656163686564204d41585f545950455300006044820152606401610608565b603a80546001810182556000919091528351611a17917fa2999d817b6757290b50e8ecf3fa939673403dd35c97de392fdb343b4015ce9e01906020860190611b1d565b50611a228183611682565b807fb30844b47136a66c1307afd352145423a1c237692b6ba474578f06f4614b35a084604051611a529190611c13565b60405180910390a292915050565b6001600160a01b038116611ac15760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604482015261737360f01b6064820152608401610608565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b828054611b2990612206565b90600052602060002090601f016020900481019282611b4b5760008555611b91565b82601f10611b6457805160ff1916838001178555611b91565b82800160010185558215611b91579182015b82811115611b91578251825591602001919060010190611b76565b506108039291505b808211156108035760008155600101611b99565b600060208284031215611bbf57600080fd5b5035919050565b6000815180845260005b81811015611bec57602081850181015186830182015201611bd0565b81811115611bfe576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006110506020830184611bc6565b80356001600160a01b0381168114611c3d57600080fd5b919050565b600060208284031215611c5457600080fd5b61105082611c26565b6020808252825182820181905260009190848201906040850190845b81811015611cca57611cb783855180518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b9284019260a09290920191600101611c79565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611d2b57603f19888603018452611d19858351611bc6565b94509285019290850190600101611cfd565b5092979650505050505050565b600080600060608486031215611d4d57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611d7757600080fd5b611d8083611c26565b946020939093013593505050565b82511515815260208084015181830152604080850151818401526060808601518185015284516080808601919091529285015160a08501529084015160c084015283015160e08301528201516101008201526101208101611050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611e2357611e23611dea565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e5257611e52611dea565b604052919050565b600060a08284031215611e6c57600080fd5b60405160a0810181811067ffffffffffffffff82111715611e8f57611e8f611dea565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60008060c08385031215611edd57600080fd5b82359150611eee8460208501611e5a565b90509250929050565b600080600083850360c0811215611f0d57600080fd5b843567ffffffffffffffff80821115611f2557600080fd5b818701915087601f830112611f3957600080fd5b813581811115611f4857600080fd5b886020828501011115611f5a57600080fd5b60209290920195509093505060a0601f1982011215611f7857600080fd5b506020840190509250925092565b60008060008060008060c08789031215611f9f57600080fd5b611fa887611c26565b9550611fb660208801611c26565b945060408701359350606087013592506080870135915067ffffffffffffffff60a08801351115611fe657600080fd5b60a0870135870188601f820112611ffc57600080fd5b67ffffffffffffffff8135111561201557612015611dea565b6120256020823560051b01611e29565b81358082526020808301929160051b8401018b101561204357600080fd5b602083015b6020843560051b8501018110156121535767ffffffffffffffff8135111561206f57600080fd5b8035840160c0818e03601f1901121561208757600080fd5b61208f611e00565b67ffffffffffffffff602083013511156120a857600080fd5b8d603f6020840135840101126120bd57600080fd5b6020808301358301013567ffffffffffffffff8111156120df576120df611dea565b6120f2601f8201601f1916602001611e29565b8181528f604083602087013587010101111561210d57600080fd5b8160406020860135860101602083013760006020838301015280835250506121388e60408401611e5a565b60208201528085525050602083019250602081019050612048565b508093505050509295509295509295565b6000806020838503121561217757600080fd5b823567ffffffffffffffff8082111561218f57600080fd5b818501915085601f8301126121a357600080fd5b8135818111156121b257600080fd5b8660208260061b85010111156121c757600080fd5b60209290920196919550909350505050565b81511515815260208083015190820152604080830151908201526060808301519082015260808101611435565b600181811c9082168061221a57607f821691505b602082108114156113cb57634e487b7160e01b600052602260045260246000fd5b6020808252602c908201527f5365636f6e646172793a2063616c6c6572206973206e6f74207468652070726960408201526b1b585c9e481858d8dbdd5b9d60a21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156122c7576122c761229d565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526019908201527f416c6c6f77546f6b656e733a204e756c6c204164647265737300000000000000604082015260600190565b6000821982111561234d5761234d61229d565b500190565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b600060a082840312156123ac57600080fd5b6110508383611e5a565b6000828210156123c8576123c861229d565b500390565b60a0810161143582848051825260208101516020830152604081015160408301526060810151606083015260808101516080830152505056fea2646970667358221220523a51d2401e28d050fe1fdfceb55f1ad54b63d70c677f91baa2f885a48ea79b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__Secondary_init(address)": {
        "details": "Sets the primary account to the one that is creating the Secondary contract."
      },
      "initialize(address)": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "primary()": {
        "returns": {
          "_0": "the address of the primary."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPrimary(address)": {
        "details": "Transfers contract to a new primary.",
        "params": {
          "recipient": "The address of new primary."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15921,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15924,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15964,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16210,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 16343,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "_primary",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 32,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(TokenInfo)8146_storage)"
      },
      {
        "astId": 37,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "typeLimits",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_struct(Limits)8137_storage)"
      },
      {
        "astId": 39,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "smallAmountConfirmations",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 41,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "mediumAmountConfirmations",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 43,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "largeAmountConfirmations",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 46,
        "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
        "label": "typeDescriptions",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TokenInfo)8146_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAllowTokens.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)8146_storage"
      },
      "t_mapping(t_uint256,t_struct(Limits)8137_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAllowTokens.Limits)",
        "numberOfBytes": "32",
        "value": "t_struct(Limits)8137_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Limits)8137_storage": {
        "encoding": "inplace",
        "label": "struct IAllowTokens.Limits",
        "members": [
          {
            "astId": 8128,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8130,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8132,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "daily",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8134,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "mediumAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8136,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "largeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenInfo)8146_storage": {
        "encoding": "inplace",
        "label": "struct IAllowTokens.TokenInfo",
        "members": [
          {
            "astId": 8139,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "allowed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8141,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "typeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8143,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "spentToday",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8145,
            "contract": "contracts/AllowTokens/AllowTokens.sol:AllowTokens",
            "label": "lastDay",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}